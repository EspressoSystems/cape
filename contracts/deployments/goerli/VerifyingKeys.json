{
  "address": "0x2435dFdF0256a8697a0f30Ec06c46157d74135F3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "noteType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "numInput",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "numOutput",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "treeDepth",
          "type": "uint8"
        }
      ],
      "name": "getEncodedId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "encodedId",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "encodedId",
          "type": "uint256"
        }
      ],
      "name": "getVkById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "domainSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numInputs",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "sigma0",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "sigma1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "sigma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "sigma3",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "sigma4",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "q1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "q2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "q3",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "q4",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "qM12",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "qM34",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "qO",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "qC",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "qH1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "qH2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "qH3",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "qH4",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BN254.G1Point",
              "name": "qEcc",
              "type": "tuple"
            }
          ],
          "internalType": "struct IPlonkVerifier.VerifyingKey",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x83d0e75da4be5bded066ad7bc963d9a583e9211a2196eca3b05ce32116a85ef3",
  "receipt": {
    "to": null,
    "from": "0xb19A0B7Cf8BC81492841537b43d49dEdA35DcE4F",
    "contractAddress": "0x2435dFdF0256a8697a0f30Ec06c46157d74135F3",
    "transactionIndex": 101,
    "gasUsed": "2702488",
    "logsBloom": "0x
    "blockHash": "0xa69a4a5a1e59647fd190076b49f50604b99e4099496d41aa4ec8bf4a5817a21b",
    "transactionHash": "0x83d0e75da4be5bded066ad7bc963d9a583e9211a2196eca3b05ce32116a85ef3",
    "logs": [],
    "blockNumber": 7053583,
    "cumulativeGasUsed": "5727764",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a2a06204e48e5b061a7d8a091eecad05",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"noteType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numInput\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numOutput\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"treeDepth\",\"type\":\"uint8\"}],\"name\":\"getEncodedId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedId\",\"type\":\"uint256\"}],\"name\":\"getVkById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"domainSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInputs\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"sigma0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"sigma1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"sigma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"sigma3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"sigma4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"q1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"q2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"q3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"q4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"qM12\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"qM34\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"qO\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"qC\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"qH1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"qH2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"qH3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"qH4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"qEcc\",\"type\":\"tuple\"}],\"internalType\":\"struct IPlonkVerifier.VerifyingKey\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/VerifyingKeys.sol\":\"VerifyingKeys\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPlonkVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BN254.sol\\\";\\n\\ninterface IPlonkVerifier {\\n    // Flatten out TurboPlonk proof\\n    struct PlonkProof {\\n        // the first 5 are 4 inputs and 1 output wire poly commmitments\\n        // i.e., batch_proof.wires_poly_comms_vec.iter()\\n        // wire0 is 32 bytes which is a pointer to BN254.G1Point\\n        BN254.G1Point wire0; // 0x00\\n        BN254.G1Point wire1; // 0x20\\n        BN254.G1Point wire2; // 0x40\\n        BN254.G1Point wire3; // 0x60\\n        BN254.G1Point wire4; // 0x80\\n        // the next one is the  product permutation poly commitment\\n        // i.e., batch_proof.prod_perm_poly_comms_vec.iter()\\n        BN254.G1Point prodPerm; // 0xA0\\n        // the next 5 are split quotient poly commmitments\\n        // i.e., batch_proof.split_quot_poly_comms\\n        BN254.G1Point split0; // 0xC0\\n        BN254.G1Point split1; // 0xE0\\n        BN254.G1Point split2; // 0x100\\n        BN254.G1Point split3; // 0x120\\n        BN254.G1Point split4; // 0x140\\n        // witness poly com for aggregated opening at `zeta`\\n        // i.e., batch_proof.opening_proof\\n        BN254.G1Point zeta; // 0x160\\n        // witness poly com for shifted opening at `zeta * \\\\omega`\\n        // i.e., batch_proof.shifted_opening_proof\\n        BN254.G1Point zetaOmega; // 0x180\\n        // wire poly eval at `zeta`\\n        uint256 wireEval0; // 0x1A0\\n        uint256 wireEval1; // 0x1C0\\n        uint256 wireEval2; // 0x1E0\\n        uint256 wireEval3; // 0x200\\n        uint256 wireEval4; // 0x220\\n        // extended permutation (sigma) poly eval at `zeta`\\n        // last (sigmaEval4) is saved by Maller Optimization\\n        uint256 sigmaEval0; // 0x240\\n        uint256 sigmaEval1; // 0x260\\n        uint256 sigmaEval2; // 0x280\\n        uint256 sigmaEval3; // 0x2A0\\n        // product permutation poly eval at `zeta * \\\\omega`\\n        uint256 prodPermZetaOmegaEval; // 0x2C0\\n    }\\n\\n    // The verifying key for Plonk proofs.\\n    struct VerifyingKey {\\n        uint256 domainSize; // 0x00\\n        uint256 numInputs; // 0x20\\n        // commitment to extended perm (sigma) poly\\n        BN254.G1Point sigma0; // 0x40\\n        BN254.G1Point sigma1; // 0x60\\n        BN254.G1Point sigma2; // 0x80\\n        BN254.G1Point sigma3; // 0xA0\\n        BN254.G1Point sigma4; // 0xC0\\n        // commitment to selector poly\\n        // first 4 are linear combination selector\\n        BN254.G1Point q1; // 0xE0\\n        BN254.G1Point q2; // 0x100\\n        BN254.G1Point q3; // 0x120\\n        BN254.G1Point q4; // 0x140\\n        // multiplication selector for 1st, 2nd wire\\n        BN254.G1Point qM12; // 0x160\\n        // multiplication selector for 3rd, 4th wire\\n        BN254.G1Point qM34; // 0x180\\n        // output selector\\n        BN254.G1Point qO; // 0x1A0\\n        // constant term selector\\n        BN254.G1Point qC; // 0x1C0\\n        // rescue selector qH1 * w_ai^5\\n        BN254.G1Point qH1; // 0x1E0\\n        // rescue selector qH2 * w_bi^5\\n        BN254.G1Point qH2; // 0x200\\n        // rescue selector qH3 * w_ci^5\\n        BN254.G1Point qH3; // 0x220\\n        // rescue selector qH4 * w_di^5\\n        BN254.G1Point qH4; // 0x240\\n        // elliptic curve selector\\n        BN254.G1Point qEcc; // 0x260\\n    }\\n\\n    /// @dev Batch verify multiple TurboPlonk proofs.\\n    /// @param verifyingKeys An array of verifying keys\\n    /// @param publicInputs A two-dimensional array of public inputs.\\n    /// @param proofs An array of Plonk proofs\\n    /// @param extraTranscriptInitMsgs An array of bytes from\\n    /// transcript initialization messages\\n    /// @return _ A boolean that is true for successful verification, false otherwise\\n    function batchVerify(\\n        VerifyingKey[] memory verifyingKeys,\\n        uint256[][] memory publicInputs,\\n        PlonkProof[] memory proofs,\\n        bytes[] memory extraTranscriptInitMsgs\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x05bacaa9c265b454292a0e68d4746c5c8ae1624459c8ba76248abd513100b8d1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/BN254.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n//\\n// Based on:\\n// - Christian Reitwiessner: https://gist.githubusercontent.com/chriseth/f9be9d9391efc5beb9704255a8e2989d/raw/4d0fb90847df1d4e04d507019031888df8372239/snarktest.solidity\\n// - Aztec: https://github.com/AztecProtocol/aztec-2-bug-bounty\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Utils.sol\\\";\\n\\n/// @notice Barreto-Naehrig curve over a 254 bit prime field\\nlibrary BN254 {\\n    // use notation from https://datatracker.ietf.org/doc/draft-irtf-cfrg-pairing-friendly-curves/\\n    //\\n    // Elliptic curve is defined over a prime field GF(p), with embedding degree k.\\n    // Short Weierstrass (SW form) is, for a, b \\\\in GF(p^n) for some natural number n > 0:\\n    //   E: y^2 = x^3 + a * x + b\\n    //\\n    // Pairing is defined over cyclic subgroups G1, G2, both of which are of order r.\\n    // G1 is a subgroup of E(GF(p)), G2 is a subgroup of E(GF(p^k)).\\n    //\\n    // BN family are parameterized curves with well-chosen t,\\n    //   p = 36 * t^4 + 36 * t^3 + 24 * t^2 + 6 * t + 1\\n    //   r = 36 * t^4 + 36 * t^3 + 18 * t^2 + 6 * t + 1\\n    // for some integer t.\\n    // E has the equation:\\n    //   E: y^2 = x^3 + b\\n    // where b is a primitive element of multiplicative group (GF(p))^* of order (p-1).\\n    // A pairing e is defined by taking G1 as a subgroup of E(GF(p)) of order r,\\n    // G2 as a subgroup of E'(GF(p^2)),\\n    // and G_T as a subgroup of a multiplicative group (GF(p^12))^* of order r.\\n    //\\n    // BN254 is defined over a 254-bit prime order p, embedding degree k = 12.\\n    uint256 public constant P_MOD =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    uint256 public constant R_MOD =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    struct G1Point {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    // G2 group element where x \\\\in Fp2 = x0 * z + x1\\n    struct G2Point {\\n        uint256 x0;\\n        uint256 x1;\\n        uint256 y0;\\n        uint256 y1;\\n    }\\n\\n    /// @return the generator of G1\\n    // solhint-disable-next-line func-name-mixedcase\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n\\n    /// @return the generator of G2\\n    // solhint-disable-next-line func-name-mixedcase\\n    function P2() internal pure returns (G2Point memory) {\\n        return\\n            G2Point({\\n                x0: 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2,\\n                x1: 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed,\\n                y0: 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b,\\n                y1: 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa\\n            });\\n    }\\n\\n    /// @dev check if a G1 point is Infinity\\n    /// @notice precompile bn256Add at address(6) takes (0, 0) as Point of Infinity,\\n    /// some crypto libraries (such as arkwork) uses a boolean flag to mark PoI, and\\n    /// just use (0, 1) as affine coordinates (not on curve) to represents PoI.\\n    function isInfinity(G1Point memory point) internal pure returns (bool result) {\\n        assembly {\\n            let x := mload(point)\\n            let y := mload(add(point, 0x20))\\n            result := and(iszero(x), iszero(y))\\n        }\\n    }\\n\\n    /// @return r the negation of p, i.e. p.add(p.negate()) should be zero.\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        if (isInfinity(p)) {\\n            return p;\\n        }\\n        return G1Point(p.x, P_MOD - (p.y % P_MOD));\\n    }\\n\\n    /// @return res = -fr the negation of scalar field element.\\n    function negate(uint256 fr) internal pure returns (uint256 res) {\\n        return R_MOD - (fr % R_MOD);\\n    }\\n\\n    /// @return r the sum of two points of G1\\n    function add(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint256[4] memory input;\\n        input[0] = p1.x;\\n        input[1] = p1.y;\\n        input[2] = p2.x;\\n        input[3] = p2.y;\\n        bool success;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                revert(0, 0)\\n            }\\n        }\\n        require(success, \\\"Bn254: group addition failed!\\\");\\n    }\\n\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.mul(1) and p.add(p) == p.mul(2) for all points p.\\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input;\\n        input[0] = p.x;\\n        input[1] = p.y;\\n        input[2] = s;\\n        bool success;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                revert(0, 0)\\n            }\\n        }\\n        require(success, \\\"Bn254: scalar mul failed!\\\");\\n    }\\n\\n    /// @dev Multi-scalar Mulitiplication (MSM)\\n    /// @return r = \\\\Prod{B_i^s_i} where {s_i} are `scalars` and {B_i} are `bases`\\n    function multiScalarMul(G1Point[] memory bases, uint256[] memory scalars)\\n        internal\\n        view\\n        returns (G1Point memory r)\\n    {\\n        require(scalars.length == bases.length, \\\"MSM error: length does not match\\\");\\n\\n        r = scalarMul(bases[0], scalars[0]);\\n        for (uint256 i = 1; i < scalars.length; i++) {\\n            r = add(r, scalarMul(bases[i], scalars[i]));\\n        }\\n    }\\n\\n    /// @dev Compute f^-1 for f \\\\in Fr scalar field\\n    /// @notice credit: Aztec, Spilsbury Holdings Ltd\\n    function invert(uint256 fr) internal view returns (uint256 output) {\\n        bool success;\\n        uint256 p = R_MOD;\\n        assembly {\\n            let mPtr := mload(0x40)\\n            mstore(mPtr, 0x20)\\n            mstore(add(mPtr, 0x20), 0x20)\\n            mstore(add(mPtr, 0x40), 0x20)\\n            mstore(add(mPtr, 0x60), fr)\\n            mstore(add(mPtr, 0x80), sub(p, 2))\\n            mstore(add(mPtr, 0xa0), p)\\n            success := staticcall(gas(), 0x05, mPtr, 0xc0, 0x00, 0x20)\\n            output := mload(0x00)\\n        }\\n        require(success, \\\"Bn254: pow precompile failed!\\\");\\n    }\\n\\n    /**\\n     * validate the following:\\n     *   x != 0\\n     *   y != 0\\n     *   x < p\\n     *   y < p\\n     *   y^2 = x^3 + 3 mod p\\n     */\\n    /// @dev validate G1 point and check if it is on curve\\n    /// @notice credit: Aztec, Spilsbury Holdings Ltd\\n    function validateG1Point(G1Point memory point) internal pure {\\n        bool isWellFormed;\\n        uint256 p = P_MOD;\\n        assembly {\\n            let x := mload(point)\\n            let y := mload(add(point, 0x20))\\n\\n            isWellFormed := and(\\n                and(and(lt(x, p), lt(y, p)), not(or(iszero(x), iszero(y)))),\\n                eq(mulmod(y, y, p), addmod(mulmod(x, mulmod(x, x, p), p), 3, p))\\n            )\\n        }\\n        require(isWellFormed, \\\"Bn254: invalid G1 point\\\");\\n    }\\n\\n    /// @dev Validate scalar field, revert if invalid (namely if fr > r_mod).\\n    /// @notice Writing this inline instead of calling it might save gas.\\n    function validateScalarField(uint256 fr) internal pure {\\n        bool isValid;\\n        assembly {\\n            isValid := lt(fr, R_MOD)\\n        }\\n        require(isValid, \\\"Bn254: invalid scalar field\\\");\\n    }\\n\\n    /// @dev Evaluate the following pairing product:\\n    /// @dev e(a1, a2).e(-b1, b2) == 1\\n    /// @dev caller needs to ensure that a1, a2, b1 and b2 are within proper group\\n    /// @notice credit: Aztec, Spilsbury Holdings Ltd\\n    function pairingProd2(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2\\n    ) internal view returns (bool) {\\n        uint256 out;\\n        bool success;\\n        assembly {\\n            let mPtr := mload(0x40)\\n            mstore(mPtr, mload(a1))\\n            mstore(add(mPtr, 0x20), mload(add(a1, 0x20)))\\n            mstore(add(mPtr, 0x40), mload(a2))\\n            mstore(add(mPtr, 0x60), mload(add(a2, 0x20)))\\n            mstore(add(mPtr, 0x80), mload(add(a2, 0x40)))\\n            mstore(add(mPtr, 0xa0), mload(add(a2, 0x60)))\\n\\n            mstore(add(mPtr, 0xc0), mload(b1))\\n            mstore(add(mPtr, 0xe0), mload(add(b1, 0x20)))\\n            mstore(add(mPtr, 0x100), mload(b2))\\n            mstore(add(mPtr, 0x120), mload(add(b2, 0x20)))\\n            mstore(add(mPtr, 0x140), mload(add(b2, 0x40)))\\n            mstore(add(mPtr, 0x160), mload(add(b2, 0x60)))\\n            success := staticcall(gas(), 8, mPtr, 0x180, 0x00, 0x20)\\n            out := mload(0x00)\\n        }\\n        require(success, \\\"Bn254: Pairing check failed!\\\");\\n        return (out != 0);\\n    }\\n\\n    function fromLeBytesModOrder(bytes memory leBytes) internal pure returns (uint256 ret) {\\n        for (uint256 i = 0; i < leBytes.length; i++) {\\n            ret = mulmod(ret, 256, R_MOD);\\n            ret = addmod(ret, uint256(uint8(leBytes[leBytes.length - 1 - i])), R_MOD);\\n        }\\n    }\\n\\n    /// @dev Check if y-coordinate of G1 point is negative.\\n    function isYNegative(G1Point memory point) internal pure returns (bool) {\\n        return (point.y << 1) < P_MOD;\\n    }\\n\\n    // @dev Perform a modular exponentiation.\\n    // @return base^exponent (mod modulus)\\n    // This method is ideal for small exponents (~64 bits or less), as it is cheaper than using the pow precompile\\n    // @notice credit: credit: Aztec, Spilsbury Holdings Ltd\\n    function powSmall(\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 modulus\\n    ) internal pure returns (uint256) {\\n        uint256 result = 1;\\n        uint256 input = base;\\n        uint256 count = 1;\\n\\n        assembly {\\n            let endpoint := add(exponent, 0x01)\\n            for {\\n\\n            } lt(count, endpoint) {\\n                count := add(count, count)\\n            } {\\n                if and(exponent, count) {\\n                    result := mulmod(result, input, modulus)\\n                }\\n                input := mulmod(input, input, modulus)\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function g1Serialize(G1Point memory point) internal pure returns (bytes memory) {\\n        uint256 mask = 0;\\n\\n        // Set the 254-th bit to 1 for infinity\\n        // https://docs.rs/ark-serialize/0.3.0/src/ark_serialize/flags.rs.html#117\\n        if (isInfinity(point)) {\\n            mask |= 0x4000000000000000000000000000000000000000000000000000000000000000;\\n        }\\n\\n        // Set the 255-th bit to 1 for positive Y\\n        // https://docs.rs/ark-serialize/0.3.0/src/ark_serialize/flags.rs.html#118\\n        if (!isYNegative(point)) {\\n            mask = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n        }\\n\\n        return abi.encodePacked(Utils.reverseEndianness(point.x | mask));\\n    }\\n\\n    function g1Deserialize(bytes32 input) internal view returns (G1Point memory point) {\\n        uint256 mask = 0x4000000000000000000000000000000000000000000000000000000000000000;\\n        uint256 x = Utils.reverseEndianness(uint256(input));\\n        uint256 y;\\n        bool isQuadraticResidue;\\n        bool isYPositive;\\n        if (x & mask != 0) {\\n            // the 254-th bit == 1 for infinity\\n            x = 0;\\n            y = 0;\\n        } else {\\n            // Set the 255-th bit to 1 for positive Y\\n            mask = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n            isYPositive = (x & mask != 0);\\n            // mask off the first two bits of x\\n            mask = 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            x &= mask;\\n\\n            // solve for y where E: y^2 = x^3 + 3\\n            y = mulmod(x, x, P_MOD);\\n            y = mulmod(y, x, P_MOD);\\n            y = addmod(y, 3, P_MOD);\\n            (isQuadraticResidue, y) = quadraticResidue(y);\\n\\n            require(isQuadraticResidue, \\\"deser fail: not on curve\\\");\\n\\n            if (isYPositive) {\\n                y = P_MOD - y;\\n            }\\n        }\\n\\n        point = G1Point(x, y);\\n    }\\n\\n    function quadraticResidue(uint256 x)\\n        internal\\n        view\\n        returns (bool isQuadraticResidue, uint256 a)\\n    {\\n        bool success;\\n        // e = (p+1)/4\\n        uint256 e = 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52;\\n        uint256 p = P_MOD;\\n\\n        // we have p == 3 mod 4 therefore\\n        // a = x^((p+1)/4)\\n        assembly {\\n            // credit: Aztec\\n            let mPtr := mload(0x40)\\n            mstore(mPtr, 0x20)\\n            mstore(add(mPtr, 0x20), 0x20)\\n            mstore(add(mPtr, 0x40), 0x20)\\n            mstore(add(mPtr, 0x60), x)\\n            mstore(add(mPtr, 0x80), e)\\n            mstore(add(mPtr, 0xa0), p)\\n            success := staticcall(gas(), 0x05, mPtr, 0xc0, 0x00, 0x20)\\n            a := mload(0x00)\\n        }\\n        require(success, \\\"pow precompile call failed!\\\");\\n\\n        // ensure a < p/2\\n        if (a << 1 > p) {\\n            a = p - a;\\n        }\\n\\n        // check if a^2 = x, if not x is not a quadratic residue\\n        e = mulmod(a, a, p);\\n\\n        isQuadraticResidue = (e == x);\\n    }\\n}\\n\",\"keccak256\":\"0x3607d86e6e230526d4cb8f5ae427d9ad04f7f77455f4994ee4f1c6d8d7e829ca\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Freeze2In2Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Freeze2In2Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 32768)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 7)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                5118137774697846205332813764527928981094534629179826197661885163309718792664\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                21444510867008360096097791654924066970628086592132286765149218644570218218958\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                8803078987858664729272498900762799875194584982758288268215987493230494163132\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                2433303804972293717223914306424233027859258355453999879123493306111951897773\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                3260803333275595200572169884988811547059839215101652317716205725226978273005\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                3613466037895382109608881276133312019690204476510004381563636709063308697093\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                2899439069156777615431510251772750434873724497570948892914993632800602868003\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                8379069052308825781842073463279139505822176676050290986587894691217284563176\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                11732815069861807091165298838511758216456754114248634732985660813617441774658\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                13166648630773672378735632573860809427570624939066078822309995911184719468349\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                3491113372305405096734724369052497193940883294098266073462122391919346338715\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                9827940866231584614489847721346069816554104560301469101889136447541239075558\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                13435736629650136340196094187820825115318808951343660439499146542480924445056\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                17982003639419860944219119425071532203644939147988825284644182004036282633420\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                9420441314344923881108805693844267870391289724837370305813596950535269618889\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                14052028114719021167053334693322209909986772869796949309216011765205181071250\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                5993794253539477186956400554691260472169114800994727061541419240125118730670\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                7932960467420473760327919608797843731121974235494949218022535850994096308221\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                20429406452243707916630058273965650451352739230543746812138739882954609124362\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                19692763177526054221606086118119451355223254880919552106296824049356634107628\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                5116116081275540865026368436909879211124168610156815899416152073819842308833\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                19842614482623746480218449373220727139999815807703100436601033251034509288020\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                3222495709067365879961349438698872943831082393186134710609177690951286365439\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                3703532585269560394637679600890000571417416525562741673639173852507841008896\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                14390471925844384916287376853753782482889671388409569687933776522892272411453\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                12261059506574689542871751331715340905672203590996080541963527436628201655551\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                212133813390818941086614328570019936880884093617125797928913969643819686094\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                2058275687345409085609950154451527352761528547310163982911053914079075244754\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                7507728187668840967683000771945777493711131652056583548804845913578647015848\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                15764897865018924692970368330703479768257677759902236501992745661340099646248\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                18302496468173370667823199324779836313672317342261283918121073083547306893947\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                8286815911028648157724790867291052312955947067988434001008620797971639607610\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                3470304694844212768511296992238419575123994956442939632524758781128057967608\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                9660892985889164184033149081062412611630238705975373538019042544308335432760\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                2964316839877400858567376484261923751031240259689039666960763176068018735519\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                12811532772714855857084788747474913882317963037829729036129619334772557515102\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaed0ac1a38ac4b0efd28b720b24fe33648f5e74105f8edfcb965b48c32453edf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Freeze3In3Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Freeze3In3Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 32768)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 9)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                13960731824189571867091334541157339805012676983241098249236778497915465352053\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                15957967148909612161116218663566087497068811688498797226467515095325657152045\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                10072587287838607559866316765624459623039578259829899225485734337870604479821\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                15609102652788964903340031795269302405421393375766454476378251576322947285858\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                6565707169634610873662073730120423414251877113110818166564470784428289496576\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                9611712776953584296612678707999788907754017999002246476393974258810867124564\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                19122400063214294010991425447556532201595762243736666161415050184531098654161\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                8531074110951311734071734321378003618052738734286317677359289798683215129985\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                18914674706112982859579196036464470962561796494057486369943014188445892675591\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                8521550178820292984099911306615540388090622911114862049753515592863829430736\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                14630335835391046544786473024276900306274085179180854494149987003151236405693\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                11927636740621831793456799535735389934490350641107279163802406976389995490906\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                12724914112829888521503996001370933887413324349676112061904353298191125761834\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                3433370683786676509006167821257247081483834358490691629467376279251656650897\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                9566744544381523978155846140753126684369534823789897373672815695046810310988\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                260017699035964770662690666115311602214922546306804012310168827438556483441\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                18742890127040989288898023133652949889864689947035150783791742574000686319400\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                18749161983189150319356152659011703669863797011859087161475368338926038180308\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                20773233313791930222139945008080890514898946888819625041024291924369611870607\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                13521724424975535658347353167027580945107539483287924982357298371687877483981\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                10660982607928179139814177842882617778440401746692506684983260589289268170379\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                15139413484465466645149010003574654339361200137557967877891360282092282891685\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                17250558007005834955604250406579207360748810924758511953913092810009135851470\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                11258418978437321501318046240697776859180107275977030400553604411488978149668\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                18952078950487788846193130112459018587473354670050028821020889375362878213321\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                17193026626593699161155564126784943150078109362562131961513990003707313130311\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                14543481681504505345294846715453463092188884601462120536722150134676588633429\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                18051927297986484527611703191585266713528321784715802343699150271856051244721\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                17183091890960203175777065490726876011944304977299231686457191186480347944964\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                4490401529426574565331238171714181866458606184922225399124187058005801778892\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                1221754396433704762941109064372027557900417150628742839724350141274324105531\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                5852202975250895807153833762470523277935452126865915206223172229093142057204\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                15942219407079940317108327336758085920828255563342347502490598820248118460133\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                13932908789216121516788648116401360726086794781411868046768741292235436938527\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                11253921189643581015308547816247612243572238063440388125238308675751100437670\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                21538818198962061056994656088458979220103547193654086011201760604068846580076\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd07fbe21dbdc1be9a602fc27b2ad4cbcecab74f4ff763ac190fb7be09d84d83\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Mint1In2Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Mint1In2Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 16384)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 22)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                18715857233450097233566665862469612667705408112918632327151254517366615510853\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                12056659507165533739511169991607046566607546589228993432633519678105063191994\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                14824195002671574468331715635494727121571793218927771429557442195822888294112\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                15545363005844852395434066542267547241977074468438704526560481952507920680442\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                12730937992652390663908670084945912580250489721157445258662047611384656062589\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                13922972325643955705903067190275250069235823502347080251607855678412413832655\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                11205515283341717493374802581094446196264159623530455592177314841729924213298\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                21626228139140341994554265888140425084500331880890693761295353772893134873176\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                1297892505212470170669591175924901147071008882331974691087297632739019966869\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                5046998337256619649328073625306172605427225136111531257681027197976756517579\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                3416126502361838053757816729968531801453964981226124461039874315717193603949\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                13457539169423794765649307630863376252412201646715715024708233511728175887361\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                14560725448400229197269899568322480538530865768296597131421754928016376186765\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                948706310326485520368947730671484733882983133515374382612890953953178516965\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                3629576662585230443325226017156907801568659344982452092584030101519414013585\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                11755059153403672321764085695058203755528587063932979109812536973510125660021\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                11004655709419206490244680738164512138236779409731663166100876015592834374329\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                3075086625849477481019461602494583874758896233088021555313650923393327170396\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                5116214943488395672472205024247672892505731883467355177124324350502474270399\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                5862627121952215177093377764664762757373132220173512585597211838016077936314\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                17591159830764396623974345916017368127032492198578190405514161605820133619635\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                21823861194811124564815272373053730365073236057851878678286985577859771922838\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                4270340305067371269951830198578603793146745643909898988425564374444309637164\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                3429516859933338020020014748205944416226065682096817012737681215798779959358\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                18140449432973717159678873762584078749849242918610972566667541337332136871548\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                9496973080403650076452512345486781056144944295333639818676842964799046293494\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                2679601553769052076036509170798838073426403353317218807312666276919478214029\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                8104020893469546307958011379600482565107943832349081304458473817724197756534\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                15359849857211682094089890949757251089555853826462724721381029431330976452771\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                16491566299722544741678927866350154870498939946959249271831955257228312538659\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                12100931690223724084472313998885551549102209045806672061992493151022394323721\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                789632069622495739311692844331711309820973570859008137449744966665497183364\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                9372499437356245507830218065264333778849228240985893278867565670067559001476\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                5071314442263159884139201702429590502916613589463313571011317767821015131114\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                13714688610643446356217590887080562811494820054657712165894734861828853586333\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                1823119861575201921550763026703044012616621870847156108104965194178825195245\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd67c9657c6f07e963aa52abdf8596aec671a8f7d3a0a7c8b3587941a3d4ab01\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Transfer1In2Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Transfer1In2Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 32768)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 14)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                6451930258054036397165544866644311272180786776693649154889113517935138989324\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                15824498031290932840309269587075035510403426361110328301862825820425402064333\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                16567945706248183214406921539823721483157024902030706018155219832331943151521\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                14506648136467119081958160505454685757895812203258866143116417397069305366174\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                16908805137848644970538829805684573945187052776129406508429516788865993229946\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                13370902069114408370627021011309095482019563080650295231694581484651030202227\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                11385428061273012554614867838291301202096376350855764984558871671579621291507\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                18938480909096008246537758317235530495583632544865390355616243879170108311037\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                7250836052061444170671162428779548720754588271620290284029438087321333136859\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                9774478170511284714380468511107372909275276960243638784016266344709965751507\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                2164661706057106993702119971892524764909406587180616475316536801798272746351\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                7993083931046493938644389635874939373576598203553188654440768055247347522377\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                17875027092910639802264620931724329796279457509298747494670931666396434012177\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                12276180841132702377773827582398158204508221552359644390751974783173207949116\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                6923045257159434019788850173231395134054684072354814328515094196682490129996\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                10297389981574891432841377306749459633586002482842974197875786670892058142179\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                13566140293342467207563198706820126266175769850278450464476746689910443370750\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                4337013617009771491102950113766314929630396941539697665107262932887431611820\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                19545356440018631139549838928930231615194677294299230322568967706100221743452\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                3905268653568739552774781017975590296651581349403516285498718251384231803637\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                3633513776458243190609011598510312470369153119749343878250857605063953894824\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                10348854780537633653024803962077925757963724802390956695225993897601858375068\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                10515123958235902109894586452633863486298290064878690665500349352367945576213\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                20835963785046732330293306231553834880816750576829504030205004088050809531737\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                10349250837084111252673833558497412287345352572732754388450385078539897036072\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                1295954576893766564415821998145161393110346678014886452040838119568563355556\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                18595738613642013642528283665640490180800278502934355301953048187579782737773\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                5708601727819525671780050950771464619626673626810479676243974296923430650735\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                8105844768413379370590866345497514518639783589779028631263566798017351944465\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                13767799708582015119198203890136804463714948257729839866946279972890684141171\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                13976995316216184532948677497270469464100744949177652840098916826286666391978\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                8782060747227562892357029272916715317651514559557103332761644499318601665300\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                10423258206189675762927713311069351374538317153673220039972782365668263479097\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                12712089727236847935392559371166622501626155101609755726562266635070650647609\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                3447947975392962233948092031223758925923495365282112464857270024948603045088\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                4655198050073279486560411245172865913095816956325221266986314415391129730949\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b675fc4b56b1f9b2580aef2ed84f6823fb8a180a637b97ff4d4603941be6d77\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Transfer2In2Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Transfer2In2Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 32768)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 27)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                2353344940323935826134936223947938042521909475033774928828281661731550798722\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                9746655158250922067275109215926891774244956160343543537816404835253168644024\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                15455409296542685326830249024223724266624290984578410657713086954481835262616\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                18311379816054123251097409624258299432408683566103718315014121691958807960547\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                3595102568308999621710931895728700858137670894580826466196432246884451756647\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                5971868016111020985417776938700261612639243638290968867440360355753182506016\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                12443289603239702012200478229424802817855243081906319312702825218898138895946\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                14108881420049829870828878537593066975275378607590487898362908473190089969939\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                19679657199741651524390089978450662678686454680964744364368691879627016432652\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                17114067594856558864780849616452660298251042000563020846487894545389438664806\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                4521205613646422234630873762189179209607994647697100090154823061235920789353\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                16106449496625400183304424755719536524421029289605758534728292280016648447637\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                15558337488326969806891656016031810341177100586194811207644366322955582958290\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                154404024660163916069895563430486111291743096749375581648108814279740019496\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                10968315091130697826739702003431871061194509005508422925553623050382577326217\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                15427520064071248215056685014173235486104450904391795026852773491856938894709\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                18552120566932429867086353275996329695634259700395564758868503989836119743976\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                3758067104786429430903075307629079520236919298153864746942709833835554967358\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                15572105585408879365916525794377657194208962207139936775774251314043834098564\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                6020958592977720912767721649577520866900127639444801108025166566775601659967\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                7222736374399006211510699304087942059126683193629769887877014686905908945806\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                3206829195840321731462512861208486643839466222481973961857037286401683735687\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                3354591448826521438380040598853232839565248677422944332090180952953080366288\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                19963668090281374431317017250026510351550118984869870738585126468447913244591\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                17974807300702948996049252322259229942746003444136224778640009295566243156501\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                12052046477897583522878740699736101759681160588792932192885758224246430725626\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                4921034593166626300651198249205635549101612701433540517476055976860959484949\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                10185405862489710856496932329182422458788356942668474473592359869600739434412\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                5878093886505576171449048465070377785955067968838740459103515014923390639639\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                15259888626953734049577795735967576333281508824947666542918638019623811781546\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                19643669610230135658961129468905806322162637394453939877922249528939594418232\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                12224852444220822793589818921506014057813793178254991680570188956045824616826\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                6641963433101155753834035944397107424954075034582038862756599997819459513127\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                3589782713125700501109156506560851754947305163593203470270968608024453926281\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                12330486534063835148740124350008103247243211222952306312071501975705307117092\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                20509504091296584456523257770792088853619865130173628006197630419037120651742\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x551bf64b658e5842e7e3ab18d5b86e5db9cd36682613d189d02f053e4d13a5bb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Transfer2In3Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Transfer2In3Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 32768)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 32)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                11238918059962060895836660665905685183821438171673788872298187887301460117949\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                10312536098428436059770058647883007948230826032311055958980103002216444398029\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                3069296210454062532812049058888182398466997742713116483712055777740542557095\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                10585452901889142818220136732592206035573929406563129602198941778025261934559\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                49796010413150322443747223871067686918728570624660232645490911700120682624\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                19418979289570937603858876101332413214999751685423780259104815571219376501897\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                5017549683124968830897329522528615084825569869584518140023215913256996665369\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                6904459746270415738591583761210331008369254540754508554401155557939093240173\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                15294346261666962115813163162624127728984137808463913539428567756274357657589\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                6335459220235140110171052568798094575702073047123843498885605762024671566976\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                3447729854865352811909348476580581256116229886577313169808953699321178547567\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                10391923178665150678480226437763860904879593811452327022884721625331046561649\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                21331037483834702908326522885638199264097608653827628146912836859219217391521\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                17700979571500030343918100715185217716266526246917146097813330984808052588149\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                19231315187566819499805706567670055518295048760424962411545826184537652443122\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                1786951957014031658307434161704132339929023647859863721152324287915947831283\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                891318259297166657950777135402426115367536796891436125685210585889035809375\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                19080042747384460176894767057995469942920956949014313980914237214240134307208\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                8600864573298799022763786653218006387353791810267845686055695121259061041328\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                16693779427169671344028720673356223282089909563990595319572224701304611776922\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                9157681660736307225301034938839156685740016704526090406950858434609030225480\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                8030757918449598333025173041225419314601924784825356372892442933863889091921\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                13640927194155719878577037989318164230713264172921393074620679102349279698839\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                6900604409783116559678606532527525488965021296050678826316410961047810748517\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                5252746067177671060986834545182465389119363624955154280966570801582394785840\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                9195131821976884258765963928166452788332100806625752840914173681395711439614\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                14977645969508065057243931947507598769856801213808952261859994787935726005589\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                5096294777527669951530261927053173270421982090354495165464932330992574194565\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                3545567189598828405425832938456307851398759232755240447556204001745014820301\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                1941523779920680020402590579224743136261147114116204389037553310789640138016\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                18752226702425153987309996103585848095327330331398325134534482624274124156372\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                11041340585339071070596363521057299677913989755036511157364732122494432877984\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                14590850366538565268612154711126247437677807588903705071677135475079401886274\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                18590050088847501728340953044790139366495591524471631048198965975345765148219\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                21704590671982347430816904792389667189857927953663414983186296915645026530922\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                20891693206558394293557033642999941159043782671912221870570329299710569824990\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x972a44ce31523b90135b140bf707d5dd82d67c4ea3f7d7f285627969704d03f7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Transfer3In3Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Transfer3In3Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 65536)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 45)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                6745569324574292840123998773726184666805725845966057344477780763812378175216\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                15674359264100532117390420549335759541287602785521062799291583384533749901741\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                3882047939060472482494153851462770573213675187290765799393847015027127043523\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                7630821036627726874781987389422412327209162597154025595018731571961516169947\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                21225224708013383300469954369858606000505504678178518510917526718672976749965\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                16365929799382131762072204211493784381011606251973921052275294268694891754790\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                18816028553810513067728270242942259651783354986329945635353859047149476279687\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                11882680851945303658063593837716037756293837416752296611477056121789431777064\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                21510097154791711734296287821852281209791416779989865544015434367940075374914\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                3430102751397774877173034066414871678821827985103146314887340992082993984329\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                19869597504326919094166107694290620558808748604476313005465666228287903414344\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                7150111322568846997819037419437132637225578315562663408823282538527304893394\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                15160992848460929858090744745540508270198264712727437471403260552347088002356\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                14658479685250391207452586531545916785099257310771621120220342224985727703397\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                8235204123369855002620633544318875073465201482729570929826842086900101734240\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                1315782571791013709741742522230010040948540142932666264718230624795003912658\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                7021080634443416008459948952678027962506306501245829421538884411847588184010\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                6584493294015254847476792897094566004873857428175399671267891995703671301938\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                19199743165408884046745846028664619315169170959180153012829728401858950581623\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                14838749009602762930836652487207610572239367359059811743491751753845995666312\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                10248259393969855960972127876087560001222739594880062140977367664638629457979\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                3405469462517204071666729973707416410254082166076974198995581327928518673875\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                9259807925511910228709408577417518144465439748546649497440413244416264053909\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                4349742126987923639436565898601499377373071260693932114899380098788981806520\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                195924708408078159303893377539882303047203274957430754688974876101940076523\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                2730242103617344574903225508726280194241425124842703262405260488972083367491\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                20219387287202350426068670038890996732790822982376234641416083193417653609683\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                4712902992473903996354956065401616044154872569903741964754702810524685939510\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                20606018511516306199576247848201856706631620007530428100607004704631466340548\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                3431535724436156106895017518971445784357440465218022981124980111332355382620\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                16926802729258759088538388518776752987858809292908095720269836387951179849328\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                17982233223518308144739071673627895392237126231063756253762501987899411496611\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                2769108222659962988853179530681878069454558991374977224908414446449310780711\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                1229799452453481995415811771099188864368739763357472273935665649735041438448\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                4813470345909172814186147928188285492437945113396806975178500704379725081570\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                5911983361843136694947821727682990071782684402361679071602671084421707986423\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b99c5af4d76f09fef1dd76c421b249560d3ff70288fef8f9e50534488401a1f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Utils {\\n    function reverseEndianness(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v =\\n            ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v =\\n            ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n}\\n\",\"keccak256\":\"0x6171f0308aaf0e5379abfee2ed1aa69b81232ef35f0a5576bf7e16d9ad73ac49\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/VerifyingKeys.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./Transfer1In2Out24DepthVk.sol\\\";\\nimport \\\"./Transfer2In2Out24DepthVk.sol\\\";\\nimport \\\"./Transfer2In3Out24DepthVk.sol\\\";\\nimport \\\"./Transfer3In3Out24DepthVk.sol\\\";\\nimport \\\"./Mint1In2Out24DepthVk.sol\\\";\\nimport \\\"./Freeze2In2Out24DepthVk.sol\\\";\\nimport \\\"./Freeze3In3Out24DepthVk.sol\\\";\\n\\nlibrary VerifyingKeys {\\n    function getVkById(uint256 encodedId)\\n        external\\n        pure\\n        returns (IPlonkVerifier.VerifyingKey memory)\\n    {\\n        if (encodedId == getEncodedId(0, 1, 2, 24)) {\\n            // transfer/burn-1-input-2-output-24-depth\\n            return Transfer1In2Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(0, 2, 2, 24)) {\\n            // transfer/burn-2-input-2-output-24-depth\\n            return Transfer2In2Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(0, 2, 3, 24)) {\\n            // transfer/burn-2-input-3-output-24-depth\\n            return Transfer2In3Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(0, 3, 3, 24)) {\\n            // transfer/burn-3-input-3-output-24-depth\\n            return Transfer3In3Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(1, 1, 2, 24)) {\\n            // mint-1-input-2-output-24-depth\\n            return Mint1In2Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(2, 2, 2, 24)) {\\n            // freeze-2-input-2-output-24-depth\\n            return Freeze2In2Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(2, 3, 3, 24)) {\\n            // freeze-3-input-3-output-24-depth\\n            return Freeze3In3Out24DepthVk.getVk();\\n        } else {\\n            revert(\\\"Unknown vk ID\\\");\\n        }\\n    }\\n\\n    // returns (noteType, numInput, numOutput, treeDepth) as a 4*8 = 32 byte = uint256\\n    // as the encoded ID.\\n    function getEncodedId(\\n        uint8 noteType,\\n        uint8 numInput,\\n        uint8 numOutput,\\n        uint8 treeDepth\\n    ) public pure returns (uint256 encodedId) {\\n        assembly {\\n            encodedId := add(\\n                shl(24, noteType),\\n                add(shl(16, numInput), add(shl(8, numOutput), treeDepth))\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe547ada74ff10128a51f61d3c1f5aeedd4efb5cc76399e74fa40aaaf062cd0fb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x612fe561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806322e6017b14610045578063b95a6ecc14610082575b600080fd5b61006f610053366004612d4d565b6000818360081b018460101b018560181b019050949350505050565b6040519081526020015b60405180910390f35b610095610090366004612da1565b6100a2565b6040516100799190612dba565b6100aa612abe565b6201021882036100c2576100bc61019c565b92915050565b6202021882036100d4576100bc61077d565b6202031882036100e6576100bc610d5d565b6203031882036100f8576100bc61133c565b6301010218820361010b576100bc61191d565b6302020218820361011e576100bc611efe565b63020303188203610131576100bc6124de565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f556e6b6e6f776e20766b20494400000000000000000000000000000000000000604482015260640160405180910390fd5b919050565b6101a4612abe565b6180008152600e60208201527f0e43a9c1f84504b3e9d9d66bba090d86342a6927ccb0831b4ad3e4314f1c650c6040820151527f22fc59364ac3ff6f432fbc0d99d55fd380644b90aedff62d7960d7abcd321dcd6020604083015101527f24a11ffd2dbff2c12e1b8d84449d8b8ce99cb171433e9f4660ba1a1e0a6a07a16060820151527f201278ccefb9424277a1cc6056c21188e47664b65867aa34d82f5a80b4ec469e6020606083015101527f25620b682e4b0c96b8e1a099b6662a4a8376d44ff983890173699f49d37b467a6080820151527f1d8fa991f3321b7560caf532d1e11e8c483b058f3b851d4bed59a9a4d57747736020608083015101527f192bec85ee4ae39d80938b36091b59b6dc1ed3fa9fde9ae7345ab160571975f360a0820151527f29decce2ba198a55fb8ded11be1c98a3944b4bdf2a16d88c3ddf41b5d4ec45fd602060a083015101527f1007d3e8d1bf392cdf90615060efe25b8498079e1c3f68a21d2843b9f27dfddb60c0820151527f159c28997f8a4aa650a8ea6cb3d8008b1d34a571f4ca3b1ce1a7d23df79024d3602060c083015101527f04c927b524846a12c4efed83946a39c74ab734ce958c4f71637e60b62f26836f60e0820151527f11abecd8cccbc86e924da099abe68dea35049684da97ee319fc0ef242ea61b49602060e083015101527f2784e8245e065a1f85ec2c85c65a9fd941373173a83e298243c014008c161811610100820151527f1b241276d42c90d21f71bead44a208fe5ad33ff0cb8e4ad27847d24936327f3c602061010083015101527f0f4e4e047e518774413e6edc7ed13b627f26722c73aefd695ad4f119f0042e4c610120820151527f16c41dbe8e8d78fd49a53850b0c169eeaabc76b461640a8f73af0d01b62fe5e3602061012083015101527f1dfe29ce2bea4467598d6e4a9c6bbf7ccd4fc743319c1f42bc51b0cea74868fe610140820151527f0996a9a7d69959d5f386951568429e50ec2360b7689c697b923df0c4c08d05ac602061014083015101527f2b36479b3f382fbc5a658c11947ef42700fccf3b60844e1dc11821c8b7d2115c610160820151527f08a24dc1195aa7a6f4e36a1755660fe66496c21eb7238ae1e609db2d8d39baf5602061016083015101527f08087ef47b82c20ef42a961ef6b65b860899ada0c6f2d8fb43b4b5d949f44da8610180820151527f16e13e860ba010b267637fa2e9f6b735c0063c782a84fc3c34b2eab30d258d9c602061018083015101527f173f59689c7dae0f41cbeae0f99c3dfe81de21fe5eee07817745c4e68fc66f156101a0820151527f2e10bcd2451be7affab48e365c6535ddfaf7f3af3141b3604ec5b388e2276d5960206101a083015101527f16e177e89964bb6637a4e504e7049c1b770163ea82ec10fd14aa87d887785d286101c0820151527f02dd7bfae0527e1b790de929718f48c5c7f1b4483645848526db85c73ba5bfa460206101c083015101527f291cd0a86c4775c29b7ff9071a039d1e2ab8cf7d56aa3ac3fa9364bc4fed2f6d6101e0820151527f0c9ef43e68125deb4e99c31f86bfe34d3e9161afc12cfaaf72f53afc5c43036f60206101e083015101527f11ebbedcb714f6c9a0cee61c167ef543bd45c4666861a282e1c2a3e2bbc48911610200820151527f1e704c699ae47d76c15f4b698e95e15605d9f6c3b0cf3a0fb9c28ea58fbfae73602061020083015101527f1ee6b2f1f34c55943ce4ec685db554f9fead0650bb9d70a40465dab0b6c5a1aa610220820151527f136a786164ad5fce4dab8c390193939ec940bd30a8704be668bbdc46cdffcb14602061022083015101527f170b5ae67c6bbb0f4f6db8a8a89a3254dfaa415ba7c0931a51e03c091b5e4739610240820151527f1c1ac9ae0b2799d5b7c79ddac85be419663b55f16550bf383cf69088ed130439602061024083015101527f079f782a6032ff962a379d098b66fb9845271c675bdad2fab3ac95e2b5be44e0610260820151527f0a4abfac66665570e746c1e589de2638c14b60bd37552a2172450d3b729bff856020610260830151015290565b610785612abe565b6180008152601b60208201527f0533f22f45fcaaf2072440bbef87e5b4617c2c007a0240df1ccc8738195823826040820151527f158c694c9dbb17304780263f0d5c14098ea97f1978d8c0eb5848bbdd750c1fb86020604083015101527f222b73a03dc4512969c7e8d04bb5605a67c4e332ff960643e05be3a3318f42986060820151527f287bdfaa69ae372c2b73c8e882eba0d65e1bbc16336c2b669aaf6e8f951d1be36020606083015101527f07f2c18596554958b7abc6f42fa238b56576e7357cf70ad371062f7a54d42a676080820151527f0d33f51fc3b7e708aac18a0776fa694c0b226b45595f19b127de0e4fb8f62c206020608083015101527f1b82a6ff4fabd0ff22f78ba31ddab995474b4dec926f722decd808387bba164a60a0820151527f1f3158096cf9912974ba9cc5824a1707a5d009a90ff71c644a1c1cfceeef5113602060a083015101527f2b824a8f4979f7260dd49adc72fc401c1443d1465fdeb0987fdbd23f96e4ec0c60c0820151527f25d6380fdc7910fb7e88160f15619a6ef0a18406ca8504b12a9ad1cabcf08066602060c083015101527f09fee964b4e39c6573d1e3d883dc7c9c618eb1d08d8c24c1ee55656a95dbdf6960e0820151527f239bed6762dd8411fbe02ec642b41ab26bc19419e26822f9c7f18d320b66a695602060e083015101527f2265b4fb0fcd978ef617f13812dcd45a43f269001340752a8cfb175cfe87ead2610100820151527e5763bb9460e8da53ce7de4e8572544032dda53316d9b9870072bac5fa4d328602061010083015101527f183fd8a9fcabcd560e33e1ae46cd6ac648da8017e4ad433374f146b89fd55889610120820151527f221baabb1d7503be0c28c1a432723b6edd7d2eff2c51af0f4c6761fff1900575602061012083015101527f290420cd26cf81afc3721aa6b968f2bf825efdf92b0bae59a81ad16059231de8610140820151527f084efd98329c65d96b873323ed9245dae7adf215c37f28d1f5c35e840a068f3e602061014083015101527f226d7fda2a5fe36ad573c7761cd2605e2d9830066a9b51debbb83de004846384610160820151527f0d4fbde67608d8127cfc9f2510139e3b607d175d71c8e35ad60b1eb1b862803f602061016083015101527f0ff7ec85d8de88b01dd268fae3f0af7993427c3dbdb3f907bd99a9d37881638e610180820151527f07170041c62ea422b4cac07bf3463d74a88f70c9e7ac674d3041b2e150b3c487602061018083015101527f076aa1a859adc2862a3d83990ebcf051a323fddd8905c8cbd3d132297a11c4d06101a0820151527f2c230924b521438db0a3678cf358b81bd314afd7865edfc898efc28a1bedf7af60206101a083015101527f27bd6161f8cd7c118efa6794d5aa8682a548f5a0c257f2875f30aa0ad828d2156101c0820151527f1aa537713dec1a7f8f5f08385d68aeee0cbf4d234f6069a4f9b5654edd4b75fa60206101c083015101527f0ae134f5cea42657316905d0465c12ce8f10e81e509a27c924f8bdbbac31ac156101e0820151527f1684bc44b9547ef8843431f84a42b371e0d7bd92d35520d6b96a28932c691fac60206101e083015101527f0cfee21bfb400da57fab05206bac008411f2d84723d4e90f4136823b70d55e17610200820151527f21bcca7789fd18c025c13a33c6d6c71d7ac01e89a11948d2cc373708565f93aa602061020083015101527f2b6dec496743634994859199d3f936a7a707db95901aa14fbafc0a10b8fc8838610220820151527f1b070572c6041e1747f95986d98c6392f2ae8b34cb39a6824fd2c79ac231e97a602061022083015101527f0eaf37d42fdf1125af20a36209fb86cf5db52079f4aa3af6073bf60c46f4ab27610240820151527f07efbeb9310ae16ce44d5d62c702aa8f0fee562fad18a711a3dc8463e0634d89602061024083015101527f1b42cedcee61d05323fedca0519afe4949f20720a84fc1322cf433d40270f624610260820151527f2d57f7cb3ad82fb7b95dfd7e5bd5696e10e61331d67e0025c0035faf72ec61de6020610260830151015290565b610d65612abe565b61800081526020808201527f18d9008ff369bcced7cd6754a30b877215c141c8b04d41655f225b96bcbe49bd6040820151527f16ccb04741387cd2bcec081b4c97ef72a2af284bd374dcc87b884523aecf09cd6020604083015101527f06c928fbd22b9db901950614fcafcf8d3f281683f4879dde67f96fe26d69bba76060820151527f1767276e1d70214a444944c44c4abf3ec92c367a342117476b9f1d2ca199a7df6020606083015101527e1c2efcae58bcb22af73dd0fe1eda780496cf27d4dbd9be663da308b1bac0806080820151527f2aeec0b635a098722ff71443a011b72e9de34ccaefdf14ac509ed71d5477f4896020608083015101527f0b17d51d75d42924b9fc927cc4826e2b6a546a7be14ee8370903680aa911781960a0820151527f0f43c92594950deaae35efa1485e8f3379c38e4339a3afb0702c73c5db88f96d602060a083015101527f21d04b103ec44a6b112f9f7464ea0e18720c227fa3c485bb9fce52212b265ff560c0820151527f0e01be2b123dc742b88c5370bd6a6c3bfe0b0813b8f5bc7b745cc2573dec5c80602060c083015101527f079f588fd5f3dabaddfbef8bda97aa4ec301fac78b72dd238a1b8edf59a0e56f60e0820151527f16f99ebdb7bf17291ee254cf830a8a4d47d877fb4f358c7cb65dc00e7c043771602060e083015101527f2f28f07a5b1814470bea772a8f1ef3efd7b5ea6e55cd7ad8c59da0e99ff69fa1610100820151527f2722663eff7d2170b427f857aabea8a5d9c93cfbcc58c76c987cf568333a7e75602061010083015101527f2a8489e5cb999c94662a738eca14c8a57d853bc63557e47281230d2eb675b7f2610120820151527f03f36103e63eaa846647052721eec6e910ce1bcaf9f5694baeb6ee058e05aff3602061012083015101527f01f877dfb2305eac19a42e8cc2c897e5c93784a6c2ffb3740ccf24855d64725f610140820151527f2a2eebe723c834ce42ded9b187173193dc50ef74a66c3f4c7de54911df669d88602061014083015101527f1303eab5c3dd3b94a20d43e1962c86961bb8df59e2ee946abac269749663d8b0610160820151527f24e858254b75f8560135086d6e56a62a4b5924269282c24cd67475b2f1c3a99a602061016083015101527f143f106b6b9fab414a725e381d2d329cef77f58bd635230288a4687816fdde48610180820151527f11c13f76a86f631dcf8f986deca4d8aa6b364bce7d60d14d5c06814aed09bd51602061018083015101527f1e287dbe7f1530200f3561e3b75c7443c7334135db9952f03ba69876a8631f976101a0820151527f0f419a8b33c8ce164129d232bc7fa21450f11e0decd961c1506b0451ecf8306560206101a083015101527f0b9cf2ec3428af666ed3244d66346bb88962b2e2475c82b38b12509b483740306101c0820151527f1454429b1ac5f2a8e70937b80962fd5428fb973fc1bd2b49276a11e61f8172fe60206101c083015101527f211d0c158778541083dc84fb5dfb83fa6f3e0110f3827158229538063d76ed556101e0820151527f0b44668f586037d69d8e7ba7411352b6503dec8a885251e2be45e8fa9ad8e38560206101e083015101527f07d6b84c45fa960b89c8a0c0b8a4b1cbf00b4e98515d39e8dce218e807bb0dcd610200820151527f044add0f763d8e78c49467e8ad19c3ccd1f9124191cbae5251ceb431b1782d20602061020083015101527f2975625a3cb953129efffdf246dd1afc27118addc8baa8e31a3e589cea7eadd4610220820151527f18692d641c182409ae193fdbb8acbfe8f4cb4a4005cdfa7d1173ca44e60e9da0602061022083015101527f204220ef3bb60d1b617758293b440a2fd23510ab1ad836b14077d678127ed242610240820151527f291998714fb82bce0860e2ed473ec019d0b0666996cc7689ff2bb5ca6675e63b602061024083015101527f2ffc5cec2fcb693854bbc6b76dc9e182739c518287698ad8fc4e3ddbab17f66a610260820151527f2e3047816681474370f0a73f7b2078c0bed0fd0ae08e013cae949ba5168f42de6020610260830151015290565b611344612abe565b620100008152602d60208201527f0ee9db604936e0b1e77ed5081cb6386d75797088cf2b97e4049841c28f9be6f06040820151527f22a75f79e7a4f15a403c7194653d1ac00bc9758a16ccc90fdc6c5db0ffaaa9ad6020604083015101527f08952948eda2cbde138abd644a34cbd46c1e3cdb8992f9a3446d036f6e3745c36060820151527f10dee4433d114dea7180d068a6ffd0f9896a6610daf22442e8c66d5c69b69adb6020606083015101527f2eed0d2c5dea737bdfed99ccd0d22525c13b16052dc1ecd7a54ed162594c258d6080820151527f242ec9babc61d1959256d7e1f942870450465529d064d09996bf65ee6d7675266020608083015101527f29997ea86edbc6a227b048c46f54dde90acf46c87729b77ef1185351be9c758760a0820151527f1a455be906e3af30d0932628eccb25ac63934759d4cc22da166f6bcf40718728602060a083015101527f2f8e4896af3325c41a0127b1fc73580e81cfd37c790f093dcb61c790fddec94260c0820151527f07955e8e3ad08d1202478bcbf8019864cbf88095b4683518c0204c9f9fcfb349602060c083015101527f2bedcb2cbf50eb062802d6a9528c27d50015c8fb07188d4d5de58779b690b84860e0820151527f0fced1d0f52d3ae1d9c352cb56d5f37d5a6310337a629a69e7415cb723dac3d2602060e083015101527f2184d15f3d8a639220414e70e297ff4b2aeaae29dfbc2e2807d8c4a4755f1d34610100820151527f206867ce15238c6d6d57fdb7b71dfb138f088ef95cfca740a9ee4f35ad801965602061010083015101527f1234f5d9dd9e6fd062b538d3e81a795757a7ed2945ca04e44991534993dadf60610120820151527f02e8b4e01521b2481e6bb1f28d260fe01b96332c6fb725d930f22c2d801301d2602061012083015101527f0f85ca72bcccb58ec088b37767100e478cfc1c84f91193b569ebcfa844ebffca610140820151527f0e8eb0ee40d2ac89cc9bda611eac915eb0f5bcca36caa8e0f56b400d742ca732602061014083015101527f2a72ab666854284c4db7b49917d0c08c0bc94549b34804196632adbf3fcfcd77610160820151527f20ce6f2ef30257e84b7afbd63e996b5facb05233073b3445c1dedf9b4746fb88602061016083015101527f16a84f2bc78f5de42849ba39b01a62d5d46297c4b41a5a0bec2b3193081f303b610180820151527f07876d6ac372c528f50629d14cebe6016c90b1e4b2f1bcabab26ba227cca85d3602061018083015101527f1478dd951d6bfe3868f0cf3a2eb95ed340fe47c0f6d11bb2e9d960854e5524956101a0820151527f099ddde683662eb763546ca9bdf762792cb51c9e3772c117d35ca554d43d15b860206101a083015101527e6ee3b355c1d3f7a3c7c759550f88937f5f882099238e7bdee8b62c1227dfeb6101c0820151527f06094324093967c2811537678ce7ffff947e5f29bd715f2ccff7a911e0e38e4360206101c083015101527f2cb3c484e36265190711c6cddc5030aab4770b6efe5b110f3c04af12d604e4d36101e0820151527f0a6b6897ac3ae3cacb9916a8ac7965f21b1d8c98cf902f40c06e94b1c857b33660206101e083015101527f2d8e97da0a7bcb965970198941a0762947c3cf494bad6fcbab54828c77f5b0c4610200820151527f07962e2e2760e20506058bce20bca54c270b15e97d2132e1c6e6d19b32f09d5c602061020083015101527f256c3b17f2c9d4d96a6cd1c3aa9a2a3d3a2f4d82f737302c7d717ad2a991de70610220820151527f27c19554c1f87fd43b19bf44b5539873234c24c41556a6d44c93e67b49bf7ea3602061022083015101527f061f427c839bb22f0d9f1d6f0b5b6c27058d6c8fe0dd1f78ee0f578a31474d27610240820151527f02b80ab4ee786884d840e634a684dfb605f1b6fe50df1d184c5cf02e28d652f0602061024083015101527f0aa453e221c951b1deeaeb50bcf594ea778cc1516fb3fac9937d78804fe6ebe2610260820151527f0d1210627c2faf65c31d1a32ebd6d61f86a79b14c8c98f0cb3c8112be8bbf5f76020610260830151015290565b611925612abe565b6140008152601660208201527f2960ccbfa831a793352828ed96d1bdd8bb2641a95baf9fb57edb83f2cca50f456040820151527f1aa7d3d401d969fa5991bc2632cdd9662376b73d711da7dac798add1a71af5ba6020604083015101527f20c63270d438c7a1d5f2efa6fc8433880b20b0d5e8a5a8f0007dc717d21f16e06060820151527f225e5d18c26d8fb7f3b40486988726a589f7d287760c5cda3d56b02ee8b885fa6020606083015101527f1c25749f104c4c40bb85df869a45c24db6100a94d15c00272f06c12df488687d6080820151527f1ec81f81dc7db4bcdda5b8df435b0cf41ff63d2a4f07c7acecfe7f76fae18dcf6020608083015101527f18c618ce1b1e3ad035d7095b05552e02d3ae458a8e09ff4566b631e565be2a3260a0820151527f2fd002e84c76c7b0965a8d760b939a359e1e4335208372002ec024387d536258602060a083015101527f02de94c4a1f57b5649a43fa5af3ab5a16515c87115e202d6847550b705abc99560c0820151527f0b287ff4c028444fa5db9da160d292b93fa6bb42fd5d4517b44957b0c1d27acb602060c083015101527f078d7586574326613d2fb3fa445b97a597b714e990ddd239df94fb31a3399b6d60e0820151527f1dc0b27e9a7acd6fd3dadae3aa6e0b399e263e45856d2b24ed0fee99eb5fb401602060e083015101527f2031141beab16ef28e125b9f5dfac68b76653fe6b84517f54680ccf9df6bc78d610100820151527f0218f2e0d088f3484260384fa109ae07933f88dd91914c2ec2420e0dee3f7de5602061010083015101527f08064480d001be521821d062356588eda5f261272033a191e4a2d6d4357f2e91610120820151527f19fd20b1228ef31c7f5894581eda8a6bc76d8b63ce53e8c7b01a4935cb25a775602061012083015101527f18546a166f8d6c476d8a7d67acac1708df0147e8f1414e2cf9c917cac2689ab9610140820151527f06cc6ff643d568ae6ca2ba7ae4d62e534850d1a4def63d81b41d01042666035c602061014083015101527f0b4faccf5dc34066b8c1f8f35854050a7874d0a2818c74fe1adeb59e7ec2c6bf610160820151527f0cf6211dcca044fbe21e36a09ed22a39e0628221cd3b890167a3e15e8213b6ba602061016083015101527f26e43e5e6b83059e5c7de162cbeb6ff59b2a131f3c19cb8e24bfaa29369b37b3610180820151527f303fde21c1632dd69563ef7f34c003ebf7eff104aabdba74e602d07db9a9f996602061018083015101527f0970ed4d40373e01ba957d0ffbdec21cedcf141cbeef56fdd60db26481e6682c6101a0820151527f079509aa4eb8f12b9cebeab63f99b3c675fa24ec587a104a91da2f928d0dd83e60206101a083015101527f281b216a2154f4b3a41ebcf4a1661ecea487ecfeffb10a3af1c95e646cf9067c6101c0820151527f14ff18a5a0a146561af17c7e25e1e7aedca96f63e0e45e6db06e6fda83a017f660206101c083015101527f05ec99c9a5750e772e09b59c2900a27e133c89e37e53dbeb8e25aeaf71ca5d8d6101e0820151527f11eab6996efe30a8d9060d724aca0b8f1039d78f2bb3fa80866678a5c2ff5e7660206101e083015101527f21f55defa3da3d5cb88371ec2e3cf363e946e56ccc6e5d9521817596609250a3610200820151527f2475e54f88b4653c0c2ad0a68d81c9fd036236afde52118e681ae3bf8cad6e23602061020083015101527f1ac0e2768b54bc5994bb1224cc1b418e961b5d78298c4f0a3b8ff84cf60f3309610220820151527f01beea794b532e5f28169b659ca8942272ef94b4173aa265c75e8f58f47b8484602061022083015101527f14b8a58d9a83070b9412f50ffe8303ef7a9635202eba89f81ad07e14db58ed84610240820151527f0b364323368f55e1034dd161810931cbdc0af799e8ec0f730e829e0ebdd423ea602061024083015101527f1e523d197e5d7c2f0c2552e6f07966c391a25410c770ffb2597825e45827d99d610260820151527f0407d96a0a3a4123a33c4f08dcfc5b095dff98909bb5f7408fdd7f9d08468eed6020610260830151015290565b611f06612abe565b6180008152600760208201527f0b50c36923c6944a1fd8b9d260fc6786910299e5cd838b082a5d4b959c5369d86040820151527f2f6929bc105c2e4941e799e34147419a7f1e1e4d7d39bc84772d77203340c5ce6020604083015101527f13765dbb447c8ea8d3c358686bc464642b658c768d7b7d5c52d24090aa3120bc6060820151527f0561337e6621272cf83f4be0bd99d884f88724b1056e75d2231eaf34f3d804ad6020606083015101527f07358c9dccb7c0836af2ba0d84da7e125cb0e22f81ae70e8da68096d2f3066ed6080820151527f07fd263887d67d02c6997ac3385d290fe95a30133ab6c42c47a8354e30d55e056020608083015101527f0669063c49e18373adb984bbe5c4d448001c0ae449b68b03dcd130d6e1a4492360a0820151527f12866290a8990a143b6d6d7e3329183b1c4ad82ee250f57a8e1f615ef67480e8602060a083015101527f19f089ba3858226bac8a3053cc4486250d544430f238ca1542bc27497d9f9c4260c0820151527f1d1c0f1cda207c95080375a6863553ada605e24b80d9357e11e037f7a87ed73d602060c083015101527f07b7e66feeda9acbabe16f98ddd329f47a8860e2aae0addf0a16c66f881c4b9b60e0820151527f15ba6adb189f8d6cd44f9042bfbb7952409c3b2f0672940978440f52b66bd2e6602060e083015101527f1db45b81750780476089df0ef4ee6e1fa97c25b40706be930349c27de04d8980610100820151527f27c17411029c4cbd0e6a2d50bca1ad65466295a2ce33e408958ecaf4f4604ccc602061010083015101527f14d3c7e4a751138c29243664e5053dcd9a9ec44989c247894a8e586e6a6d94c9610120820151527f1f112a8320a2c479f950604f0504fbb37d30a9633e77543c758d7089b406ff92602061012083015101527f0d405e091ca140684368ee442484b1e8b973c621f4cf1ee8adccc9d7febed1ae610140820151527f1189e58196d34f3615ea805405e60b9581018f619000791d69d36a26177e7ffd602061014083015101527f2d2aa260acf145ec8ecd374a1d31515887737b2b95b7325decd82191ae3fe40a610160820151527f2b89b57f056713d19aac051d2b5c08f236835c77b33f890751b6c2cdd570aeec602061016083015101527f0b4f9e7c5cec4c89df8d1aa6ba509d027260a677d417a1e57764efbf98b66ae1610180820151527f2bde8594d8bf90d47542af98857a6a39ad4b13190e190a424ec6b3b0a29b2254602061018083015101527f071fde310bde93132ebc32f5feab394d5996ead1274d1afd18a88a0649dd9cff6101a0820151527f0830200a720e589651bcc1dd20a71e3712866f0636b1b7704e5a5949f768950060206101a083015101527f1fd0b7edc94f5166e68e5e52348eb514fe688626149ad57616aedd7ed1af233d6101c0820151527f1b1b83855b78e077da0d8dc06560314a9e20a8c7d52a76667cb2d44e36c94cff60206101c083015101527e7810407438091255399e5ec6e09b3792600687cf33b75811c285455afcd8ce6101e0820151527f048cf15864a37e55e19e326830010346a2624a4cce2e27e203cf30ab95481ad260206101e083015101527f1099393bb6c289d29cf9ae8d964f85399a0a233655d53ee01b5a54daa97f51a8610200820151527f22da9db142456e54f6c0792a4e0ab59cd7cda9db011349b499993b1eb2019328602061020083015101527f2876d88cba11d74ce75506378ba17971ba6b0ad5c558bb2074efbb2ccf2b227b610220820151527f12522bed77d00f4e9b6cfb7ee67f7aee83e4a234b94d17e81fde44c17c9ca13a602061022083015101527f07ac1f7330524e548ca80d43b5adbc60ef3358dbe26c0a6f34f95e33c6da53f8610240820151527f155bdf24d80bd533d322b67aeac75a62889fb0e0dfbfd1e62b284f7767385438602061024083015101527f068dbe6e8cf3d48579fba32c6f10d5b9b2d392a9f1ec35c2beea28feb596099f610260820151527f1c5312119a55f63257c803b4ce1657007f27129c2caefd028d4ae140643a895e6020610260830151015290565b6124e6612abe565b6180008152600960208201527f1edd7e8380fa133b1caaf53e19bbb36e4f67e6fa317f6c0923ebdd406181c3756040820151527f2347e3ab0314a024f6f41faade3c0a97d3c4573c10a9ba5d5aab5e24a8ee3a2d6020604083015101527f1644e1e336c01d9de5b481f81522fcaef5cef40e319fe07f2bc376e648932d4d6060820151527f22827063aa139c74a19f16936a01b44d555a22a90c3d57fd7b15967bc45403626020606083015101527f0e840efe2c1615d356b2b2f467f7f49f0cc6b75db5dc73b5591124dcfc0b16006080820151527f1540096182590988e27101f66661809800bfee896d5230f59381632c350b89546020608083015101527f2a46e5174dc5d55be95f6f451b089f2b3b792478d411e6313d85505ca516d5d160a0820151527f12dc6ab5a4a2bef6fd1972faa6aa6be0efb94eb8c59e46687149ff9678c5ed81602060a083015101527f29d1539594e7b749f9eb84c7da6b2f9e91d4a976ea856819f95bdf2b4955080760c0820151527f12d706c75de12ebc0fe0bf0a72e84a7cd6a3217eee90331dded2ba12810b91d0602060c083015101527f20587a04ac2c473abdea8a7eb923d2d19e48aaba464f594034c5494df99719bd60e0820151527f1a5ecd9b9d63611e9a4ccedc8eafdef1a85961406b180e43859ce1f3abceee5a602060e083015101527f1c220bd0f159e539302773922e23c0abfa5bdc4667b423a0a08d1d7eb316cf2a610100820151527f0797380c9433b8481a319aada22999d0bee4823c75fbb447d16e0cb9d8e43091602061010083015101527f152695e50f8d7f189c67af3300f448b9140d65ab361f404fe055fe8f74cc994c610120820151527e932a307c4ae6e70d89b73e7edca162fec708fd4f15f19944139d97c6178f71602061012083015101527f2970199168a67327b37350a8b5bae9dbc9a02718dd6f00274945d3f179b54728610140820151527f2973a64d7b98c27f60ec6c96e4fcb63bcd39d247031d04513873bad8c3a061d4602061014083015101527f2ded3bbfc595e96ac35de63c912c713d3c9af7b56a08bda4ddb3a2d581fed18f610160820151527f1de5065a0cd9a3f5f70bfbe4353d9c02ff142e652d129233be149c327f2c9dcd602061016083015101527f1791e6fe9df2f1afd69622868dcb1e65f0ad57cbac90bd57a26647366195ce8b610180820151527f21789ab824cfae26033c42fa151b3f0e0e40ad8f61679731a5a4ca26e3a0cda5602061018083015101527f262378469faedbe48fe5052bc079852e6d951097a728bd85f91463163668a7ce6101a0820151527f18e40a1137e63ff15e99c7d56382d255aea3bebcd0e3693315655f2779b9212460206101a083015101527f29e67f1e1d585638a82e01f00bf8f11e3b6be7b88d9d22ca9f6b6ca4a7470cc96101c0820151527f2602e8811f78f7aa4a9f38b6b1a2930ae66182183cbd84fb014b3a9abdbc0b4760206101c083015101527f202751a50df1526007632280f56285499e2f3af307ef74f4a98c483001909d556101e0820151527f27e9075da78fb1345d429966c80d5418f67aa25eaeb88b924fb40318a8184eb160206101e083015101527f25fd490d4c3a7bf6f5c9ebfdfd92b3e27491db705ef86f50c3cb04f528431804610200820151527f09ed7a29b8555d0f94d6fb108ac8f142488076c24f9d5e239ecc048f05053ecc602061020083015101527f02b37d0d38042045bcf65eab3d9cee1c05d89b2331786f7fc59e60a9907a793b610220820151527f0cf03ac0b56e935b8f0beeb42919771651ea29f49036be6397378f306c9450f4602061022083015101527f233ef9f6cdb1b60f174a71d16995cdf2223b3657a127b73671cfae10ab917ee5610240820151527f1ecdbf35c77e6a976548cf263c7f6f2fe1d290e0628fc8f4d029d46818b9551f602061024083015101527f18e17e60f5b3cbf99034e926d3b01a7834433239040f172d435e7ba1a63654a6610260820151527f2f9e8a016bd92a9e13329c9de40d1a26317d3f7517f3cecfa325f8c2eeb5316c6020610260830151015290565b6040518061028001604052806000815260200160008152602001612af5604051806040016040528060008152602001600081525090565b8152602001612b17604051806040016040528060008152602001600081525090565b8152602001612b39604051806040016040528060008152602001600081525090565b8152602001612b5b604051806040016040528060008152602001600081525090565b8152602001612b7d604051806040016040528060008152602001600081525090565b8152602001612b9f604051806040016040528060008152602001600081525090565b8152602001612bc1604051806040016040528060008152602001600081525090565b8152602001612be3604051806040016040528060008152602001600081525090565b8152602001612c05604051806040016040528060008152602001600081525090565b8152602001612c27604051806040016040528060008152602001600081525090565b8152602001612c49604051806040016040528060008152602001600081525090565b8152602001612c6b604051806040016040528060008152602001600081525090565b8152602001612c8d604051806040016040528060008152602001600081525090565b8152602001612caf604051806040016040528060008152602001600081525090565b8152602001612cd1604051806040016040528060008152602001600081525090565b8152602001612cf3604051806040016040528060008152602001600081525090565b8152602001612d15604051806040016040528060008152602001600081525090565b8152602001612d37604051806040016040528060008152602001600081525090565b905290565b803560ff8116811461019757600080fd5b60008060008060808587031215612d6357600080fd5b612d6c85612d3c565b9350612d7a60208601612d3c565b9250612d8860408601612d3c565b9150612d9660608601612d3c565b905092959194509250565b600060208284031215612db357600080fd5b5035919050565b60006104c08201905082518252602083015160208301526040830151612ded604084018280518252602090810151910152565b50606083015180516080840152602081015160a0840152506080830151805160c0840152602081015160e08401525060a0830151610100612e3a8185018380518252602090810151910152565b60c08501519150610140612e5a8186018480518252602090810151910152565b60e08601519250610180612e7a8187018580518252602090810151910152565b9186015192506101c091612e9a8684018580518252602090810151910152565b6101208701519350610200612ebb8188018680518252602090810151910152565b91870151935061024091612edb8784018680518252602090810151910152565b61016088015180516102808901526020908101516102a08901529188015180516102c08901528201516102e08801526101a088015180516103008901528201516103208801529287015180516103408801528101516103608701526101e087015180516103808801528101516103a08701529186015180516103c08701528201516103e0860152610220860151805161040087015282015161042086015285015180516104408601529081015161046085015290505061026092909201518051610480830152602001516104a0909101529056fea264697066735822122001744a823532336746c68b1ac624f1978215eddb05a58dd61de7d93eefd43c6a64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}