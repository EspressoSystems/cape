
@startuml

class JellyFish {
  +generate_transfer_transaction(
      UserSecretKey usk,
      UserPublicKey upk,
      AssetType at,
      Nullifier null,
      AssetRecord output)
      :(Transaction, AssetRecord)
  ..
  +generate_burn_transaction(
      UserSecretKey usk,
      AssetType at,
      Nullifier null,
      Address recipient):
      (Transaction)
}

class Relayer {
    mt: MerkleTree,
    wallet: UserKeyPair

}


package "Cape Contract Package" #DDDDDD {

    class RecordsMerkleTree {
        + fn batch_insert_with_frontier(&mut self, \n current_frontier: MerkleFrontier, \n rcs: &[RecordCommitment]) -> MerkleCommitment
    }

    class CapeContract {
        nullifiers: HashSet<Nullifier>
        mt_frontier: MerkleFrontier
        blocks: Vec<CapeBlock, MerkleCommitment>

        + submit_cape_block(&mut self, \n new_block: CapeBlock)
    }

    class Wrapper {
        wrapped_erc20_registrar: HashMap<AssetDefinition, Address>
        pending_deposit_queue: Vec<RecordCommitment>
        +is_cape_asset_registered(&self, \n asset_def: &AssetDefinition) -> bool
        +sponsor_cape_asset(&mut self, \n erc20_addr: Address, \n new_asset: AssetDefinition)
        +deposit_erc20(&mut self, \n ro: RecordOpening, \n erc20_addr: Address, \n depositor: Address)
    }

}

class IERC20 {
  +transfer_from(&mut self, \n sender: Address, \n recipient: Address, amount: U256) -> bool
  +transfer(&mut self, \n recipient: Address, \n amount: U256)
  +approve(&mut self, \n spender: Address, \n amount: U256) -> bool
  +balance_of(&self, \n account: Address) -> U256
}

class USDC {
  +freeze(Address address, Boolean flag)
}

Wrapper <|-- "CapeContract"
RecordsMerkleTree <|-- "CapeContract"
IERC20 <|-- USDC
Relayer ..> JellyFish
@enduml
