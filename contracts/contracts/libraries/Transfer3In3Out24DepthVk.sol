// SPDX-License-Identifier: GPL-3.0-or-later
//
// Copyright (c) 2022 Espresso Systems (espressosys.com)
// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.
//
// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.

// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.
pragma solidity ^0.8.0;

import "../interfaces/IPlonkVerifier.sol";
import "./BN254.sol";

library Transfer3In3Out24DepthVk {
    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {
        assembly {
            // domain size
            mstore(vk, 65536)
            // num of public inputs
            mstore(add(vk, 0x20), 45)

            // sigma0
            mstore(
                mload(add(vk, 0x40)),
                4365063295695407734098092030422194500114525611167655712627428056122142624186
            )
            mstore(
                add(mload(add(vk, 0x40)), 0x20),
                17648899575367849282959371655985071360622117637978776025425654278544743232784
            )
            // sigma1
            mstore(
                mload(add(vk, 0x60)),
                19229298609171917704550205620146530538707290618595618489788704706509380399060
            )
            mstore(
                add(mload(add(vk, 0x60)), 0x20),
                9366445583530691032468963373901151888347106707049340538424220034268172067995
            )
            // sigma2
            mstore(
                mload(add(vk, 0x80)),
                4657881142293773268925215122026170996503718631275522633538536696942206422443
            )
            mstore(
                add(mload(add(vk, 0x80)), 0x20),
                6682064919249131520849949572425793571697722350717545476168686716822772490278
            )
            // sigma3
            mstore(
                mload(add(vk, 0xa0)),
                18672820694823249187431116973704939155134861224915761299789761357243514977708
            )
            mstore(
                add(mload(add(vk, 0xa0)), 0x20),
                21685239528958246637279486174944387953249787084849249068161520129421205287065
            )
            // sigma4
            mstore(
                mload(add(vk, 0xc0)),
                11341667205871784812543471825434136479633117415070795148705128339969197887541
            )
            mstore(
                add(mload(add(vk, 0xc0)), 0x20),
                15914333025955602094633613668908344640062725031699137975756421265633259385119
            )

            // q1
            mstore(
                mload(add(vk, 0xe0)),
                6217748500529110923723880720310662616545440070112879802844803178277212190354
            )
            mstore(
                add(mload(add(vk, 0xe0)), 0x20),
                10456825602788791773928372041085941408190805183139185821777174882414263525097
            )
            // q2
            mstore(
                mload(add(vk, 0x100)),
                20229020333725094514317498336308921999205325122506829745088118255890085128095
            )
            mstore(
                add(mload(add(vk, 0x100)), 0x20),
                16866163950674648834295937044468378870403011911506353324708569445400662446622
            )
            // q3
            mstore(
                mload(add(vk, 0x120)),
                18795601163695220617358154365381152447313136105761716708302907216298615448704
            )
            mstore(
                add(mload(add(vk, 0x120)), 0x20),
                6852811743611751882097071688070552310940375443917510015370020198665338389827
            )
            // q4
            mstore(
                mload(add(vk, 0x140)),
                13671421488538996653981308286125651556069027465299957903168383679098084203442
            )
            mstore(
                add(mload(add(vk, 0x140)), 0x20),
                7416601870894748125122062130631801585960088293201659706702166788591557232968
            )

            // qM12
            mstore(
                mload(add(vk, 0x160)),
                21848197558598980451348938457179007073533701533957450403395774417522613850559
            )
            mstore(
                add(mload(add(vk, 0x160)), 0x20),
                18571426462251429623833169591386575850936507512981527719956550357876213965771
            )
            // qM34
            mstore(
                mload(add(vk, 0x180)),
                683650719279666925943055769128990412221090128919761224799888863076615471158
            )
            mstore(
                add(mload(add(vk, 0x180)), 0x20),
                19295068171919901573355904366209032412612424923020230398834670382428761755820
            )

            // qO
            mstore(
                mload(add(vk, 0x1a0)),
                17206099042702024892546588224370406113352957045506365234908726904388904531216
            )
            mstore(
                add(mload(add(vk, 0x1a0)), 0x20),
                21137376217635218733549469002560707314639004662649542202844777909282739934131
            )
            // qC
            mstore(
                mload(add(vk, 0x1c0)),
                19876962364936657034833267517323318250474404347233679738350861889172344754878
            )
            mstore(
                add(mload(add(vk, 0x1c0)), 0x20),
                6089161339424509328036663631446177356962059257969269757764756736867284119828
            )
            // qH1
            mstore(
                mload(add(vk, 0x1e0)),
                20958494418957819078656169106411703182085163218975412379374468535801221813327
            )
            mstore(
                add(mload(add(vk, 0x1e0)), 0x20),
                3951957506265407870126870922882564995532654850740988902891983636747191019810
            )
            // qH2
            mstore(
                mload(add(vk, 0x200)),
                16320285111865654234449376730998247241342127349928808974935031019342501254057
            )
            mstore(
                add(mload(add(vk, 0x200)), 0x20),
                14874555578721464417343739911569808447474666223156347995317763717813002146017
            )
            // qH3
            mstore(
                mload(add(vk, 0x220)),
                18176388456143442007472157282981764667241520616918635928020843426794677343596
            )
            mstore(
                add(mload(add(vk, 0x220)), 0x20),
                1081401046854708411553456295637462494849157808317376419654962186841123857440
            )
            // qH4
            mstore(
                mload(add(vk, 0x240)),
                17156572657054164232568955467408974279596065576073128303198739599136348030545
            )
            mstore(
                add(mload(add(vk, 0x240)), 0x20),
                16500270368608963934246289041458524725891371523572271995147251592180077164060
            )
            // qEcc
            mstore(
                mload(add(vk, 0x260)),
                1257880406728789752808045909185010357023491262109773842201170093442428632989
            )
            mstore(
                add(mload(add(vk, 0x260)), 0x20),
                822115134156021745628675830966348834317564191964874388453303761747021353584
            )
        }
    }
}
