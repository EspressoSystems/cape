# API and messages
#
# TOML specification: https://github.com/kezhuw/toml-spec

[meta]
FORMAT_VERSION = "0.1.0"

# Logo is 1093x230

HTML_TOP = """
<!DOCTYPE html>
<html lang='en'>
  <head>
    <meta charset='utf-8'>
    <title>Espresso Systems CAPE Web Help</title>
    <link rel='stylesheet' href='public/css/style.css'>
    <script src='public/js/script.js'></script>
  </head>
  <body>
    <div><img src='public/media/Horizontal02.png'
              alt='Espresso Systems Logo'
              height='115'/></div>
    <h1>Espresso Systems CAPE Web Interface</h1>
    <p>The Espresso Systems CAPE Web Inteface provides a way to create and interact with a local wallet that can be used to build, submit, and track transactions, as well as creating and managing new types of assets.</p>
"""

HTML_BOTTOM = """
  </body>
</html>
"""

HEADING_ROUTES = "Routes"
HEADING_PARAMETERS = "Parameters"
HEADING_DESCRIPTION = "Description"

[route.getmnemonic]
PATH = ["getmnemonic"]
DOC = "Generate a random mnemonic phrase."

[route.newwallet]
PATH = ["newwallet/:mnemonic/:password", "newwallet/:mnemonic/:password/path/:path", "newwallet/:mnemonic/:password/name/:name"]
":password" = "Literal"
":path" = "Base64"
":name" = "Literal"
":mnemonic" = "Literal"
DOC = """
Creates and opens a new the wallet with the given mnemonic and password.

If `:path` is given, the wallet will be stored in the given location. If `:name` is given, the walllet will be stored in
`~/.espresso/cape/wallet/keystores/:name`. If neither `:path` nor `:name` is given, the wallet will be stored in
`~/.espresso/cape/wallet/keystores/default`.
"""

[route.openwallet]
PATH = ["openwallet/:password", "openwallet/:password/path/:path", "openwallet/:password/name/:name"]
":password" = "Literal"
":path" = "Base64"
DOC = """
Open the wallet from local storage with the given password and path.

`:path` and `:name` work as they do for `newwallet`.
"""

[route.resetpassword]
PATH = ["resetpassword/:mnemonic/:password", "resetpassword/:mnemonic/:password/path/:path", "resetpassword/:mnemonic/:password/name/:name"]
":password" = "Literal"
":path" = "Base64"
":name" = "Literal"
":mnemonic" = "Literal"
DOC = """
Reset the password of the given wallet, and open it.

The wallet to open is specified by `:path` or `:name` as in `newwallet`. `:mnemonic` must be the recover phrase used to create the wallet. If
`:mnemonic` is correct, the wallet's password will be changed to `:password` and the wallet will be opened.
"""

[route.closewallet]
PATH = ["closewallet"]
DOC = """
Close the current wallet.
"""

[route.listkeystores]
PATH = ["listkeystores"]
DOC = """
Return a list of all named keystores.

Named keystores are those created with `newwallet/:mnemonic/:password/name/:name`.
"""

[route.getaddress]
PATH = ["getaddress"]
DOC = """
Get the addresses for the current wallet.
"""

[route.lastusedkeystore]
PATH = ["lastusedkeystore"]
DOC = """
Get the last used wallet's path.
"""

[route.getbalance]
PATH = ["getbalance/all", "getbalance/address/:address", "getbalance/address/:address/asset/:asset"]
":address" = "TaggedBase64"
":asset" = "TaggedBase64"
DOC = """
Get all balances for the current wallet, all the balances for a given address, or the balance for a given address and asset type.
"""

[route.getrecords]
PATH = ["getrecords"]
DOC = """
Get all records related to the current wallet.
"""

[route.getinfo]
PATH = ["getinfo", "getinfo/address", "getinfo/key", "getinfo/asset", "getinfo/asset/:asset", "getinfo/freezing_key", "getinfo/sending_key", "getinfo/viewing_key"]
DOC = """
Get the addresses, public keys, and asset types for the current wallet.
"""

[route.getaccount]
PATH = ["getaccount/:address"]
":address" = "TaggedBase64"
DOC = """
Get information about an account.

`:address` can be an account address, or a viewing, freezing, or sending public key. In any case, the result contains at least the following fields:
* `"records"` - a list of records related to this account. For addresses and sending public keys, it is a list of owned records. For viewing keys
  it is a list of viewable records, and for freezing keys, a list of freezable records.
* `"assets"` - assets related to this account, indexed by code. Each asset is an `AssetInfo` structure, as returned by `getinfo/asset`. For addresses
  and sending public keys, this is just the collection of assets currently owned by the account. For viewing and freezing keys, it also includes all
  assets known to the wallet which are viewable or freezable using that key. It is still guaranteed to contain the asset type of every record in `"records"`.

Each record contains the following fields:
* `"asset"` - an asset code, which can be used as an index into `:assets`
* `"address"` - owner of the record, in `TaggedBase64`
* `"amount"` - record amount as an integer
* `"uid"` - integer unique to this record
"""

[route.newkey]
PATH = ["newkey/sending", "newkey/viewing", "newkey/freezing"]
DOC = """
Generate and return a key of the given type.
"""

[route.importkey]
PATH = ["importkey/freezing/:freezing", "importkey/sending/:sending", "importkey/sending/:sending/:index", "importkey/viewing/:viewing" ]
":freezing" = "TaggedBase64"
":sending" = "TaggedBase64"
":index" = "Integer"
":viewing" = "TaggedBase64"
DOC = """
Import the given key into the current wallet. For sending keys, the optional scan index give a block index at which to begin scanning. If omitted, the entire ledger is scanned for transactions using the key.
"""

[route.recoverkey]
PATH = ["recoverkey/sending", "recoverkey/sending/:scan_from", "recoverkey/viewing", "recoverkey/freezing"]
":scan_from" = "Integer"
DOC = """
Regenerate an old key in a recovered wallet.

Since key generation is deterministic, recovering keys amounts to creating a new wallet with the
same mnemonic as the wallet being recovered, and then creating new keys, as if by `newkey`. The `n`th
key of each type in the recovered wallet will be the same as the `n`th key of that type in the
original wallet.

The only difference between `recoverkey` and `newkey` is that when recovering a sending key, the
wallet will initiate a scan of the ledger for existing records belonging to the recovered key. The
optional `scan_from` parameter can be used to control how far back in time the scan starts. It is
index into the event stream provided by the EQS. If not specified, the scan will start from event 0;
that is, the entire ledger will be scanned.
"""

[route.send]
PATH = [
  "send/sender/:sender/asset/:asset/recipient/:recipient/amount/:amount/fee/:fee",
  "send/asset/:asset/recipient/:recipient/amount/:amount/fee/:fee"
]
":sender" = "TaggedBase64"
":asset" = "TaggedBase64"
":recipient" = "TaggedBase64"
":amount" = "Integer"
":fee" = "Integer"
DOC = """
Transfer amount units of the given asset to the recipient from the sender, or any addresses owned by
the current wallet if a sender isn't given. Returns a serialized receipt which can be used to track
the transaction through the validation process.
"""

[route.wrap]
PATH = ["wrap/destination/:destination/ethaddress/:eth_address/asset/:asset/amount/:amount"]
":destination" = "TaggedBase64"
":eth_address" = "TaggedBase64"
":asset" = "TaggedBase64"
":amount" = "Integer"
DOC = """
Wrap amount units of the given asset from the Ethereum address to the destination.
"""

[route.unwrap]
PATH = ["unwrap/source/:source/ethaddress/:eth_address/asset/:asset/amount/:amount/fee/:fee"]
":source" = "TaggedBase64"
":eth_address" = "TaggedBase64"
":asset" = "TaggedBase64"
":amount" = "Integer"
":fee" = "Integer"
DOC = """
Unwrap amount units of the given asset from the source to the Ethereum address. Returns a serialized receipt which can be used to track the transaction through the validation process.
"""

[route.newasset]
PATH = [
  # `symbol` may be added as a parameter in the future but it's not used for now.
  # Only if `viewing_key` is given, can `view_amount`, `view_address` and `viewing_threshold` be specified.

  # Paths for asset sponsor.
  "newasset/erc20/:erc20/sponsor/:sponsor/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/erc20/:erc20/sponsor/:sponsor/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address",
  "newasset/erc20/:erc20/sponsor/:sponsor/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount/viewing_threshold/:viewing_threshold",
  "newasset/erc20/:erc20/sponsor/:sponsor/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount",
  "newasset/erc20/:erc20/sponsor/:sponsor/freezing_key/:freezing_key/viewing_key/:viewing_key/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/erc20/:erc20/sponsor/:sponsor/freezing_key/:freezing_key/viewing_key/:viewing_key/view_address/:view_address",
  "newasset/erc20/:erc20/sponsor/:sponsor/freezing_key/:freezing_key/viewing_key/:viewing_key/viewing_threshold/:viewing_threshold",
  "newasset/erc20/:erc20/sponsor/:sponsor/freezing_key/:freezing_key/viewing_key/:viewing_key",
  "newasset/erc20/:erc20/sponsor/:sponsor/freezing_key/:freezing_key",
  "newasset/erc20/:erc20/sponsor/:sponsor/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/erc20/:erc20/sponsor/:sponsor/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address",
  "newasset/erc20/:erc20/sponsor/:sponsor/viewing_key/:viewing_key/view_amount/:view_amount/viewing_threshold/:viewing_threshold",
  "newasset/erc20/:erc20/sponsor/:sponsor/viewing_key/:viewing_key/view_amount/:view_amount",
  "newasset/erc20/:erc20/sponsor/:sponsor/viewing_key/:viewing_key/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/erc20/:erc20/sponsor/:sponsor/viewing_key/:viewing_key/view_address/:view_address",
  "newasset/erc20/:erc20/sponsor/:sponsor/viewing_key/:viewing_key/viewing_threshold/:viewing_threshold",
  "newasset/erc20/:erc20/sponsor/:sponsor/viewing_key/:viewing_key",
  "newasset/erc20/:erc20/sponsor/:sponsor",

  # Paths for asset definition with a given description.
  "newasset/description/:description/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/description/:description/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address",
  "newasset/description/:description/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount/viewing_threshold/:viewing_threshold",
  "newasset/description/:description/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount",
  "newasset/description/:description/freezing_key/:freezing_key/viewing_key/:viewing_key/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/description/:description/freezing_key/:freezing_key/viewing_key/:viewing_key/view_address/:view_address",
  "newasset/description/:description/freezing_key/:freezing_key/viewing_key/:viewing_key/viewing_threshold/:viewing_threshold",
  "newasset/description/:description/freezing_key/:freezing_key/viewing_key/:viewing_key",
  "newasset/description/:description/freezing_key/:freezing_key",
  "newasset/description/:description/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/description/:description/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address",
  "newasset/description/:description/viewing_key/:viewing_key/view_amount/:view_amount/viewing_threshold/:viewing_threshold",
  "newasset/description/:description/viewing_key/:viewing_key/view_amount/:view_amount",
  "newasset/description/:description/viewing_key/:viewing_key/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/description/:description/viewing_key/:viewing_key/view_address/:view_address",
  "newasset/description/:description/viewing_key/:viewing_key/viewing_threshold/:viewing_threshold",
  "newasset/description/:description/viewing_key/:viewing_key",
  "newasset/description/:description",

  # Paths for asset definition without a given description.
  "newasset/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address",
  "newasset/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount/viewing_threshold/:viewing_threshold",
  "newasset/freezing_key/:freezing_key/viewing_key/:viewing_key/view_amount/:view_amount",
  "newasset/freezing_key/:freezing_key/viewing_key/:viewing_key/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/freezing_key/:freezing_key/viewing_key/:viewing_key/view_address/:view_address",
  "newasset/freezing_key/:freezing_key/viewing_key/:viewing_key/viewing_threshold/:viewing_threshold",
  "newasset/freezing_key/:freezing_key/viewing_key/:viewing_key",
  "newasset/freezing_key/:freezing_key",
  "newasset/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/viewing_key/:viewing_key/view_amount/:view_amount/view_address/:view_address",
  "newasset/viewing_key/:viewing_key/view_amount/:view_amount/viewing_threshold/:viewing_threshold",
  "newasset/viewing_key/:viewing_key/view_amount/:view_amount",
  "newasset/viewing_key/:viewing_key/view_address/:view_address/viewing_threshold/:viewing_threshold",
  "newasset/viewing_key/:viewing_key/view_address/:view_address",
  "newasset/viewing_key/:viewing_key/viewing_threshold/:viewing_threshold",
  "newasset/viewing_key/:viewing_key",
  "newasset",
]
":erc20" = "TaggedBase64"
":description" = "Base64"
":sponsor" = "TaggedBase64"
":freezing_key" = "TaggedBase64"
":viewing_key" = "TaggedBase64"
":view_amount" = "Boolean"
":view_address" = "Boolean"
":viewing_threshold" = "Integer"
DOC = """
Sponsor or define an asset, depending on if an ERC20 code is given. Reports the asset definition.
"""

[route.mint]
PATH = ["mint/asset/:asset/amount/:amount/fee/:fee/minter/:minter/recipient/:recipient"]
":asset" = "TaggedBase64"
":amount" = "Integer"
":fee" = "Integer"
":minter" = "TaggedBase64"
":recipient" = "TaggedBase64"
DOC = """
Mint amount units of a given asset code controlled by the current wallet to the recipient. Returns a serialized receipt which can be used to track the transaction through the validation process.
"""

[route.freeze]
PATH = ["freeze/:address/:asset/fee/:fee_address/:fee_amount"]
":address" = "TaggedBase64"
":asset" = "TaggedBase64"
":fee_address" = "TaggedBase64"
":fee_amount" = "Integer"
DOC = """
Freeze the asset associated with the given address and asset type. Assumes the asset was defined with a freezing key. 
"""

[route.unfreeze]
PATH = ["unfreeze/:address/:asset/fee/:fee_address/:fee_amount"]
":address" = "TaggedBase64"
":asset" = "TaggedBase64"
":fee_address" = "TaggedBase64"
":fee_amount" = "Integer"
DOC = """
Unfreeze the asset associated with the given address and asset type. Assumes the asset was defined with a freezing key. 
"""

[route.view]
PATH = ["view/:asset", "view/key/:key"]
":asset" = "TaggedBase64"
":key" = "TaggedBase64"
DOC = """
View the given asset or view the asset associated with the given viewing key.
"""

[route.transaction]
PATH = ["transaction/list", "transaction/list/:from/:count", "transaction/status/:receipt", "transaction/await/:reciept"]
":from" = "TaggedBase64"
":reciept" = "TaggedBase64"
":count" = "Integer"
DOC = """
List transactions, poll the status of a given transaction, or await events for a given transaction.
"""