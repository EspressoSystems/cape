#!/usr/bin/env python
import argparse

from hdwallet import BIP44HDWallet as HDWallet
from hdwallet.derivations import BIP44Derivation as Derivation
from hdwallet.utils import generate_mnemonic
from hdwallet.cryptocurrencies import EthereumMainnet

parser = argparse.ArgumentParser(
    description="Generate mnemonic and derive address and/or private key."
)
parser.add_argument(
    "--mnemonic", "-m", help="Pass a mnemonic. If none is passed it will be generated."
)
parser.add_argument(
    "--num-keys",
    "-n",
    default=1,
    type=int,
    help="Number of keys to derive",
)
parser.add_argument(
    "--property",
    "-p",
    default="address",
    choices=["private_key", "address"],
    help="Property of the derived wallet to output to terminal",
)
args = parser.parse_args()

words = args.mnemonic or generate_mnemonic(strength=128)

hdwallet = HDWallet(cryptocurrency=EthereumMainnet).from_mnemonic(words)
# Clean default BIP44 derivation indexes/paths
hdwallet.clean_derivation()

for address_index in range(args.num_keys):
    derivation = Derivation(
        cryptocurrency=EthereumMainnet, account=0, change=False, address=address_index
    )
    hdwallet.from_path(path=derivation)
    print(f"{words},{getattr(hdwallet, args.property)()}")
    hdwallet.clean_derivation()
