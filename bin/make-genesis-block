#!/usr/bin/env python
# Copyright (c) 2022 Espresso Systems (espressosys.com)
# This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.

import argparse
import json

from typing import List


def make_genesis_block(gas_limit: int, addresses: List[str], period: int) -> dict:
    coinbase = addresses[0].replace("0x", "")
    return {
        "config": {
            "chainId": 1337,
            "homesteadBlock": 0,
            "eip150Block": 0,
            "eip155Block": 0,
            "eip158Block": 0,
            "byzantiumBlock": 0,
            "constantinopleBlock": 0,
            "petersburgBlock": 0,
            "istanbulBlock": 0,
            "berlinBlock": 0,
            "londonBlock": 0,
            # clique is required for instant mining
            "clique": {"period": period, "epoch": 30000},
        },
        "alloc": {
            address: {
                "balance": "0x200000000000000000000000000000000000000000000000000000000000000"
            }
            for address in addresses
        },
        "coinbase": "0x0000000000000000000000000000000000000000",
        "difficulty": "0x1",
        # Custom extradata is required to start geth if `clique` is used in config
        "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000"
        + coinbase
        + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "gasLimit": hex(gas_limit),
        "nonce": "0x0000000000000042",
        "mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "timestamp": "0x00",
    }


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="Generate a genesis block and print it to stdout"
    )
    parser.add_argument(
        "--gas-limit",
        default=30_000_000,
    )
    parser.add_argument(
        "--addresses",
        type=lambda s: [item for item in s.strip().split(",") if item],
        required=True,
        help="Comma separated list of addresses to fund 0xa...,0xb...",
    )
    parser.add_argument(
        "--period",
        type=int,
        default=0,
        help="Block time in seconds, 0 implies instant mining",
    )
    args = parser.parse_args()
    genesis = make_genesis_block(args.gas_limit, args.addresses, args.period)
    print(json.dumps(genesis, indent=4))
