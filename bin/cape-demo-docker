#!/usr/bin/env bash
set -euo pipefail

function remove-directory () {
    if [ -n "$1" ] && [ -d "$1" ]; then
        echo "Removing dir $1"
        # Diretories were mounted into docker and files may be owned by root.
        # Mount to /mnt inside docker and remove all regular and hidden files.
        docker run --volume "$1":/mnt -it bash -c "rm -rf /mnt/{*,.[^.],.??*}"
        rmdir $1
    fi
}

RED='\033[0;31m'
GETH_PORT=8545

if nc -z localhost $GETH_PORT 2>&1; then
    echo -e "${RED}GETH_PORT $GETH_PORT already in use! Aborting"
    exit 1
fi


#
# CAPE configuration
#
export CAPE_ADDRESS_BOOK_PORT=50000
export CAPE_ADDRESS_BOOK_STORE_PATH=$(mktemp -d -t cape-address-book-store-XXXXXXX)

export CAPE_EQS_PORT=50010
export CAPE_EQS_STORE_PATH="$(mktemp -d -t cape-eqs-store-path-XXXXXXX)"

export CAPE_RELAYER_PORT=50020
export CAPE_RELAYER_WALLET_MNEMONIC="$TEST_MNEMONIC"

export CAPE_FAUCET_PORT=50030
export CAPE_FAUCET_WALLET_MNEMONIC="$TEST_MNEMONIC"
export CAPE_FAUCET_WALLET_PATH="$(mktemp -d -t cape-faucet-wallet-XXXXXXX)"

export CAPE_WALLET_PORT=50040

# Create a faucet manager wallet and export variables printed to stdout
export CAPE_FAUCET_MANAGER_MNEMONIC="$TEST_MNEMONIC"
set -a; source <(cargo run --release --bin faucet-wallet-test-setup); set +a;

# Clean up temporary directories when script exits.
trap "exit" INT TERM
trap cleanup EXIT
cleanup(){
    remove-directory "$CAPE_FAUCET_WALLET_PATH"
    remove-directory "$CAPE_EQS_STORE_PATH"
    remove-directory "$CAPE_ADDRESS_BOOK_STORE_PATH"
    remove-directory "$GETH_DATA_DIR"
}

#
# Set up a geth chain and deploy the contracts. Then shut it down.
#
GETH_DATA_DIR="$(mktemp -d -t "cap-ethereum-data-XXXXXXXX")"
echo "Using keystore dir $GETH_DATA_DIR"
mkdir -p "$GETH_DATA_DIR"

NUM_KEYS=2
ADDRESS_LIST=$(hdwallet-derive --mnemonic "$TEST_MNEMONIC" --num-keys $NUM_KEYS --property address | tr '\n' ',')
make-genesis-block --addresses $ADDRESS_LIST > $GETH_DATA_DIR/genesis.json

# Import private keys generated by hdwallet-derive script into geth
while IFS= read -r LINE || [[ -n "$LINE" ]]; do
    echo "Importing private key $LINE"
    geth --verbosity 0 --datadir "$GETH_DATA_DIR" \
        account import --password <(echo "") <(echo $LINE)
done < <(hdwallet-derive --mnemonic "$TEST_MNEMONIC" --num-keys $NUM_KEYS --property private_key)

echo "Initializing geth with genesis file"
geth --dev init --datadir $GETH_DATA_DIR $GETH_DATA_DIR/genesis.json

# docker compose will issue lots of warnings if some variables are not set, even
# if these aren't needed to start this particular service.
echo "Starting geth node ..."
geth --http --dev --verbosity 1 \
     --mine --maxpeers 0 --nodiscover \
     --miner.gaslimit 25000000 \
     --allow-insecure-unlock \
     --password <(echo "") \
     --datadir $GETH_DATA_DIR --unlock $ADDRESS_LIST &
geth_pid=$!

# Deploy contracts (this requires the address/key exported with the
# faucet-wallet-test-setup binary)
hardhat deploy --reset

# Stop the geth node
echo "Sending TERM signal to geth: PID $geth_pid"
kill -TERM $geth_pid

# Configure contract addresses
export CAPE_TOKEN_ADDRESS="$(cat contracts/deployments/localhost/SimpleToken.json | jq -r .address)"
export CAPE_CONTRACT_ADDRESS="$(cat contracts/deployments/localhost//CAPE.json | jq -r .address)"

#
# Export configuration
#

# Export the configuration *not* handled by docker compose for the docker compose demo.
mkdir -p demo
COMPOSE_ENV_FILE=demo/compose.env

# Use a temp file to make sure the final file is complete once it exists.
TMP_FILE="$(mktemp -t cape-tmp-env-XXXXXXX)"
set | grep "CAPE_CONTRACT_ADDRESS.*=" | sort >> "$TMP_FILE"
set | grep "CAPE_.*_PATH=" | sort >> "$TMP_FILE"
set | grep "CAPE_.*_MNEMONIC=" | sort | tee >> "$TMP_FILE"
# TODO it would be better to let docker compose handle the ports
set | grep "CAPE_.*_PORT=" | sort | tee >> "$TMP_FILE"
echo ADDRESS_LIST=$ADDRESS_LIST >> "$TMP_FILE"
echo GETH_DATA_DIR=$GETH_DATA_DIR >> "$TMP_FILE"
mv "$TMP_FILE" "$COMPOSE_ENV_FILE"

echo
echo "docker-compose demo config saved to $COMPOSE_ENV_FILE"
echo "CAPE demo geth setup completed!"
echo

#
# Start the docker containers
#

# If we are *not* using local docker images, make sure we pull the latest images.
if [ -z "${CAPE_SERVICES_IMAGE:-}" ] && [ -z "${CAPE_WALLET_IMAGE:-}" ]; then
    docker compose --env-file demo/compose.env pull
fi
docker compose --env-file demo/compose.env up

wait
