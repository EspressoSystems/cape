// SPDX-License-Identifier: GPL-3.0-or-later
//
// Copyright (c) 2022 Espresso Systems (espressosys.com)
// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.
//
// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.

// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.
pragma solidity ^0.8.0;

import "../interfaces/IPlonkVerifier.sol";
import "./BN254.sol";

library Transfer2In2Out24DepthVk {
    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {
        assembly {
            // domain size
            mstore(vk, 32768)
            // num of public inputs
            mstore(add(vk, 0x20), 27)

            // sigma0
            mstore(
                mload(add(vk, 0x40)),
                2353344940323935826134936223947938042521909475033774928828281661731550798722
            )
            mstore(
                add(mload(add(vk, 0x40)), 0x20),
                9746655158250922067275109215926891774244956160343543537816404835253168644024
            )
            // sigma1
            mstore(
                mload(add(vk, 0x60)),
                15455409296542685326830249024223724266624290984578410657713086954481835262616
            )
            mstore(
                add(mload(add(vk, 0x60)), 0x20),
                18311379816054123251097409624258299432408683566103718315014121691958807960547
            )
            // sigma2
            mstore(
                mload(add(vk, 0x80)),
                3595102568308999621710931895728700858137670894580826466196432246884451756647
            )
            mstore(
                add(mload(add(vk, 0x80)), 0x20),
                5971868016111020985417776938700261612639243638290968867440360355753182506016
            )
            // sigma3
            mstore(
                mload(add(vk, 0xa0)),
                12443289603239702012200478229424802817855243081906319312702825218898138895946
            )
            mstore(
                add(mload(add(vk, 0xa0)), 0x20),
                14108881420049829870828878537593066975275378607590487898362908473190089969939
            )
            // sigma4
            mstore(
                mload(add(vk, 0xc0)),
                19679657199741651524390089978450662678686454680964744364368691879627016432652
            )
            mstore(
                add(mload(add(vk, 0xc0)), 0x20),
                17114067594856558864780849616452660298251042000563020846487894545389438664806
            )

            // q1
            mstore(
                mload(add(vk, 0xe0)),
                4521205613646422234630873762189179209607994647697100090154823061235920789353
            )
            mstore(
                add(mload(add(vk, 0xe0)), 0x20),
                16106449496625400183304424755719536524421029289605758534728292280016648447637
            )
            // q2
            mstore(
                mload(add(vk, 0x100)),
                15558337488326969806891656016031810341177100586194811207644366322955582958290
            )
            mstore(
                add(mload(add(vk, 0x100)), 0x20),
                154404024660163916069895563430486111291743096749375581648108814279740019496
            )
            // q3
            mstore(
                mload(add(vk, 0x120)),
                10968315091130697826739702003431871061194509005508422925553623050382577326217
            )
            mstore(
                add(mload(add(vk, 0x120)), 0x20),
                15427520064071248215056685014173235486104450904391795026852773491856938894709
            )
            // q4
            mstore(
                mload(add(vk, 0x140)),
                18552120566932429867086353275996329695634259700395564758868503989836119743976
            )
            mstore(
                add(mload(add(vk, 0x140)), 0x20),
                3758067104786429430903075307629079520236919298153864746942709833835554967358
            )

            // qM12
            mstore(
                mload(add(vk, 0x160)),
                15572105585408879365916525794377657194208962207139936775774251314043834098564
            )
            mstore(
                add(mload(add(vk, 0x160)), 0x20),
                6020958592977720912767721649577520866900127639444801108025166566775601659967
            )
            // qM34
            mstore(
                mload(add(vk, 0x180)),
                7222736374399006211510699304087942059126683193629769887877014686905908945806
            )
            mstore(
                add(mload(add(vk, 0x180)), 0x20),
                3206829195840321731462512861208486643839466222481973961857037286401683735687
            )

            // qO
            mstore(
                mload(add(vk, 0x1a0)),
                3354591448826521438380040598853232839565248677422944332090180952953080366288
            )
            mstore(
                add(mload(add(vk, 0x1a0)), 0x20),
                19963668090281374431317017250026510351550118984869870738585126468447913244591
            )
            // qC
            mstore(
                mload(add(vk, 0x1c0)),
                17974807300702948996049252322259229942746003444136224778640009295566243156501
            )
            mstore(
                add(mload(add(vk, 0x1c0)), 0x20),
                12052046477897583522878740699736101759681160588792932192885758224246430725626
            )
            // qH1
            mstore(
                mload(add(vk, 0x1e0)),
                4921034593166626300651198249205635549101612701433540517476055976860959484949
            )
            mstore(
                add(mload(add(vk, 0x1e0)), 0x20),
                10185405862489710856496932329182422458788356942668474473592359869600739434412
            )
            // qH2
            mstore(
                mload(add(vk, 0x200)),
                5878093886505576171449048465070377785955067968838740459103515014923390639639
            )
            mstore(
                add(mload(add(vk, 0x200)), 0x20),
                15259888626953734049577795735967576333281508824947666542918638019623811781546
            )
            // qH3
            mstore(
                mload(add(vk, 0x220)),
                19643669610230135658961129468905806322162637394453939877922249528939594418232
            )
            mstore(
                add(mload(add(vk, 0x220)), 0x20),
                12224852444220822793589818921506014057813793178254991680570188956045824616826
            )
            // qH4
            mstore(
                mload(add(vk, 0x240)),
                6641963433101155753834035944397107424954075034582038862756599997819459513127
            )
            mstore(
                add(mload(add(vk, 0x240)), 0x20),
                3589782713125700501109156506560851754947305163593203470270968608024453926281
            )
            // qEcc
            mstore(
                mload(add(vk, 0x260)),
                12330486534063835148740124350008103247243211222952306312071501975705307117092
            )
            mstore(
                add(mload(add(vk, 0x260)), 0x20),
                20509504091296584456523257770792088853619865130173628006197630419037120651742
            )
        }
    }
}
