# Copyright (c) 2022 Espresso Systems (espressosys.com)
# This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.

# API and messages
#
# TOML specification: https://github.com/kezhuw/toml-spec

[meta]
FORMAT_VERSION = "0.1.0"

HTML_TOP = """
<!DOCTYPE html>
<html lang='en'>
  <head>
    <meta charset='utf-8'>
    <title>EQS REST API</title>
  </head>
  <body>
"""

HTML_BOTTOM = """
  </body>
</html>
"""

HEADING_ROUTES = "Routes"
HEADING_PARAMETERS = "Parameters"
HEADING_DESCRIPTION = "Description"

[route.get_cap_state]
PATH = [ "get_cap_state" ]
DOC = "Returns the current CAP blockchain state."

[route.get_all_nullifiers]
PATH = [ "get_all_nullifiers" ]
DOC = "Returns the current set of nullifiers."

[route.check_nullifier]
PATH = [ "check_nullifier/:nullifier" ]
":nullifier" = "TaggedBase64"
DOC = "Returns whether the specified nullifier has been spent."
ERROR_nullifier = "A valid nullifier is required. Nullifiers begin with NUL~."

[route.get_events_since]
PATH = [ "get_events_since/:first", "get_events_since/:first/:max_count" ]
":first" = "Integer"
":max_count" = "Integer"
DOC = """Returns the array of [up to max_count] events since the specified index (inclusive)

If `:max_count` is larger than 100 or omitted at most the first 100 events are returned.
"""
ERROR_first = "The index must be a non-negative integer."
ERROR_max_count = "The max_count must be a non-negative, non-zero integer."

[route.get_transaction]
PATH = [ "get_transaction/:block_id/:txn_id" ]
":block_id" = "Integer"
":txn_id" = "Integer"
DOC = "Returns the committed transaction, if any, at the specified location, with output indexes."

[route.get_transaction_by_hash]
PATH = [ "get_transaction/:hash" ]
":hash" = "TaggedBase64"
DOC = "Returns the committed transaction, if any, with the specified hash, with output indexes."
ERROR_hash = "A valid commitment hash is required. Commitment begin with CMTMNT_CAPE_TRNSTN~."

[route.healthcheck]
PATH = [ "healthcheck" ]
DOC = "Responds with JSON {\"status\": \"available\"}."

[route.get_wrapped_erc20_address]
PATH = [ "get_wrapped_erc20_address/:asset" ]
":asset" = "TaggedBase64"
DOC = "Returns contract address for wrapped asset, or None for domestic asset."

[route.get_cape_contract_address]
PATH = [ "get_cape_contract_address" ]
DOC = "Returns the Ethereum address of the CAPE contract the EQS is connected to."
