{
  "address": "0xAc42e297B896dB2CD0c2C1b47e348b7f489E70f1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "nRoots",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "verifierAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recordsMerkleTreeAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetDefinitionCode",
          "type": "uint256"
        }
      ],
      "name": "AssetSponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "height",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "depositCommitments",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "minerAddr",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "noteTypes",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "transferNotes",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "mintNotes",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "freezeNotes",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "burnNotes",
          "type": "bytes"
        }
      ],
      "name": "BlockCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "roBytes",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "Erc20TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "roBytes",
          "type": "bytes"
        }
      ],
      "name": "FaucetInitialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CAPE_BURN_MAGIC_BYTES",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CAPE_BURN_MAGIC_BYTES_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CAP_NATIVE_ASSET_CODE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOM_SEP_DOMESTIC_ASSET",
      "outputs": [
        {
          "internalType": "bytes14",
          "name": "",
          "type": "bytes14"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOM_SEP_FOREIGN_ASSET",
      "outputs": [
        {
          "internalType": "bytes13",
          "name": "",
          "type": "bytes13"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_NUM_PENDING_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockHeight",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "code",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "auditorPk",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "credPk",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "freezerPk",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "revealMap",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint128",
                      "name": "revealThreshold",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct AssetRegistry.AssetPolicy",
                  "name": "policy",
                  "type": "tuple"
                }
              ],
              "internalType": "struct AssetRegistry.AssetDefinition",
              "name": "assetDef",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct EdOnBN254.EdOnBN254Point",
              "name": "userAddr",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "encKey",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "freezeFlag",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "blind",
              "type": "uint256"
            }
          ],
          "internalType": "struct CAPE.RecordOpening",
          "name": "ro",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "erc20Address",
          "type": "address"
        }
      ],
      "name": "depositErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "faucetInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct EdOnBN254.EdOnBN254Point",
          "name": "faucetManagerAddress",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "faucetManagerEncKey",
          "type": "bytes32"
        }
      ],
      "name": "faucetSetupForTestnet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRootValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "code",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "auditorPk",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "credPk",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "freezerPk",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "revealMap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "revealThreshold",
                  "type": "uint128"
                }
              ],
              "internalType": "struct AssetRegistry.AssetPolicy",
              "name": "policy",
              "type": "tuple"
            }
          ],
          "internalType": "struct AssetRegistry.AssetDefinition",
          "name": "assetDefinition",
          "type": "tuple"
        }
      ],
      "name": "isCapeAssetRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "code",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "auditorPk",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "credPk",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "freezerPk",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "revealMap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "revealThreshold",
                  "type": "uint128"
                }
              ],
              "internalType": "struct AssetRegistry.AssetPolicy",
              "name": "policy",
              "type": "tuple"
            }
          ],
          "internalType": "struct AssetRegistry.AssetDefinition",
          "name": "assetDefinition",
          "type": "tuple"
        }
      ],
      "name": "lookup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeDomesticAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "code",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "auditorPk",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "credPk",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "freezerPk",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "revealMap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "revealThreshold",
                  "type": "uint128"
                }
              ],
              "internalType": "struct AssetRegistry.AssetPolicy",
              "name": "policy",
              "type": "tuple"
            }
          ],
          "internalType": "struct AssetRegistry.AssetDefinition",
          "name": "assetDefinition",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nullifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "code",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "auditorPk",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "credPk",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "x",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EdOnBN254.EdOnBN254Point",
                  "name": "freezerPk",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "revealMap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "revealThreshold",
                  "type": "uint128"
                }
              ],
              "internalType": "struct AssetRegistry.AssetPolicy",
              "name": "policy",
              "type": "tuple"
            }
          ],
          "internalType": "struct AssetRegistry.AssetDefinition",
          "name": "newAsset",
          "type": "tuple"
        }
      ],
      "name": "sponsorCapeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct EdOnBN254.EdOnBN254Point",
              "name": "minerAddr",
              "type": "tuple"
            },
            {
              "internalType": "enum CAPE.NoteType[]",
              "name": "noteTypes",
              "type": "uint8[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "inputNullifiers",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "outputCommitments",
                  "type": "uint256[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "prodPerm",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zeta",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zetaOmega",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "prodPermZetaOmegaEval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPlonkVerifier.PlonkProof",
                  "name": "proof",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "ephemeralKey",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "data",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct CAPE.AuditMemo",
                  "name": "auditMemo",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "merkleRoot",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint128",
                      "name": "fee",
                      "type": "uint128"
                    },
                    {
                      "internalType": "uint64",
                      "name": "validUntil",
                      "type": "uint64"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "txnMemoVerKey",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes",
                      "name": "extraProofBoundData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct CAPE.TransferAuxInfo",
                  "name": "auxInfo",
                  "type": "tuple"
                }
              ],
              "internalType": "struct CAPE.TransferNote[]",
              "name": "transferNotes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "inputNullifier",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "chgComm",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mintComm",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "mintAmount",
                  "type": "uint128"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "code",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct EdOnBN254.EdOnBN254Point",
                          "name": "auditorPk",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct EdOnBN254.EdOnBN254Point",
                          "name": "credPk",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct EdOnBN254.EdOnBN254Point",
                          "name": "freezerPk",
                          "type": "tuple"
                        },
                        {
                          "internalType": "uint256",
                          "name": "revealMap",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint128",
                          "name": "revealThreshold",
                          "type": "uint128"
                        }
                      ],
                      "internalType": "struct AssetRegistry.AssetPolicy",
                      "name": "policy",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct AssetRegistry.AssetDefinition",
                  "name": "mintAssetDef",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "mintInternalAssetCode",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "prodPerm",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zeta",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zetaOmega",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "prodPermZetaOmegaEval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPlonkVerifier.PlonkProof",
                  "name": "proof",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "ephemeralKey",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "data",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct CAPE.AuditMemo",
                  "name": "auditMemo",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "merkleRoot",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint128",
                      "name": "fee",
                      "type": "uint128"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "txnMemoVerKey",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct CAPE.MintAuxInfo",
                  "name": "auxInfo",
                  "type": "tuple"
                }
              ],
              "internalType": "struct CAPE.MintNote[]",
              "name": "mintNotes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "inputNullifiers",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "outputCommitments",
                  "type": "uint256[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "prodPerm",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zeta",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zetaOmega",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "prodPermZetaOmegaEval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPlonkVerifier.PlonkProof",
                  "name": "proof",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "merkleRoot",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint128",
                      "name": "fee",
                      "type": "uint128"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "txnMemoVerKey",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct CAPE.FreezeAuxInfo",
                  "name": "auxInfo",
                  "type": "tuple"
                }
              ],
              "internalType": "struct CAPE.FreezeNote[]",
              "name": "freezeNotes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256[]",
                      "name": "inputNullifiers",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "outputCommitments",
                      "type": "uint256[]"
                    },
                    {
                      "components": [
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "wire0",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "wire1",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "wire2",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "wire3",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "wire4",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "prodPerm",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "split0",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "split1",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "split2",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "split3",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "split4",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "zeta",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "zetaOmega",
                          "type": "tuple"
                        },
                        {
                          "internalType": "uint256",
                          "name": "wireEval0",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "wireEval1",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "wireEval2",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "wireEval3",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "wireEval4",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "sigmaEval0",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "sigmaEval1",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "sigmaEval2",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "sigmaEval3",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "prodPermZetaOmegaEval",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IPlonkVerifier.PlonkProof",
                      "name": "proof",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct EdOnBN254.EdOnBN254Point",
                          "name": "ephemeralKey",
                          "type": "tuple"
                        },
                        {
                          "internalType": "uint256[]",
                          "name": "data",
                          "type": "uint256[]"
                        }
                      ],
                      "internalType": "struct CAPE.AuditMemo",
                      "name": "auditMemo",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "merkleRoot",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint128",
                          "name": "fee",
                          "type": "uint128"
                        },
                        {
                          "internalType": "uint64",
                          "name": "validUntil",
                          "type": "uint64"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct EdOnBN254.EdOnBN254Point",
                          "name": "txnMemoVerKey",
                          "type": "tuple"
                        },
                        {
                          "internalType": "bytes",
                          "name": "extraProofBoundData",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct CAPE.TransferAuxInfo",
                      "name": "auxInfo",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct CAPE.TransferNote",
                  "name": "transferNote",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint128",
                      "name": "amount",
                      "type": "uint128"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "code",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "components": [
                                {
                                  "internalType": "uint256",
                                  "name": "x",
                                  "type": "uint256"
                                },
                                {
                                  "internalType": "uint256",
                                  "name": "y",
                                  "type": "uint256"
                                }
                              ],
                              "internalType": "struct EdOnBN254.EdOnBN254Point",
                              "name": "auditorPk",
                              "type": "tuple"
                            },
                            {
                              "components": [
                                {
                                  "internalType": "uint256",
                                  "name": "x",
                                  "type": "uint256"
                                },
                                {
                                  "internalType": "uint256",
                                  "name": "y",
                                  "type": "uint256"
                                }
                              ],
                              "internalType": "struct EdOnBN254.EdOnBN254Point",
                              "name": "credPk",
                              "type": "tuple"
                            },
                            {
                              "components": [
                                {
                                  "internalType": "uint256",
                                  "name": "x",
                                  "type": "uint256"
                                },
                                {
                                  "internalType": "uint256",
                                  "name": "y",
                                  "type": "uint256"
                                }
                              ],
                              "internalType": "struct EdOnBN254.EdOnBN254Point",
                              "name": "freezerPk",
                              "type": "tuple"
                            },
                            {
                              "internalType": "uint256",
                              "name": "revealMap",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint128",
                              "name": "revealThreshold",
                              "type": "uint128"
                            }
                          ],
                          "internalType": "struct AssetRegistry.AssetPolicy",
                          "name": "policy",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct AssetRegistry.AssetDefinition",
                      "name": "assetDef",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "userAddr",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "encKey",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bool",
                      "name": "freezeFlag",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "blind",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CAPE.RecordOpening",
                  "name": "recordOpening",
                  "type": "tuple"
                }
              ],
              "internalType": "struct CAPE.BurnNote[]",
              "name": "burnNotes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CAPE.CapeBlock",
          "name": "newBlock",
          "type": "tuple"
        }
      ],
      "name": "submitCapeBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct EdOnBN254.EdOnBN254Point",
              "name": "minerAddr",
              "type": "tuple"
            },
            {
              "internalType": "enum CAPE.NoteType[]",
              "name": "noteTypes",
              "type": "uint8[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "inputNullifiers",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "outputCommitments",
                  "type": "uint256[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "prodPerm",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zeta",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zetaOmega",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "prodPermZetaOmegaEval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPlonkVerifier.PlonkProof",
                  "name": "proof",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "ephemeralKey",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "data",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct CAPE.AuditMemo",
                  "name": "auditMemo",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "merkleRoot",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint128",
                      "name": "fee",
                      "type": "uint128"
                    },
                    {
                      "internalType": "uint64",
                      "name": "validUntil",
                      "type": "uint64"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "txnMemoVerKey",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes",
                      "name": "extraProofBoundData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct CAPE.TransferAuxInfo",
                  "name": "auxInfo",
                  "type": "tuple"
                }
              ],
              "internalType": "struct CAPE.TransferNote[]",
              "name": "transferNotes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "inputNullifier",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "chgComm",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mintComm",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "mintAmount",
                  "type": "uint128"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "code",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct EdOnBN254.EdOnBN254Point",
                          "name": "auditorPk",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct EdOnBN254.EdOnBN254Point",
                          "name": "credPk",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct EdOnBN254.EdOnBN254Point",
                          "name": "freezerPk",
                          "type": "tuple"
                        },
                        {
                          "internalType": "uint256",
                          "name": "revealMap",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint128",
                          "name": "revealThreshold",
                          "type": "uint128"
                        }
                      ],
                      "internalType": "struct AssetRegistry.AssetPolicy",
                      "name": "policy",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct AssetRegistry.AssetDefinition",
                  "name": "mintAssetDef",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "mintInternalAssetCode",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "prodPerm",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zeta",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zetaOmega",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "prodPermZetaOmegaEval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPlonkVerifier.PlonkProof",
                  "name": "proof",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "ephemeralKey",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "data",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct CAPE.AuditMemo",
                  "name": "auditMemo",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "merkleRoot",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint128",
                      "name": "fee",
                      "type": "uint128"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "txnMemoVerKey",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct CAPE.MintAuxInfo",
                  "name": "auxInfo",
                  "type": "tuple"
                }
              ],
              "internalType": "struct CAPE.MintNote[]",
              "name": "mintNotes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "inputNullifiers",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "outputCommitments",
                  "type": "uint256[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "wire4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "prodPerm",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split0",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split1",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split2",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split3",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "split4",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zeta",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct BN254.G1Point",
                      "name": "zetaOmega",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "wireEval4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "sigmaEval3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "prodPermZetaOmegaEval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPlonkVerifier.PlonkProof",
                  "name": "proof",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "merkleRoot",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint128",
                      "name": "fee",
                      "type": "uint128"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "txnMemoVerKey",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct CAPE.FreezeAuxInfo",
                  "name": "auxInfo",
                  "type": "tuple"
                }
              ],
              "internalType": "struct CAPE.FreezeNote[]",
              "name": "freezeNotes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256[]",
                      "name": "inputNullifiers",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "outputCommitments",
                      "type": "uint256[]"
                    },
                    {
                      "components": [
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "wire0",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "wire1",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "wire2",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "wire3",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "wire4",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "prodPerm",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "split0",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "split1",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "split2",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "split3",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "split4",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "zeta",
                          "type": "tuple"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct BN254.G1Point",
                          "name": "zetaOmega",
                          "type": "tuple"
                        },
                        {
                          "internalType": "uint256",
                          "name": "wireEval0",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "wireEval1",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "wireEval2",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "wireEval3",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "wireEval4",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "sigmaEval0",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "sigmaEval1",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "sigmaEval2",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "sigmaEval3",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "prodPermZetaOmegaEval",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IPlonkVerifier.PlonkProof",
                      "name": "proof",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct EdOnBN254.EdOnBN254Point",
                          "name": "ephemeralKey",
                          "type": "tuple"
                        },
                        {
                          "internalType": "uint256[]",
                          "name": "data",
                          "type": "uint256[]"
                        }
                      ],
                      "internalType": "struct CAPE.AuditMemo",
                      "name": "auditMemo",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "merkleRoot",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint128",
                          "name": "fee",
                          "type": "uint128"
                        },
                        {
                          "internalType": "uint64",
                          "name": "validUntil",
                          "type": "uint64"
                        },
                        {
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "x",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "y",
                              "type": "uint256"
                            }
                          ],
                          "internalType": "struct EdOnBN254.EdOnBN254Point",
                          "name": "txnMemoVerKey",
                          "type": "tuple"
                        },
                        {
                          "internalType": "bytes",
                          "name": "extraProofBoundData",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct CAPE.TransferAuxInfo",
                      "name": "auxInfo",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct CAPE.TransferNote",
                  "name": "transferNote",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint128",
                      "name": "amount",
                      "type": "uint128"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "code",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "components": [
                                {
                                  "internalType": "uint256",
                                  "name": "x",
                                  "type": "uint256"
                                },
                                {
                                  "internalType": "uint256",
                                  "name": "y",
                                  "type": "uint256"
                                }
                              ],
                              "internalType": "struct EdOnBN254.EdOnBN254Point",
                              "name": "auditorPk",
                              "type": "tuple"
                            },
                            {
                              "components": [
                                {
                                  "internalType": "uint256",
                                  "name": "x",
                                  "type": "uint256"
                                },
                                {
                                  "internalType": "uint256",
                                  "name": "y",
                                  "type": "uint256"
                                }
                              ],
                              "internalType": "struct EdOnBN254.EdOnBN254Point",
                              "name": "credPk",
                              "type": "tuple"
                            },
                            {
                              "components": [
                                {
                                  "internalType": "uint256",
                                  "name": "x",
                                  "type": "uint256"
                                },
                                {
                                  "internalType": "uint256",
                                  "name": "y",
                                  "type": "uint256"
                                }
                              ],
                              "internalType": "struct EdOnBN254.EdOnBN254Point",
                              "name": "freezerPk",
                              "type": "tuple"
                            },
                            {
                              "internalType": "uint256",
                              "name": "revealMap",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint128",
                              "name": "revealThreshold",
                              "type": "uint128"
                            }
                          ],
                          "internalType": "struct AssetRegistry.AssetPolicy",
                          "name": "policy",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct AssetRegistry.AssetDefinition",
                      "name": "assetDef",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "x",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "y",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct EdOnBN254.EdOnBN254Point",
                      "name": "userAddr",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "encKey",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bool",
                      "name": "freezeFlag",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "blind",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CAPE.RecordOpening",
                  "name": "recordOpening",
                  "type": "tuple"
                }
              ],
              "internalType": "struct CAPE.BurnNote[]",
              "name": "burnNotes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CAPE.CapeBlock",
          "name": "newBlock",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "submitCapeBlockWithMemos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4e1878240e50b2f7b8c400239f72f79b936d258e6559377af3f75e2ff38ca7ed",
  "receipt": {
    "to": null,
    "from": "0xb19A0B7Cf8BC81492841537b43d49dEdA35DcE4F",
    "contractAddress": "0xAc42e297B896dB2CD0c2C1b47e348b7f489E70f1",
    "transactionIndex": 4,
    "gasUsed": "5152378",
    "logsBloom": "0x
    "blockHash": "0xa703d7ae311c965db1f7ee8b94e6dfe19a5508268e112dc83f76460286d8de8c",
    "transactionHash": "0x4e1878240e50b2f7b8c400239f72f79b936d258e6559377af3f75e2ff38ca7ed",
    "logs": [],
    "blockNumber": 7427808,
    "cumulativeGasUsed": "5352279",
    "status": 1,
    "byzantium": true
  },
  "args": [
    40,
    "0xf3F7e77eF94ED5002117De761850b71f15Fa065F",
    "0xabCCAC63B8d4844D1aE9E555f8C6c975Ac879777"
  ],
  "numDeployments": 1,
  "solcInputHash": "72a14774796fae5d4ac4d3b6f26df06c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nRoots\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"verifierAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recordsMerkleTreeAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetDefinitionCode\",\"type\":\"uint256\"}],\"name\":\"AssetSponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"depositCommitments\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"minerAddr\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"noteTypes\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"transferNotes\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"mintNotes\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"freezeNotes\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"burnNotes\",\"type\":\"bytes\"}],\"name\":\"BlockCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"roBytes\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Erc20TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"roBytes\",\"type\":\"bytes\"}],\"name\":\"FaucetInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAPE_BURN_MAGIC_BYTES\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAPE_BURN_MAGIC_BYTES_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAP_NATIVE_ASSET_CODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOM_SEP_DOMESTIC_ASSET\",\"outputs\":[{\"internalType\":\"bytes14\",\"name\":\"\",\"type\":\"bytes14\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOM_SEP_FOREIGN_ASSET\",\"outputs\":[{\"internalType\":\"bytes13\",\"name\":\"\",\"type\":\"bytes13\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUM_PENDING_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockHeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"auditorPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"credPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"freezerPk\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"revealMap\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"revealThreshold\",\"type\":\"uint128\"}],\"internalType\":\"struct AssetRegistry.AssetPolicy\",\"name\":\"policy\",\"type\":\"tuple\"}],\"internalType\":\"struct AssetRegistry.AssetDefinition\",\"name\":\"assetDef\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"userAddr\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"encKey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"freezeFlag\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blind\",\"type\":\"uint256\"}],\"internalType\":\"struct CAPE.RecordOpening\",\"name\":\"ro\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"name\":\"depositErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faucetInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"faucetManagerAddress\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"faucetManagerEncKey\",\"type\":\"bytes32\"}],\"name\":\"faucetSetupForTestnet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRootValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"auditorPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"credPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"freezerPk\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"revealMap\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"revealThreshold\",\"type\":\"uint128\"}],\"internalType\":\"struct AssetRegistry.AssetPolicy\",\"name\":\"policy\",\"type\":\"tuple\"}],\"internalType\":\"struct AssetRegistry.AssetDefinition\",\"name\":\"assetDefinition\",\"type\":\"tuple\"}],\"name\":\"isCapeAssetRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"auditorPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"credPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"freezerPk\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"revealMap\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"revealThreshold\",\"type\":\"uint128\"}],\"internalType\":\"struct AssetRegistry.AssetPolicy\",\"name\":\"policy\",\"type\":\"tuple\"}],\"internalType\":\"struct AssetRegistry.AssetDefinition\",\"name\":\"assetDefinition\",\"type\":\"tuple\"}],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeDomesticAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"auditorPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"credPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"freezerPk\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"revealMap\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"revealThreshold\",\"type\":\"uint128\"}],\"internalType\":\"struct AssetRegistry.AssetPolicy\",\"name\":\"policy\",\"type\":\"tuple\"}],\"internalType\":\"struct AssetRegistry.AssetDefinition\",\"name\":\"assetDefinition\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nullifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"auditorPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"credPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"freezerPk\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"revealMap\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"revealThreshold\",\"type\":\"uint128\"}],\"internalType\":\"struct AssetRegistry.AssetPolicy\",\"name\":\"policy\",\"type\":\"tuple\"}],\"internalType\":\"struct AssetRegistry.AssetDefinition\",\"name\":\"newAsset\",\"type\":\"tuple\"}],\"name\":\"sponsorCapeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"minerAddr\",\"type\":\"tuple\"},{\"internalType\":\"enum CAPE.NoteType[]\",\"name\":\"noteTypes\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"inputNullifiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputCommitments\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"prodPerm\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zeta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zetaOmega\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"wireEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prodPermZetaOmegaEval\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlonkVerifier.PlonkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"ephemeralKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CAPE.AuditMemo\",\"name\":\"auditMemo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merkleRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"txnMemoVerKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extraProofBoundData\",\"type\":\"bytes\"}],\"internalType\":\"struct CAPE.TransferAuxInfo\",\"name\":\"auxInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.TransferNote[]\",\"name\":\"transferNotes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"inputNullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chgComm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintComm\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"mintAmount\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"auditorPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"credPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"freezerPk\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"revealMap\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"revealThreshold\",\"type\":\"uint128\"}],\"internalType\":\"struct AssetRegistry.AssetPolicy\",\"name\":\"policy\",\"type\":\"tuple\"}],\"internalType\":\"struct AssetRegistry.AssetDefinition\",\"name\":\"mintAssetDef\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mintInternalAssetCode\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"prodPerm\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zeta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zetaOmega\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"wireEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prodPermZetaOmegaEval\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlonkVerifier.PlonkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"ephemeralKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CAPE.AuditMemo\",\"name\":\"auditMemo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merkleRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"txnMemoVerKey\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.MintAuxInfo\",\"name\":\"auxInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.MintNote[]\",\"name\":\"mintNotes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"inputNullifiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputCommitments\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"prodPerm\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zeta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zetaOmega\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"wireEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prodPermZetaOmegaEval\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlonkVerifier.PlonkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merkleRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"txnMemoVerKey\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.FreezeAuxInfo\",\"name\":\"auxInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.FreezeNote[]\",\"name\":\"freezeNotes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"inputNullifiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputCommitments\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"prodPerm\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zeta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zetaOmega\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"wireEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prodPermZetaOmegaEval\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlonkVerifier.PlonkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"ephemeralKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CAPE.AuditMemo\",\"name\":\"auditMemo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merkleRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"txnMemoVerKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extraProofBoundData\",\"type\":\"bytes\"}],\"internalType\":\"struct CAPE.TransferAuxInfo\",\"name\":\"auxInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.TransferNote\",\"name\":\"transferNote\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"auditorPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"credPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"freezerPk\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"revealMap\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"revealThreshold\",\"type\":\"uint128\"}],\"internalType\":\"struct AssetRegistry.AssetPolicy\",\"name\":\"policy\",\"type\":\"tuple\"}],\"internalType\":\"struct AssetRegistry.AssetDefinition\",\"name\":\"assetDef\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"userAddr\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"encKey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"freezeFlag\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blind\",\"type\":\"uint256\"}],\"internalType\":\"struct CAPE.RecordOpening\",\"name\":\"recordOpening\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.BurnNote[]\",\"name\":\"burnNotes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CAPE.CapeBlock\",\"name\":\"newBlock\",\"type\":\"tuple\"}],\"name\":\"submitCapeBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"minerAddr\",\"type\":\"tuple\"},{\"internalType\":\"enum CAPE.NoteType[]\",\"name\":\"noteTypes\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"inputNullifiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputCommitments\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"prodPerm\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zeta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zetaOmega\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"wireEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prodPermZetaOmegaEval\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlonkVerifier.PlonkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"ephemeralKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CAPE.AuditMemo\",\"name\":\"auditMemo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merkleRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"txnMemoVerKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extraProofBoundData\",\"type\":\"bytes\"}],\"internalType\":\"struct CAPE.TransferAuxInfo\",\"name\":\"auxInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.TransferNote[]\",\"name\":\"transferNotes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"inputNullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chgComm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintComm\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"mintAmount\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"auditorPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"credPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"freezerPk\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"revealMap\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"revealThreshold\",\"type\":\"uint128\"}],\"internalType\":\"struct AssetRegistry.AssetPolicy\",\"name\":\"policy\",\"type\":\"tuple\"}],\"internalType\":\"struct AssetRegistry.AssetDefinition\",\"name\":\"mintAssetDef\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mintInternalAssetCode\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"prodPerm\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zeta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zetaOmega\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"wireEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prodPermZetaOmegaEval\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlonkVerifier.PlonkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"ephemeralKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CAPE.AuditMemo\",\"name\":\"auditMemo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merkleRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"txnMemoVerKey\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.MintAuxInfo\",\"name\":\"auxInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.MintNote[]\",\"name\":\"mintNotes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"inputNullifiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputCommitments\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"prodPerm\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zeta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zetaOmega\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"wireEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prodPermZetaOmegaEval\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlonkVerifier.PlonkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merkleRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"txnMemoVerKey\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.FreezeAuxInfo\",\"name\":\"auxInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.FreezeNote[]\",\"name\":\"freezeNotes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"inputNullifiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputCommitments\",\"type\":\"uint256[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"wire4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"prodPerm\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"split4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zeta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"zetaOmega\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"wireEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wireEval4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaEval3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prodPermZetaOmegaEval\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlonkVerifier.PlonkProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"ephemeralKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CAPE.AuditMemo\",\"name\":\"auditMemo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merkleRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"txnMemoVerKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extraProofBoundData\",\"type\":\"bytes\"}],\"internalType\":\"struct CAPE.TransferAuxInfo\",\"name\":\"auxInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.TransferNote\",\"name\":\"transferNote\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"auditorPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"credPk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"freezerPk\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"revealMap\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"revealThreshold\",\"type\":\"uint128\"}],\"internalType\":\"struct AssetRegistry.AssetPolicy\",\"name\":\"policy\",\"type\":\"tuple\"}],\"internalType\":\"struct AssetRegistry.AssetDefinition\",\"name\":\"assetDef\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct EdOnBN254.EdOnBN254Point\",\"name\":\"userAddr\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"encKey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"freezeFlag\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blind\",\"type\":\"uint256\"}],\"internalType\":\"struct CAPE.RecordOpening\",\"name\":\"recordOpening\",\"type\":\"tuple\"}],\"internalType\":\"struct CAPE.BurnNote[]\",\"name\":\"burnNotes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CAPE.CapeBlock\",\"name\":\"newBlock\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"submitCapeBlockWithMemos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"nRoots\":\"number of the most recent roots of the records merkle tree to be stored\",\"verifierAddr\":\"address of the Plonk Verifier contract\"}},\"depositErc20((uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256),address)\":{\"params\":{\"erc20Address\":\"address of the ERC-20 token corresponding to the deposit\",\"ro\":\"record opening that will be inserted in the records merkle tree once the deposit is validated\"}},\"faucetSetupForTestnet((uint256,uint256),bytes32)\":{\"params\":{\"faucetManagerAddress\":\"address of public key of faucet manager for CAP native token (testnet only!)\",\"faucetManagerEncKey\":\"public key of faucet manager for CAP native token (testnet only!)\"}},\"isCapeAssetRegistered((uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))\":{\"params\":{\"assetDefinition\":\"an asset definition\"},\"returns\":{\"_0\":\"True if the asset type is registered, false otherwise.\"}},\"lookup((uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))\":{\"params\":{\"assetDefinition\":\"an asset definition\"},\"returns\":{\"_0\":\"An ERC-20 address\"}},\"sponsorCapeAsset(address,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))\":{\"params\":{\"erc20Address\":\"An ERC-20 token address\",\"newAsset\":\"An asset type to be registered in the contract\"}},\"submitCapeBlock(((uint256,uint256),uint8[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes))[],(uint256,uint256,uint256,uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,(uint256,uint256)))[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint128,(uint256,uint256)))[],((uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes)),(uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256))[]))\":{\"details\":\"Transactions are validated and the blockchain state is updated. Moreover *BURN* transactions trigger the unwrapping of cape asset records into erc20 tokens.\",\"params\":{\"newBlock\":\"block to be processed by the CAPE contract.\"}},\"submitCapeBlockWithMemos(((uint256,uint256),uint8[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes))[],(uint256,uint256,uint256,uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,(uint256,uint256)))[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint128,(uint256,uint256)))[],((uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes)),(uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256))[]),bytes)\":{\"params\":{\"\":\"{bytes} extraData data to be stored in calldata; this data is ignored by the contract function\",\"newBlock\":\"block to be processed by the CAPE contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"CAPE contract constructor method.\"},\"depositErc20((uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256),address)\":{\"notice\":\"Wraps ERC-20 tokens into a CAPE asset defined in the record opening.\"},\"faucetSetupForTestnet((uint256,uint256),bytes32)\":{\"notice\":\"Allocate native token faucet to a manager. For testnet only.\"},\"isCapeAssetRegistered((uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))\":{\"notice\":\"Is the given asset definition registered?\"},\"lookup((uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))\":{\"notice\":\"Fetch the ERC-20 token address corresponding to the given asset definition.\"},\"nativeDomesticAsset()\":{\"notice\":\"Return the CAP-native asset definition.\"},\"sponsorCapeAsset(address,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))\":{\"notice\":\"Create and register a new asset type associated with an ERC-20 token. Will revert if the asset type is already registered or the ERC-20 token address is zero.\"},\"submitCapeBlock(((uint256,uint256),uint8[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes))[],(uint256,uint256,uint256,uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,(uint256,uint256)))[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint128,(uint256,uint256)))[],((uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes)),(uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256))[]))\":{\"notice\":\"Submit a new block to the CAPE contract.\"},\"submitCapeBlockWithMemos(((uint256,uint256),uint8[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes))[],(uint256,uint256,uint256,uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,(uint256,uint256)))[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint128,(uint256,uint256)))[],((uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes)),(uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256))[]),bytes)\":{\"notice\":\"Submit a new block with extra data to the CAPE contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CAPE.sol\":\"CAPE\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc39d0f5693925ea1e8c517f7cc24211a9899c83a57e62d806180cdb056b6b75\",\"license\":\"AGPL-3.0-only\"},\"contracts/AssetRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/BN254.sol\\\";\\nimport \\\"./libraries/EdOnBN254.sol\\\";\\n\\ncontract AssetRegistry {\\n    bytes13 public constant DOM_SEP_FOREIGN_ASSET = \\\"FOREIGN_ASSET\\\";\\n    bytes14 public constant DOM_SEP_DOMESTIC_ASSET = \\\"DOMESTIC_ASSET\\\";\\n    uint256 public constant CAP_NATIVE_ASSET_CODE = 1;\\n\\n    event AssetSponsored(address erc20Address, uint256 assetDefinitionCode);\\n\\n    mapping(bytes32 => address) public assets;\\n\\n    struct AssetDefinition {\\n        uint256 code;\\n        AssetPolicy policy;\\n    }\\n\\n    struct AssetPolicy {\\n        EdOnBN254.EdOnBN254Point auditorPk;\\n        EdOnBN254.EdOnBN254Point credPk;\\n        EdOnBN254.EdOnBN254Point freezerPk;\\n        uint256 revealMap;\\n        uint128 revealThreshold;\\n    }\\n\\n    /// @notice Return the CAP-native asset definition.\\n    function nativeDomesticAsset() public pure returns (AssetDefinition memory assetDefinition) {\\n        assetDefinition.code = CAP_NATIVE_ASSET_CODE;\\n        // affine representation of zero point in arkwork is (0,1)\\n        assetDefinition.policy.auditorPk.y = 1;\\n        assetDefinition.policy.credPk.y = 1;\\n        assetDefinition.policy.freezerPk.y = 1;\\n    }\\n\\n    /// @notice Fetch the ERC-20 token address corresponding to the\\n    /// given asset definition.\\n    /// @param assetDefinition an asset definition\\n    /// @return An ERC-20 address\\n    function lookup(AssetDefinition memory assetDefinition) public view returns (address) {\\n        bytes32 key = keccak256(abi.encode(assetDefinition));\\n        return assets[key];\\n    }\\n\\n    /// @notice Is the given asset definition registered?\\n    /// @param assetDefinition an asset definition\\n    /// @return True if the asset type is registered, false otherwise.\\n    function isCapeAssetRegistered(AssetDefinition memory assetDefinition)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return lookup(assetDefinition) != address(0);\\n    }\\n\\n    /// @notice Create and register a new asset type associated with an\\n    /// ERC-20 token. Will revert if the asset type is already\\n    /// registered or the ERC-20 token address is zero.\\n    /// @param erc20Address An ERC-20 token address\\n    /// @param newAsset An asset type to be registered in the contract\\n    function sponsorCapeAsset(address erc20Address, AssetDefinition memory newAsset) external {\\n        require(erc20Address != address(0), \\\"Bad asset address\\\");\\n        require(!isCapeAssetRegistered(newAsset), \\\"Asset already registered\\\");\\n\\n        _checkForeignAssetCode(newAsset.code, erc20Address, msg.sender, newAsset.policy);\\n\\n        bytes32 key = keccak256(abi.encode(newAsset));\\n        assets[key] = erc20Address;\\n\\n        emit AssetSponsored(erc20Address, newAsset.code);\\n    }\\n\\n    /// @notice Throws an exception if the asset definition code is\\n    /// not correctly derived from the ERC-20 address of the token and\\n    /// the address of the sponsor.\\n    /// @dev Requires \\\"view\\\" to access msg.sender.\\n    /// @param assetDefinitionCode The code of an asset definition\\n    /// @param erc20Address The ERC-20 address bound to the asset definition\\n    /// @param sponsor The sponsor address of this wrapped asset\\n    /// @param policy asset policy\\n    function _checkForeignAssetCode(\\n        uint256 assetDefinitionCode,\\n        address erc20Address,\\n        address sponsor,\\n        AssetPolicy memory policy\\n    ) internal pure {\\n        bytes memory description = _computeAssetDescription(erc20Address, sponsor, policy);\\n        require(\\n            assetDefinitionCode ==\\n                BN254.fromLeBytesModOrder(\\n                    bytes.concat(keccak256(bytes.concat(DOM_SEP_FOREIGN_ASSET, description)))\\n                ),\\n            \\\"Wrong foreign asset code\\\"\\n        );\\n    }\\n\\n    /// @dev Checks if the asset definition code is correctly derived from the internal asset code.\\n    /// @param assetDefinitionCode asset definition code\\n    /// @param internalAssetCode internal asset code\\n    function _checkDomesticAssetCode(uint256 assetDefinitionCode, uint256 internalAssetCode)\\n        internal\\n        pure\\n    {\\n        require(\\n            assetDefinitionCode ==\\n                BN254.fromLeBytesModOrder(\\n                    bytes.concat(\\n                        keccak256(\\n                            bytes.concat(\\n                                DOM_SEP_DOMESTIC_ASSET,\\n                                bytes32(Utils.reverseEndianness(internalAssetCode))\\n                            )\\n                        )\\n                    )\\n                ),\\n            \\\"Wrong domestic asset code\\\"\\n        );\\n    }\\n\\n    /// @dev Compute the asset description from the address of the\\n    /// ERC-20 token and the address of the sponsor.\\n    /// @param erc20Address address of the erc20 token\\n    /// @param sponsor address of the sponsor\\n    /// @param policy asset policy\\n    /// @return The asset description\\n    function _computeAssetDescription(\\n        address erc20Address,\\n        address sponsor,\\n        AssetPolicy memory policy\\n    ) internal pure returns (bytes memory) {\\n        return\\n            bytes.concat(\\n                \\\"EsSCAPE ERC20\\\",\\n                bytes20(erc20Address),\\n                \\\"sponsored by\\\",\\n                bytes20(sponsor),\\n                \\\"policy\\\",\\n                abi.encode(policy)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7042798137db4adf2b98463632bee095f632080197bd8a4f3c2d94875956f198\",\"license\":\"GPL-3.0-or-later\"},\"contracts/CAPE.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Configurable Anonymous Payments for Ethereum\\n/// CAPE provides auditable anonymous payments on Ethereum.\\n/// @author Espresso Systems <hello@espressosys.com>\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"./libraries/AccumulatingArray.sol\\\";\\nimport \\\"./libraries/EdOnBN254.sol\\\";\\nimport \\\"./libraries/RescueLib.sol\\\";\\nimport \\\"./libraries/VerifyingKeys.sol\\\";\\nimport \\\"./interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./interfaces/IRecordsMerkleTree.sol\\\";\\nimport \\\"./AssetRegistry.sol\\\";\\nimport \\\"./RootStore.sol\\\";\\n\\ncontract CAPE is RootStore, AssetRegistry, ReentrancyGuard {\\n    using AccumulatingArray for AccumulatingArray.Data;\\n\\n    mapping(uint256 => bool) public nullifiers;\\n    uint64 public blockHeight;\\n    IPlonkVerifier private _verifier;\\n    IRecordsMerkleTree internal _recordsMerkleTree;\\n    uint256[] public pendingDeposits;\\n\\n    // NOTE: used for faucet in testnet only, will be removed for mainnet\\n    address public deployer;\\n    bool public faucetInitialized;\\n\\n    bytes public constant CAPE_BURN_MAGIC_BYTES = \\\"EsSCAPE burn\\\";\\n    uint256 public constant CAPE_BURN_MAGIC_BYTES_SIZE = 12;\\n    // In order to avoid the contract running out of gas if the queue is too large\\n    // we set the maximum number of pending deposits record commitments to process\\n    // when a new block is submitted. This is a temporary solution.\\n    // See https://github.com/EspressoSystems/cape/issues/400\\n    uint256 public constant MAX_NUM_PENDING_DEPOSIT = 10;\\n\\n    event FaucetInitialized(bytes roBytes);\\n\\n    event BlockCommitted(\\n        uint64 indexed height,\\n        uint256[] depositCommitments,\\n        // What follows is a `CapeBlock` struct split up into fields.\\n        // This may no longer be necessary once\\n        // https://github.com/gakonst/ethers-rs/issues/1220\\n        // is fixed.\\n        bytes minerAddr,\\n        bytes noteTypes,\\n        bytes transferNotes,\\n        bytes mintNotes,\\n        bytes freezeNotes,\\n        bytes burnNotes\\n    );\\n\\n    event Erc20TokensDeposited(bytes roBytes, address erc20TokenAddress, address from);\\n\\n    struct AuditMemo {\\n        EdOnBN254.EdOnBN254Point ephemeralKey;\\n        uint256[] data;\\n    }\\n\\n    enum NoteType {\\n        TRANSFER,\\n        MINT,\\n        FREEZE,\\n        BURN\\n    }\\n\\n    struct TransferNote {\\n        uint256[] inputNullifiers;\\n        uint256[] outputCommitments;\\n        IPlonkVerifier.PlonkProof proof;\\n        AuditMemo auditMemo;\\n        TransferAuxInfo auxInfo;\\n    }\\n\\n    struct BurnNote {\\n        TransferNote transferNote;\\n        RecordOpening recordOpening;\\n    }\\n\\n    struct MintNote {\\n        /// nullifier for the input (i.e. transaction fee record)\\n        uint256 inputNullifier;\\n        /// output commitment for the fee change\\n        uint256 chgComm;\\n        /// output commitment for the minted asset\\n        uint256 mintComm;\\n        /// the amount of the minted asset\\n        uint128 mintAmount;\\n        /// the asset definition of the asset\\n        AssetDefinition mintAssetDef;\\n        /// Internal asset code\\n        uint256 mintInternalAssetCode;\\n        /// the validity proof of this note\\n        IPlonkVerifier.PlonkProof proof;\\n        /// memo for policy compliance specified for the designated auditor\\n        AuditMemo auditMemo;\\n        /// auxiliary information\\n        MintAuxInfo auxInfo;\\n    }\\n\\n    struct FreezeNote {\\n        uint256[] inputNullifiers;\\n        uint256[] outputCommitments;\\n        IPlonkVerifier.PlonkProof proof;\\n        FreezeAuxInfo auxInfo;\\n    }\\n\\n    struct TransferAuxInfo {\\n        uint256 merkleRoot;\\n        uint128 fee;\\n        uint64 validUntil;\\n        EdOnBN254.EdOnBN254Point txnMemoVerKey;\\n        bytes extraProofBoundData;\\n    }\\n\\n    struct MintAuxInfo {\\n        uint256 merkleRoot;\\n        uint128 fee;\\n        EdOnBN254.EdOnBN254Point txnMemoVerKey;\\n    }\\n\\n    struct FreezeAuxInfo {\\n        uint256 merkleRoot;\\n        uint128 fee;\\n        EdOnBN254.EdOnBN254Point txnMemoVerKey;\\n    }\\n\\n    struct RecordOpening {\\n        uint128 amount;\\n        AssetDefinition assetDef;\\n        EdOnBN254.EdOnBN254Point userAddr;\\n        bytes32 encKey;\\n        bool freezeFlag;\\n        uint256 blind;\\n    }\\n\\n    struct CapeBlock {\\n        EdOnBN254.EdOnBN254Point minerAddr;\\n        NoteType[] noteTypes;\\n        TransferNote[] transferNotes;\\n        MintNote[] mintNotes;\\n        FreezeNote[] freezeNotes;\\n        BurnNote[] burnNotes;\\n    }\\n\\n    /// @notice CAPE contract constructor method.\\n    /// @param nRoots number of the most recent roots of the records merkle tree to be stored\\n    /// @param verifierAddr address of the Plonk Verifier contract\\n    constructor(\\n        uint64 nRoots,\\n        address verifierAddr,\\n        address recordsMerkleTreeAddr\\n    ) RootStore(nRoots) {\\n        _verifier = IPlonkVerifier(verifierAddr);\\n        _recordsMerkleTree = IRecordsMerkleTree(recordsMerkleTreeAddr);\\n\\n        // NOTE: used for faucet in testnet only, will be removed for mainnet\\n        deployer = msg.sender;\\n    }\\n\\n    /// @notice Allocate native token faucet to a manager. For testnet only.\\n    /// @param faucetManagerAddress address of public key of faucet manager for CAP native token (testnet only!)\\n    /// @param faucetManagerEncKey public key of faucet manager for CAP native token (testnet only!)\\n    function faucetSetupForTestnet(\\n        EdOnBN254.EdOnBN254Point memory faucetManagerAddress,\\n        bytes32 faucetManagerEncKey\\n    ) external {\\n        // faucet can only be set up once by the manager\\n        require(msg.sender == deployer, \\\"Only invocable by deployer\\\");\\n        require(!faucetInitialized, \\\"Faucet already set up\\\");\\n\\n        // allocate maximum possible amount of native CAP token to faucet manager on testnet\\n        // max amount len is set to 63 bits: https://github.com/EspressoSystems/cap/blob/main/src/constants.rs#L50-L51\\n        RecordOpening memory ro = RecordOpening(\\n            type(uint128).max / 2,\\n            nativeDomesticAsset(),\\n            faucetManagerAddress,\\n            faucetManagerEncKey,\\n            false,\\n            0 // arbitrary blind factor\\n        );\\n        uint256[] memory recordCommitments = new uint256[](1);\\n        recordCommitments[0] = _deriveRecordCommitment(ro);\\n\\n        // Insert the record into record accumulator.\\n        //\\n        // This is a call to our own contract, not an arbitrary external contract.\\n        // slither-disable-next-line reentrancy-no-eth\\n        _recordsMerkleTree.updateRecordsMerkleTree(recordCommitments);\\n        // slither-disable-next-line reentrancy-benign\\n        _addRoot(_recordsMerkleTree.getRootValue());\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit FaucetInitialized(abi.encode(ro));\\n        faucetInitialized = true;\\n    }\\n\\n    /// @notice Publish an array of nullifiers.\\n    /// @dev Requires all nullifiers to be unique and unpublished.\\n    /// @dev A block creator must not submit notes with duplicate nullifiers.\\n    /// @param newNullifiers list of nullifiers to publish\\n    function _publish(uint256[] memory newNullifiers) internal {\\n        for (uint256 j = 0; j < newNullifiers.length; j++) {\\n            _publish(newNullifiers[j]);\\n        }\\n    }\\n\\n    /// @notice Publish a nullifier if it hasn't been published before.\\n    /// @dev Reverts if the nullifier is already published.\\n    /// @param nullifier nullifier to publish\\n    function _publish(uint256 nullifier) internal {\\n        require(!nullifiers[nullifier], \\\"Nullifier already published\\\");\\n        nullifiers[nullifier] = true;\\n    }\\n\\n    /// @notice Wraps ERC-20 tokens into a CAPE asset defined in the record opening.\\n    /// @param ro record opening that will be inserted in the records merkle tree once the deposit is validated\\n    /// @param erc20Address address of the ERC-20 token corresponding to the deposit\\n    function depositErc20(RecordOpening memory ro, address erc20Address) external nonReentrant {\\n        require(isCapeAssetRegistered(ro.assetDef), \\\"Asset definition not registered\\\");\\n        require(lookup(ro.assetDef) == erc20Address, \\\"Wrong ERC20 address\\\");\\n\\n        // We skip the sanity checks mentioned in the rust specification as they are optional.\\n        if (pendingDeposits.length >= MAX_NUM_PENDING_DEPOSIT) {\\n            revert(\\\"Pending deposits queue is full\\\");\\n        }\\n        pendingDeposits.push(_deriveRecordCommitment(ro));\\n\\n        SafeTransferLib.safeTransferFrom(\\n            ERC20(erc20Address),\\n            msg.sender,\\n            address(this),\\n            ro.amount\\n        );\\n\\n        emit Erc20TokensDeposited(abi.encode(ro), erc20Address, msg.sender);\\n    }\\n\\n    /// @notice Submit a new block with extra data to the CAPE contract.\\n    /// @param newBlock block to be processed by the CAPE contract\\n    /// @param {bytes} extraData data to be stored in calldata; this data is ignored by the contract function\\n    function submitCapeBlockWithMemos(\\n        CapeBlock memory newBlock,\\n        bytes calldata /* extraData */\\n    ) external {\\n        submitCapeBlock(newBlock);\\n    }\\n\\n    /// @notice Submit a new block to the CAPE contract.\\n    /// @dev Transactions are validated and the blockchain state is updated. Moreover *BURN* transactions trigger the unwrapping of cape asset records into erc20 tokens.\\n    /// @param newBlock block to be processed by the CAPE contract.\\n    function submitCapeBlock(CapeBlock memory newBlock) public nonReentrant {\\n        AccumulatingArray.Data memory commitments = AccumulatingArray.create(\\n            _computeNumCommitments(newBlock) + pendingDeposits.length\\n        );\\n\\n        uint256 numNotes = newBlock.noteTypes.length;\\n\\n        // Batch verify plonk proofs\\n        IPlonkVerifier.VerifyingKey[] memory vks = new IPlonkVerifier.VerifyingKey[](numNotes);\\n        uint256[][] memory publicInputs = new uint256[][](numNotes);\\n        IPlonkVerifier.PlonkProof[] memory proofs = new IPlonkVerifier.PlonkProof[](numNotes);\\n        bytes[] memory extraMsgs = new bytes[](numNotes);\\n\\n        // Preserve the ordering of the (sub) arrays of notes.\\n        uint256 transferIdx = 0;\\n        uint256 mintIdx = 0;\\n        uint256 freezeIdx = 0;\\n        uint256 burnIdx = 0;\\n\\n        // We require either the block or the pending deposits queue to be non empty. That is we expect the block submission to trigger some change in the blockchain state.\\n        // The reason is that, due to race conditions, it is possible to have the relayer send an empty block while the pending deposits queue is still empty.\\n        // If we do not reject the block, the `blockHeight` contract variable will be incremented, yet the set of records merkle tree roots will be unchanged.\\n        // On the other side, the wallet assumes that the blockHeight is equal to the number of roots and thus, in the case of a block submission that only increments `blockHeight`,\\n        // the wallet and the contract states become inconsistent.\\n        require(!((numNotes == 0) && (pendingDeposits.length == 0)), \\\"Block must be non-empty\\\");\\n\\n        for (uint256 i = 0; i < numNotes; i++) {\\n            NoteType noteType = newBlock.noteTypes[i];\\n\\n            if (noteType == NoteType.TRANSFER) {\\n                TransferNote memory note = newBlock.transferNotes[transferIdx];\\n                transferIdx += 1;\\n\\n                _checkContainsRoot(note.auxInfo.merkleRoot);\\n                _checkTransfer(note);\\n                require(!_isExpired(note), \\\"Expired note\\\");\\n\\n                _publish(note.inputNullifiers);\\n\\n                commitments.add(note.outputCommitments);\\n\\n                (vks[i], publicInputs[i], proofs[i], extraMsgs[i]) = _prepareForProofVerification(\\n                    note\\n                );\\n            } else if (noteType == NoteType.MINT) {\\n                MintNote memory note = newBlock.mintNotes[mintIdx];\\n                mintIdx += 1;\\n\\n                _checkContainsRoot(note.auxInfo.merkleRoot);\\n                _checkDomesticAssetCode(note.mintAssetDef.code, note.mintInternalAssetCode);\\n\\n                _publish(note.inputNullifier);\\n\\n                commitments.add(note.chgComm);\\n                commitments.add(note.mintComm);\\n\\n                (vks[i], publicInputs[i], proofs[i], extraMsgs[i]) = _prepareForProofVerification(\\n                    note\\n                );\\n            } else if (noteType == NoteType.FREEZE) {\\n                FreezeNote memory note = newBlock.freezeNotes[freezeIdx];\\n                freezeIdx += 1;\\n\\n                _checkContainsRoot(note.auxInfo.merkleRoot);\\n\\n                _publish(note.inputNullifiers);\\n\\n                commitments.add(note.outputCommitments);\\n\\n                (vks[i], publicInputs[i], proofs[i], extraMsgs[i]) = _prepareForProofVerification(\\n                    note\\n                );\\n            } else if (noteType == NoteType.BURN) {\\n                BurnNote memory note = newBlock.burnNotes[burnIdx];\\n                burnIdx += 1;\\n\\n                _checkContainsRoot(note.transferNote.auxInfo.merkleRoot);\\n                _checkBurn(note);\\n\\n                _publish(note.transferNote.inputNullifiers);\\n\\n                // Insert all the output commitments to the records merkle tree except from the second one (corresponding to the burned output)\\n                for (uint256 j = 0; j < note.transferNote.outputCommitments.length; j++) {\\n                    if (j != 1) {\\n                        commitments.add(note.transferNote.outputCommitments[j]);\\n                    }\\n                }\\n\\n                (vks[i], publicInputs[i], proofs[i], extraMsgs[i]) = _prepareForProofVerification(\\n                    note\\n                );\\n\\n                // Send the tokens\\n                _handleWithdrawal(note);\\n            } else {\\n                revert(\\\"Cape: unreachable!\\\");\\n            }\\n        }\\n\\n        // Skip the batch plonk verification if the block is empty\\n        if (numNotes > 0) {\\n            require(\\n                _verifier.batchVerify(vks, publicInputs, proofs, extraMsgs),\\n                \\\"Cape: batch verify failed.\\\"\\n            );\\n        }\\n\\n        // Process the pending deposits obtained after calling `depositErc20`\\n        for (uint256 i = 0; i < pendingDeposits.length; i++) {\\n            commitments.add(pendingDeposits[i]);\\n        }\\n\\n        // Only update the merkle tree and add the root if the list of records commitments is non empty\\n        if (!commitments.isEmpty()) {\\n            // This is a call to our own contract, not an arbitrary external contract.\\n            // slither-disable-next-line reentrancy-no-eth\\n            _recordsMerkleTree.updateRecordsMerkleTree(commitments.items);\\n            // slither-disable-next-line reentrancy-benign\\n            _addRoot(_recordsMerkleTree.getRootValue());\\n        }\\n\\n        // In all cases (the block is empty or not), the height is incremented.\\n        blockHeight += 1;\\n\\n        // Inform clients about the new block and the processed deposits.\\n        // slither-disable-next-line reentrancy-events\\n        _emitBlockEvent(newBlock);\\n\\n        // Empty the queue now that the record commitments have been inserted\\n        delete pendingDeposits;\\n    }\\n\\n    /// @notice This function only exists to avoid a stack too deep compilation error.\\n    function _emitBlockEvent(CapeBlock memory newBlock) internal {\\n        emit BlockCommitted(\\n            blockHeight,\\n            pendingDeposits,\\n            abi.encode(newBlock.minerAddr),\\n            abi.encode(newBlock.noteTypes),\\n            abi.encode(newBlock.transferNotes),\\n            abi.encode(newBlock.mintNotes),\\n            abi.encode(newBlock.freezeNotes),\\n            abi.encode(newBlock.burnNotes)\\n        );\\n    }\\n\\n    /// @dev send the ERC-20 tokens equivalent to the asset records being burnt. Recall that the burned record opening is contained inside the note.\\n    /// @param note note of type *BURN*\\n    function _handleWithdrawal(BurnNote memory note) internal {\\n        address ercTokenAddress = lookup(note.recordOpening.assetDef);\\n\\n        // Extract recipient address\\n        address recipientAddress = BytesLib.toAddress(\\n            note.transferNote.auxInfo.extraProofBoundData,\\n            CAPE_BURN_MAGIC_BYTES_SIZE\\n        );\\n        SafeTransferLib.safeTransfer(\\n            ERC20(ercTokenAddress),\\n            recipientAddress,\\n            note.recordOpening.amount\\n        );\\n    }\\n\\n    /// @dev Compute an upper bound on the number of records to be inserted\\n    function _computeNumCommitments(CapeBlock memory newBlock) internal pure returns (uint256) {\\n        // MintNote always has 2 commitments: mint_comm, chg_comm\\n        uint256 numComms = 2 * newBlock.mintNotes.length;\\n        for (uint256 i = 0; i < newBlock.transferNotes.length; i++) {\\n            numComms += newBlock.transferNotes[i].outputCommitments.length;\\n        }\\n        for (uint256 i = 0; i < newBlock.burnNotes.length; i++) {\\n            // Subtract one for the burn record commitment that is not inserted.\\n            // The function _containsBurnRecord checks that there are at least 2 output commitments.\\n            numComms += newBlock.burnNotes[i].transferNote.outputCommitments.length - 1;\\n        }\\n        for (uint256 i = 0; i < newBlock.freezeNotes.length; i++) {\\n            numComms += newBlock.freezeNotes[i].outputCommitments.length;\\n        }\\n        return numComms;\\n    }\\n\\n    /// @dev Verify if a note is of type *TRANSFER*.\\n    /// @param note note which could be of type *TRANSFER* or *BURN*\\n    function _checkTransfer(TransferNote memory note) internal pure {\\n        require(\\n            !_containsBurnPrefix(note.auxInfo.extraProofBoundData),\\n            \\\"Burn prefix in transfer note\\\"\\n        );\\n    }\\n\\n    /// @dev Check if a note has expired.\\n    /// @param note note for which we want to check its timestamp against the current block height\\n    function _isExpired(TransferNote memory note) internal view returns (bool) {\\n        return note.auxInfo.validUntil < blockHeight;\\n    }\\n\\n    /// @dev Check if a burn note is well formed.\\n    /// @param note note of type *BURN*\\n    function _checkBurn(BurnNote memory note) internal view {\\n        bytes memory extra = note.transferNote.auxInfo.extraProofBoundData;\\n        require(_containsBurnPrefix(extra), \\\"Bad burn tag\\\");\\n        require(_containsBurnRecord(note), \\\"Bad record commitment\\\");\\n    }\\n\\n    /// @dev Checks if a sequence of bytes contains hardcoded prefix.\\n    /// @param byteSeq sequence of bytes\\n    function _containsBurnPrefix(bytes memory byteSeq) internal pure returns (bool) {\\n        if (byteSeq.length < CAPE_BURN_MAGIC_BYTES_SIZE) {\\n            return false;\\n        }\\n        return\\n            BytesLib.equal(\\n                BytesLib.slice(byteSeq, 0, CAPE_BURN_MAGIC_BYTES_SIZE),\\n                CAPE_BURN_MAGIC_BYTES\\n            );\\n    }\\n\\n    /// @dev Check if the burned record opening and the record commitment in position 1 are consistent.\\n    /// @param note note of type *BURN*\\n    function _containsBurnRecord(BurnNote memory note) internal view returns (bool) {\\n        if (note.transferNote.outputCommitments.length < 2) {\\n            return false;\\n        }\\n        uint256 rc = _deriveRecordCommitment(note.recordOpening);\\n        return rc == note.transferNote.outputCommitments[1];\\n    }\\n\\n    /// @dev Compute the commitment of a record opening.\\n    /// @param ro record opening\\n    function _deriveRecordCommitment(RecordOpening memory ro) internal view returns (uint256 rc) {\\n        require(ro.assetDef.policy.revealMap < 2**12, \\\"Reveal map exceeds 12 bits\\\");\\n\\n        // No overflow check, only 12 bits in reveal map\\n        uint256 revealMapAndFreezeFlag = 2 *\\n            ro.assetDef.policy.revealMap +\\n            (ro.freezeFlag ? 1 : 0);\\n\\n        // blind in front of rest -> 13 elements, pad to 15 (5 x 3)\\n        uint256[15] memory inputs = [\\n            ro.blind,\\n            ro.amount,\\n            ro.assetDef.code,\\n            ro.userAddr.x,\\n            ro.userAddr.y,\\n            ro.assetDef.policy.auditorPk.x,\\n            ro.assetDef.policy.auditorPk.y,\\n            ro.assetDef.policy.credPk.x,\\n            ro.assetDef.policy.credPk.y,\\n            ro.assetDef.policy.freezerPk.x,\\n            ro.assetDef.policy.freezerPk.y,\\n            revealMapAndFreezeFlag,\\n            ro.assetDef.policy.revealThreshold,\\n            0,\\n            0\\n        ];\\n\\n        return RescueLib.commit(inputs);\\n    }\\n\\n    /// @dev An overloaded function (one for each note type) to prepare all inputs necessary for batch verification of the plonk proof.\\n    /// @param note note of type *TRANSFER*\\n    function _prepareForProofVerification(TransferNote memory note)\\n        internal\\n        view\\n        returns (\\n            IPlonkVerifier.VerifyingKey memory vk,\\n            uint256[] memory publicInput,\\n            IPlonkVerifier.PlonkProof memory proof,\\n            bytes memory transcriptInitMsg\\n        )\\n    {\\n        // load the correct (hardcoded) vk\\n        // slither-disable-next-line calls-loop\\n        vk = VerifyingKeys.getVkById(\\n            VerifyingKeys.getEncodedId(\\n                uint8(NoteType.TRANSFER),\\n                uint8(note.inputNullifiers.length),\\n                uint8(note.outputCommitments.length),\\n                uint8(_recordsMerkleTree.getHeight())\\n            )\\n        );\\n        // prepare public inputs\\n        // 4: root, native_asset_code, valid_until, fee\\n        // 2: audit_memo.ephemeral_key (x and y)\\n        publicInput = new uint256[](\\n            4 +\\n                note.inputNullifiers.length +\\n                note.outputCommitments.length +\\n                2 +\\n                note.auditMemo.data.length\\n        );\\n        publicInput[0] = note.auxInfo.merkleRoot;\\n        publicInput[1] = CAP_NATIVE_ASSET_CODE;\\n        publicInput[2] = note.auxInfo.validUntil;\\n        publicInput[3] = note.auxInfo.fee;\\n        {\\n            uint256 idx = 4;\\n            for (uint256 i = 0; i < note.inputNullifiers.length; i++) {\\n                publicInput[idx + i] = note.inputNullifiers[i];\\n            }\\n            idx += note.inputNullifiers.length;\\n\\n            for (uint256 i = 0; i < note.outputCommitments.length; i++) {\\n                publicInput[idx + i] = note.outputCommitments[i];\\n            }\\n            idx += note.outputCommitments.length;\\n\\n            publicInput[idx] = note.auditMemo.ephemeralKey.x;\\n            publicInput[idx + 1] = note.auditMemo.ephemeralKey.y;\\n            idx += 2;\\n\\n            for (uint256 i = 0; i < note.auditMemo.data.length; i++) {\\n                publicInput[idx + i] = note.auditMemo.data[i];\\n            }\\n        }\\n\\n        // extract out proof\\n        proof = note.proof;\\n\\n        // prepare transcript init messages\\n        transcriptInitMsg = abi.encodePacked(\\n            EdOnBN254.serialize(note.auxInfo.txnMemoVerKey),\\n            note.auxInfo.extraProofBoundData\\n        );\\n    }\\n\\n    /// @dev An overloaded function (one for each note type) to prepare all inputs necessary for batch verification of the plonk proof.\\n    /// @param note note of type *BURN*\\n    function _prepareForProofVerification(BurnNote memory note)\\n        internal\\n        view\\n        returns (\\n            IPlonkVerifier.VerifyingKey memory,\\n            uint256[] memory,\\n            IPlonkVerifier.PlonkProof memory,\\n            bytes memory\\n        )\\n    {\\n        return _prepareForProofVerification(note.transferNote);\\n    }\\n\\n    /// @dev An overloaded function (one for each note type) to prepare all inputs necessary for batch verification of the plonk proof.\\n    /// @param note note of type *MINT*\\n    function _prepareForProofVerification(MintNote memory note)\\n        internal\\n        view\\n        returns (\\n            IPlonkVerifier.VerifyingKey memory vk,\\n            uint256[] memory publicInput,\\n            IPlonkVerifier.PlonkProof memory proof,\\n            bytes memory transcriptInitMsg\\n        )\\n    {\\n        // load the correct (hardcoded) vk\\n        // slither-disable-next-line calls-loop\\n        vk = VerifyingKeys.getVkById(\\n            VerifyingKeys.getEncodedId(\\n                uint8(NoteType.MINT),\\n                1, // num of input\\n                2, // num of output\\n                uint8(_recordsMerkleTree.getHeight())\\n            )\\n        );\\n\\n        // prepare public inputs\\n        // 9: see below; 8: asset policy; rest: audit memo\\n        publicInput = new uint256[](9 + 8 + 2 + note.auditMemo.data.length);\\n        publicInput[0] = note.auxInfo.merkleRoot;\\n        publicInput[1] = CAP_NATIVE_ASSET_CODE;\\n        publicInput[2] = note.inputNullifier;\\n        publicInput[3] = note.auxInfo.fee;\\n        publicInput[4] = note.mintComm;\\n        publicInput[5] = note.chgComm;\\n        publicInput[6] = note.mintAmount;\\n        publicInput[7] = note.mintAssetDef.code;\\n        publicInput[8] = note.mintInternalAssetCode;\\n\\n        publicInput[9] = note.mintAssetDef.policy.revealMap;\\n        publicInput[10] = note.mintAssetDef.policy.auditorPk.x;\\n        publicInput[11] = note.mintAssetDef.policy.auditorPk.y;\\n        publicInput[12] = note.mintAssetDef.policy.credPk.x;\\n        publicInput[13] = note.mintAssetDef.policy.credPk.y;\\n        publicInput[14] = note.mintAssetDef.policy.freezerPk.x;\\n        publicInput[15] = note.mintAssetDef.policy.freezerPk.y;\\n        publicInput[16] = note.mintAssetDef.policy.revealThreshold;\\n\\n        {\\n            publicInput[17] = note.auditMemo.ephemeralKey.x;\\n            publicInput[18] = note.auditMemo.ephemeralKey.y;\\n\\n            uint256 idx = 19;\\n            for (uint256 i = 0; i < note.auditMemo.data.length; i++) {\\n                publicInput[idx + i] = note.auditMemo.data[i];\\n            }\\n        }\\n\\n        // extract out proof\\n        proof = note.proof;\\n\\n        // prepare transcript init messages\\n        transcriptInitMsg = EdOnBN254.serialize(note.auxInfo.txnMemoVerKey);\\n    }\\n\\n    /// @dev An overloaded function (one for each note type) to prepare all inputs necessary for batch verification of the plonk proof.\\n    /// @param note note of type *FREEZE*\\n    function _prepareForProofVerification(FreezeNote memory note)\\n        internal\\n        view\\n        returns (\\n            IPlonkVerifier.VerifyingKey memory vk,\\n            uint256[] memory publicInput,\\n            IPlonkVerifier.PlonkProof memory proof,\\n            bytes memory transcriptInitMsg\\n        )\\n    {\\n        // load the correct (hardcoded) vk\\n        // slither-disable-next-line calls-loop\\n        vk = VerifyingKeys.getVkById(\\n            VerifyingKeys.getEncodedId(\\n                uint8(NoteType.FREEZE),\\n                uint8(note.inputNullifiers.length),\\n                uint8(note.outputCommitments.length),\\n                uint8(_recordsMerkleTree.getHeight())\\n            )\\n        );\\n\\n        // prepare public inputs\\n        publicInput = new uint256[](\\n            3 + note.inputNullifiers.length + note.outputCommitments.length\\n        );\\n        publicInput[0] = note.auxInfo.merkleRoot;\\n        publicInput[1] = CAP_NATIVE_ASSET_CODE;\\n        publicInput[2] = note.auxInfo.fee;\\n        {\\n            uint256 idx = 3;\\n            for (uint256 i = 0; i < note.inputNullifiers.length; i++) {\\n                publicInput[idx + i] = note.inputNullifiers[i];\\n            }\\n            idx += note.inputNullifiers.length;\\n\\n            for (uint256 i = 0; i < note.outputCommitments.length; i++) {\\n                publicInput[idx + i] = note.outputCommitments[i];\\n            }\\n        }\\n\\n        // extract out proof\\n        proof = note.proof;\\n\\n        // prepare transcript init messages\\n        transcriptInitMsg = EdOnBN254.serialize(note.auxInfo.txnMemoVerKey);\\n    }\\n\\n    function getRootValue() external view returns (uint256) {\\n        return _recordsMerkleTree.getRootValue();\\n    }\\n}\\n\",\"keccak256\":\"0x02ff982d7c486dc5ea6ff03fe5bfe7f0b23d6af47fe7882f69eb43aa642e70ac\",\"license\":\"GPL-3.0-or-later\"},\"contracts/RootStore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ncontract RootStore {\\n    uint256[] internal _roots;\\n    mapping(uint256 => bool) internal _rootsMap;\\n    uint64 internal _writeHead;\\n\\n    /// @dev Create a root store.\\n    /// @param nRoots The maximum number of roots to store\\n    constructor(uint64 nRoots) {\\n        // Set up the circular buffer for handling the last N roots\\n        require(nRoots > 1, \\\"A least 2 roots required\\\");\\n\\n        _roots = new uint256[](nRoots);\\n\\n        // Initially all roots are set to zero.\\n        // This value is such that no adversary can extend a branch from this root node.\\n        // See proposition 2, page 48 of the AT-Spec document EspressoSystems/AT-spec@01f71ce\\n    }\\n\\n    /// @dev Add a root value. Only keep the latest nRoots ones.\\n    /// @param newRoot The value of the new root\\n    function _addRoot(uint256 newRoot) internal {\\n        require(!_rootsMap[newRoot], \\\"Root already exists\\\");\\n\\n        // Ensure the root we will \\\"overwrite\\\" is removed.\\n        _rootsMap[_roots[_writeHead]] = false;\\n\\n        _roots[_writeHead] = newRoot;\\n        _rootsMap[newRoot] = true;\\n\\n        _writeHead = (_writeHead + 1) % uint64(_roots.length);\\n    }\\n\\n    /// @dev Is the root value contained in the store?\\n    /// @param root The root value to find\\n    /// @return _ True if the root value is in the store, false otherwise\\n    function _containsRoot(uint256 root) internal view returns (bool) {\\n        return _rootsMap[root];\\n    }\\n\\n    /// @dev Raise an exception if the root is not present in the store.\\n    /// @param root The required root value\\n    function _checkContainsRoot(uint256 root) internal view {\\n        require(_containsRoot(root), \\\"Root not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x41570a2d4808373962efc66b1f0576d01ff0b9c716d9b5ac3f2fc38f25cb4129\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPlonkVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BN254.sol\\\";\\n\\ninterface IPlonkVerifier {\\n    // Flatten out TurboPlonk proof\\n    struct PlonkProof {\\n        // the first 5 are 4 inputs and 1 output wire poly commmitments\\n        // i.e., batch_proof.wires_poly_comms_vec.iter()\\n        // wire0 is 32 bytes which is a pointer to BN254.G1Point\\n        BN254.G1Point wire0; // 0x00\\n        BN254.G1Point wire1; // 0x20\\n        BN254.G1Point wire2; // 0x40\\n        BN254.G1Point wire3; // 0x60\\n        BN254.G1Point wire4; // 0x80\\n        // the next one is the  product permutation poly commitment\\n        // i.e., batch_proof.prod_perm_poly_comms_vec.iter()\\n        BN254.G1Point prodPerm; // 0xA0\\n        // the next 5 are split quotient poly commmitments\\n        // i.e., batch_proof.split_quot_poly_comms\\n        BN254.G1Point split0; // 0xC0\\n        BN254.G1Point split1; // 0xE0\\n        BN254.G1Point split2; // 0x100\\n        BN254.G1Point split3; // 0x120\\n        BN254.G1Point split4; // 0x140\\n        // witness poly com for aggregated opening at `zeta`\\n        // i.e., batch_proof.opening_proof\\n        BN254.G1Point zeta; // 0x160\\n        // witness poly com for shifted opening at `zeta * \\\\omega`\\n        // i.e., batch_proof.shifted_opening_proof\\n        BN254.G1Point zetaOmega; // 0x180\\n        // wire poly eval at `zeta`\\n        uint256 wireEval0; // 0x1A0\\n        uint256 wireEval1; // 0x1C0\\n        uint256 wireEval2; // 0x1E0\\n        uint256 wireEval3; // 0x200\\n        uint256 wireEval4; // 0x220\\n        // extended permutation (sigma) poly eval at `zeta`\\n        // last (sigmaEval4) is saved by Maller Optimization\\n        uint256 sigmaEval0; // 0x240\\n        uint256 sigmaEval1; // 0x260\\n        uint256 sigmaEval2; // 0x280\\n        uint256 sigmaEval3; // 0x2A0\\n        // product permutation poly eval at `zeta * \\\\omega`\\n        uint256 prodPermZetaOmegaEval; // 0x2C0\\n    }\\n\\n    // The verifying key for Plonk proofs.\\n    struct VerifyingKey {\\n        uint256 domainSize; // 0x00\\n        uint256 numInputs; // 0x20\\n        // commitment to extended perm (sigma) poly\\n        BN254.G1Point sigma0; // 0x40\\n        BN254.G1Point sigma1; // 0x60\\n        BN254.G1Point sigma2; // 0x80\\n        BN254.G1Point sigma3; // 0xA0\\n        BN254.G1Point sigma4; // 0xC0\\n        // commitment to selector poly\\n        // first 4 are linear combination selector\\n        BN254.G1Point q1; // 0xE0\\n        BN254.G1Point q2; // 0x100\\n        BN254.G1Point q3; // 0x120\\n        BN254.G1Point q4; // 0x140\\n        // multiplication selector for 1st, 2nd wire\\n        BN254.G1Point qM12; // 0x160\\n        // multiplication selector for 3rd, 4th wire\\n        BN254.G1Point qM34; // 0x180\\n        // output selector\\n        BN254.G1Point qO; // 0x1A0\\n        // constant term selector\\n        BN254.G1Point qC; // 0x1C0\\n        // rescue selector qH1 * w_ai^5\\n        BN254.G1Point qH1; // 0x1E0\\n        // rescue selector qH2 * w_bi^5\\n        BN254.G1Point qH2; // 0x200\\n        // rescue selector qH3 * w_ci^5\\n        BN254.G1Point qH3; // 0x220\\n        // rescue selector qH4 * w_di^5\\n        BN254.G1Point qH4; // 0x240\\n        // elliptic curve selector\\n        BN254.G1Point qEcc; // 0x260\\n    }\\n\\n    /// @dev Batch verify multiple TurboPlonk proofs.\\n    /// @param verifyingKeys An array of verifying keys\\n    /// @param publicInputs A two-dimensional array of public inputs.\\n    /// @param proofs An array of Plonk proofs\\n    /// @param extraTranscriptInitMsgs An array of bytes from\\n    /// transcript initialization messages\\n    /// @return _ A boolean that is true for successful verification, false otherwise\\n    function batchVerify(\\n        VerifyingKey[] memory verifyingKeys,\\n        uint256[][] memory publicInputs,\\n        PlonkProof[] memory proofs,\\n        bytes[] memory extraTranscriptInitMsgs\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x05bacaa9c265b454292a0e68d4746c5c8ae1624459c8ba76248abd513100b8d1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRecordsMerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRecordsMerkleTree {\\n    /// @param elements The list of elements to be appended to the current merkle tree described by the frontier.\\n    function updateRecordsMerkleTree(uint256[] memory elements) external;\\n\\n    /// @notice Returns the root value of the Merkle tree.\\n    function getRootValue() external view returns (uint256);\\n\\n    /// @notice Returns the height of the Merkle tree.\\n    function getHeight() external view returns (uint8);\\n\\n    /// @notice Returns the number of leaves of the Merkle tree.\\n    function getNumLeaves() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x180b3baa88726ac2ab70c037ccb5b8daf024b23d07a70640d9d97c62c9a702a4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/AccumulatingArray.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/// @title AccumulatingArray library\\n/// @dev This library simplifies inserting elements into an array by keeping track\\n///      of the insertion index.\\n\\nlibrary AccumulatingArray {\\n    struct Data {\\n        uint256[] items;\\n        uint256 index;\\n    }\\n\\n    /// @dev Create a new AccumulatingArray\\n    /// @param length the number of items that will be inserted\\n    function create(uint256 length) internal pure returns (Data memory) {\\n        return Data(new uint256[](length), 0);\\n    }\\n\\n    /// @param items the items to accumulate\\n    /// @dev Will revert if items past length are added.\\n    function add(Data memory self, uint256[] memory items) internal pure {\\n        for (uint256 i = 0; i < items.length; i++) {\\n            self.items[i + self.index] = items[i];\\n        }\\n        self.index += items.length;\\n    }\\n\\n    /// @param item the item to accumulate.\\n    /// @dev Will revert if items past length are added.\\n    function add(Data memory self, uint256 item) internal pure {\\n        self.items[self.index] = item;\\n        self.index += 1;\\n    }\\n\\n    function isEmpty(Data memory self) internal pure returns (bool) {\\n        return (self.index == 0);\\n    }\\n}\\n\",\"keccak256\":\"0x3adc9f06696da4710f34d8c6229dbb4e0fc7116b794da5d048af891466a6d3bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/BN254.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n//\\n// Based on:\\n// - Christian Reitwiessner: https://gist.githubusercontent.com/chriseth/f9be9d9391efc5beb9704255a8e2989d/raw/4d0fb90847df1d4e04d507019031888df8372239/snarktest.solidity\\n// - Aztec: https://github.com/AztecProtocol/aztec-2-bug-bounty\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Utils.sol\\\";\\n\\n/// @notice Barreto-Naehrig curve over a 254 bit prime field\\nlibrary BN254 {\\n    // use notation from https://datatracker.ietf.org/doc/draft-irtf-cfrg-pairing-friendly-curves/\\n    //\\n    // Elliptic curve is defined over a prime field GF(p), with embedding degree k.\\n    // Short Weierstrass (SW form) is, for a, b \\\\in GF(p^n) for some natural number n > 0:\\n    //   E: y^2 = x^3 + a * x + b\\n    //\\n    // Pairing is defined over cyclic subgroups G1, G2, both of which are of order r.\\n    // G1 is a subgroup of E(GF(p)), G2 is a subgroup of E(GF(p^k)).\\n    //\\n    // BN family are parameterized curves with well-chosen t,\\n    //   p = 36 * t^4 + 36 * t^3 + 24 * t^2 + 6 * t + 1\\n    //   r = 36 * t^4 + 36 * t^3 + 18 * t^2 + 6 * t + 1\\n    // for some integer t.\\n    // E has the equation:\\n    //   E: y^2 = x^3 + b\\n    // where b is a primitive element of multiplicative group (GF(p))^* of order (p-1).\\n    // A pairing e is defined by taking G1 as a subgroup of E(GF(p)) of order r,\\n    // G2 as a subgroup of E'(GF(p^2)),\\n    // and G_T as a subgroup of a multiplicative group (GF(p^12))^* of order r.\\n    //\\n    // BN254 is defined over a 254-bit prime order p, embedding degree k = 12.\\n    uint256 public constant P_MOD =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    uint256 public constant R_MOD =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    struct G1Point {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    // G2 group element where x \\\\in Fp2 = x0 * z + x1\\n    struct G2Point {\\n        uint256 x0;\\n        uint256 x1;\\n        uint256 y0;\\n        uint256 y1;\\n    }\\n\\n    /// @return the generator of G1\\n    // solhint-disable-next-line func-name-mixedcase\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n\\n    /// @return the generator of G2\\n    // solhint-disable-next-line func-name-mixedcase\\n    function P2() internal pure returns (G2Point memory) {\\n        return\\n            G2Point({\\n                x0: 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2,\\n                x1: 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed,\\n                y0: 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b,\\n                y1: 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa\\n            });\\n    }\\n\\n    /// @dev check if a G1 point is Infinity\\n    /// @notice precompile bn256Add at address(6) takes (0, 0) as Point of Infinity,\\n    /// some crypto libraries (such as arkwork) uses a boolean flag to mark PoI, and\\n    /// just use (0, 1) as affine coordinates (not on curve) to represents PoI.\\n    function isInfinity(G1Point memory point) internal pure returns (bool result) {\\n        assembly {\\n            let x := mload(point)\\n            let y := mload(add(point, 0x20))\\n            result := and(iszero(x), iszero(y))\\n        }\\n    }\\n\\n    /// @return r the negation of p, i.e. p.add(p.negate()) should be zero.\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        if (isInfinity(p)) {\\n            return p;\\n        }\\n        return G1Point(p.x, P_MOD - (p.y % P_MOD));\\n    }\\n\\n    /// @return res = -fr the negation of scalar field element.\\n    function negate(uint256 fr) internal pure returns (uint256 res) {\\n        return R_MOD - (fr % R_MOD);\\n    }\\n\\n    /// @return r the sum of two points of G1\\n    function add(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint256[4] memory input;\\n        input[0] = p1.x;\\n        input[1] = p1.y;\\n        input[2] = p2.x;\\n        input[3] = p2.y;\\n        bool success;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                revert(0, 0)\\n            }\\n        }\\n        require(success, \\\"Bn254: group addition failed!\\\");\\n    }\\n\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.mul(1) and p.add(p) == p.mul(2) for all points p.\\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input;\\n        input[0] = p.x;\\n        input[1] = p.y;\\n        input[2] = s;\\n        bool success;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                revert(0, 0)\\n            }\\n        }\\n        require(success, \\\"Bn254: scalar mul failed!\\\");\\n    }\\n\\n    /// @dev Multi-scalar Mulitiplication (MSM)\\n    /// @return r = \\\\Prod{B_i^s_i} where {s_i} are `scalars` and {B_i} are `bases`\\n    function multiScalarMul(G1Point[] memory bases, uint256[] memory scalars)\\n        internal\\n        view\\n        returns (G1Point memory r)\\n    {\\n        require(scalars.length == bases.length, \\\"MSM error: length does not match\\\");\\n\\n        r = scalarMul(bases[0], scalars[0]);\\n        for (uint256 i = 1; i < scalars.length; i++) {\\n            r = add(r, scalarMul(bases[i], scalars[i]));\\n        }\\n    }\\n\\n    /// @dev Compute f^-1 for f \\\\in Fr scalar field\\n    /// @notice credit: Aztec, Spilsbury Holdings Ltd\\n    function invert(uint256 fr) internal view returns (uint256 output) {\\n        bool success;\\n        uint256 p = R_MOD;\\n        assembly {\\n            let mPtr := mload(0x40)\\n            mstore(mPtr, 0x20)\\n            mstore(add(mPtr, 0x20), 0x20)\\n            mstore(add(mPtr, 0x40), 0x20)\\n            mstore(add(mPtr, 0x60), fr)\\n            mstore(add(mPtr, 0x80), sub(p, 2))\\n            mstore(add(mPtr, 0xa0), p)\\n            success := staticcall(gas(), 0x05, mPtr, 0xc0, 0x00, 0x20)\\n            output := mload(0x00)\\n        }\\n        require(success, \\\"Bn254: pow precompile failed!\\\");\\n    }\\n\\n    /**\\n     * validate the following:\\n     *   x != 0\\n     *   y != 0\\n     *   x < p\\n     *   y < p\\n     *   y^2 = x^3 + 3 mod p\\n     */\\n    /// @dev validate G1 point and check if it is on curve\\n    /// @notice credit: Aztec, Spilsbury Holdings Ltd\\n    function validateG1Point(G1Point memory point) internal pure {\\n        bool isWellFormed;\\n        uint256 p = P_MOD;\\n        assembly {\\n            let x := mload(point)\\n            let y := mload(add(point, 0x20))\\n\\n            isWellFormed := and(\\n                and(and(lt(x, p), lt(y, p)), not(or(iszero(x), iszero(y)))),\\n                eq(mulmod(y, y, p), addmod(mulmod(x, mulmod(x, x, p), p), 3, p))\\n            )\\n        }\\n        require(isWellFormed, \\\"Bn254: invalid G1 point\\\");\\n    }\\n\\n    /// @dev Validate scalar field, revert if invalid (namely if fr > r_mod).\\n    /// @notice Writing this inline instead of calling it might save gas.\\n    function validateScalarField(uint256 fr) internal pure {\\n        bool isValid;\\n        assembly {\\n            isValid := lt(fr, R_MOD)\\n        }\\n        require(isValid, \\\"Bn254: invalid scalar field\\\");\\n    }\\n\\n    /// @dev Evaluate the following pairing product:\\n    /// @dev e(a1, a2).e(-b1, b2) == 1\\n    /// @dev caller needs to ensure that a1, a2, b1 and b2 are within proper group\\n    /// @notice credit: Aztec, Spilsbury Holdings Ltd\\n    function pairingProd2(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2\\n    ) internal view returns (bool) {\\n        uint256 out;\\n        bool success;\\n        assembly {\\n            let mPtr := mload(0x40)\\n            mstore(mPtr, mload(a1))\\n            mstore(add(mPtr, 0x20), mload(add(a1, 0x20)))\\n            mstore(add(mPtr, 0x40), mload(a2))\\n            mstore(add(mPtr, 0x60), mload(add(a2, 0x20)))\\n            mstore(add(mPtr, 0x80), mload(add(a2, 0x40)))\\n            mstore(add(mPtr, 0xa0), mload(add(a2, 0x60)))\\n\\n            mstore(add(mPtr, 0xc0), mload(b1))\\n            mstore(add(mPtr, 0xe0), mload(add(b1, 0x20)))\\n            mstore(add(mPtr, 0x100), mload(b2))\\n            mstore(add(mPtr, 0x120), mload(add(b2, 0x20)))\\n            mstore(add(mPtr, 0x140), mload(add(b2, 0x40)))\\n            mstore(add(mPtr, 0x160), mload(add(b2, 0x60)))\\n            success := staticcall(gas(), 8, mPtr, 0x180, 0x00, 0x20)\\n            out := mload(0x00)\\n        }\\n        require(success, \\\"Bn254: Pairing check failed!\\\");\\n        return (out != 0);\\n    }\\n\\n    function fromLeBytesModOrder(bytes memory leBytes) internal pure returns (uint256 ret) {\\n        for (uint256 i = 0; i < leBytes.length; i++) {\\n            ret = mulmod(ret, 256, R_MOD);\\n            ret = addmod(ret, uint256(uint8(leBytes[leBytes.length - 1 - i])), R_MOD);\\n        }\\n    }\\n\\n    /// @dev Check if y-coordinate of G1 point is negative.\\n    function isYNegative(G1Point memory point) internal pure returns (bool) {\\n        return (point.y << 1) < P_MOD;\\n    }\\n\\n    // @dev Perform a modular exponentiation.\\n    // @return base^exponent (mod modulus)\\n    // This method is ideal for small exponents (~64 bits or less), as it is cheaper than using the pow precompile\\n    // @notice credit: credit: Aztec, Spilsbury Holdings Ltd\\n    function powSmall(\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 modulus\\n    ) internal pure returns (uint256) {\\n        uint256 result = 1;\\n        uint256 input = base;\\n        uint256 count = 1;\\n\\n        assembly {\\n            let endpoint := add(exponent, 0x01)\\n            for {\\n\\n            } lt(count, endpoint) {\\n                count := add(count, count)\\n            } {\\n                if and(exponent, count) {\\n                    result := mulmod(result, input, modulus)\\n                }\\n                input := mulmod(input, input, modulus)\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function g1Serialize(G1Point memory point) internal pure returns (bytes memory) {\\n        uint256 mask = 0;\\n\\n        // Set the 254-th bit to 1 for infinity\\n        // https://docs.rs/ark-serialize/0.3.0/src/ark_serialize/flags.rs.html#117\\n        if (isInfinity(point)) {\\n            mask |= 0x4000000000000000000000000000000000000000000000000000000000000000;\\n        }\\n\\n        // Set the 255-th bit to 1 for positive Y\\n        // https://docs.rs/ark-serialize/0.3.0/src/ark_serialize/flags.rs.html#118\\n        if (!isYNegative(point)) {\\n            mask = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n        }\\n\\n        return abi.encodePacked(Utils.reverseEndianness(point.x | mask));\\n    }\\n\\n    function g1Deserialize(bytes32 input) internal view returns (G1Point memory point) {\\n        uint256 mask = 0x4000000000000000000000000000000000000000000000000000000000000000;\\n        uint256 x = Utils.reverseEndianness(uint256(input));\\n        uint256 y;\\n        bool isQuadraticResidue;\\n        bool isYPositive;\\n        if (x & mask != 0) {\\n            // the 254-th bit == 1 for infinity\\n            x = 0;\\n            y = 0;\\n        } else {\\n            // Set the 255-th bit to 1 for positive Y\\n            mask = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n            isYPositive = (x & mask != 0);\\n            // mask off the first two bits of x\\n            mask = 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            x &= mask;\\n\\n            // solve for y where E: y^2 = x^3 + 3\\n            y = mulmod(x, x, P_MOD);\\n            y = mulmod(y, x, P_MOD);\\n            y = addmod(y, 3, P_MOD);\\n            (isQuadraticResidue, y) = quadraticResidue(y);\\n\\n            require(isQuadraticResidue, \\\"deser fail: not on curve\\\");\\n\\n            if (isYPositive) {\\n                y = P_MOD - y;\\n            }\\n        }\\n\\n        point = G1Point(x, y);\\n    }\\n\\n    function quadraticResidue(uint256 x)\\n        internal\\n        view\\n        returns (bool isQuadraticResidue, uint256 a)\\n    {\\n        bool success;\\n        // e = (p+1)/4\\n        uint256 e = 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52;\\n        uint256 p = P_MOD;\\n\\n        // we have p == 3 mod 4 therefore\\n        // a = x^((p+1)/4)\\n        assembly {\\n            // credit: Aztec\\n            let mPtr := mload(0x40)\\n            mstore(mPtr, 0x20)\\n            mstore(add(mPtr, 0x20), 0x20)\\n            mstore(add(mPtr, 0x40), 0x20)\\n            mstore(add(mPtr, 0x60), x)\\n            mstore(add(mPtr, 0x80), e)\\n            mstore(add(mPtr, 0xa0), p)\\n            success := staticcall(gas(), 0x05, mPtr, 0xc0, 0x00, 0x20)\\n            a := mload(0x00)\\n        }\\n        require(success, \\\"pow precompile call failed!\\\");\\n\\n        // ensure a < p/2\\n        if (a << 1 > p) {\\n            a = p - a;\\n        }\\n\\n        // check if a^2 = x, if not x is not a quadratic residue\\n        e = mulmod(a, a, p);\\n\\n        isQuadraticResidue = (e == x);\\n    }\\n}\\n\",\"keccak256\":\"0x3607d86e6e230526d4cb8f5ae427d9ad04f7f77455f4994ee4f1c6d8d7e829ca\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/EdOnBN254.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/Utils.sol\\\";\\n\\n/// @notice Edward curve on BN254.\\n/// This library only implements a serialization function that is consistent with\\n/// Arkworks' format. It does not support any group operations.\\nlibrary EdOnBN254 {\\n    uint256 public constant P_MOD =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    struct EdOnBN254Point {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    /// @dev Check if y-coordinate of G1 point is negative.\\n    function isYNegative(EdOnBN254Point memory point) internal pure returns (bool) {\\n        return (point.y << 1) < P_MOD;\\n    }\\n\\n    function serialize(EdOnBN254Point memory point) internal pure returns (bytes memory res) {\\n        uint256 mask = 0;\\n        // Edward curve does not have an infinity flag.\\n        // Set the 255-th bit to 1 for positive Y\\n        // See: https://github.com/arkworks-rs/algebra/blob/d6365c3a0724e5d71322fe19cbdb30f979b064c8/serialize/src/flags.rs#L148\\n        if (!EdOnBN254.isYNegative(point)) {\\n            mask = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n        }\\n\\n        return abi.encodePacked(Utils.reverseEndianness(point.x | mask));\\n    }\\n}\\n\",\"keccak256\":\"0x74b010da16219e4a9ab8ce1a2627a97c64ae7b2a515757932cb2a9cdf6e82e4c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Freeze2In2Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Freeze2In2Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 32768)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 7)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                5118137774697846205332813764527928981094534629179826197661885163309718792664\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                21444510867008360096097791654924066970628086592132286765149218644570218218958\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                8803078987858664729272498900762799875194584982758288268215987493230494163132\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                2433303804972293717223914306424233027859258355453999879123493306111951897773\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                3260803333275595200572169884988811547059839215101652317716205725226978273005\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                3613466037895382109608881276133312019690204476510004381563636709063308697093\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                2899439069156777615431510251772750434873724497570948892914993632800602868003\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                8379069052308825781842073463279139505822176676050290986587894691217284563176\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                11732815069861807091165298838511758216456754114248634732985660813617441774658\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                13166648630773672378735632573860809427570624939066078822309995911184719468349\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                3491113372305405096734724369052497193940883294098266073462122391919346338715\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                9827940866231584614489847721346069816554104560301469101889136447541239075558\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                13435736629650136340196094187820825115318808951343660439499146542480924445056\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                17982003639419860944219119425071532203644939147988825284644182004036282633420\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                9420441314344923881108805693844267870391289724837370305813596950535269618889\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                14052028114719021167053334693322209909986772869796949309216011765205181071250\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                5993794253539477186956400554691260472169114800994727061541419240125118730670\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                7932960467420473760327919608797843731121974235494949218022535850994096308221\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                20429406452243707916630058273965650451352739230543746812138739882954609124362\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                19692763177526054221606086118119451355223254880919552106296824049356634107628\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                5116116081275540865026368436909879211124168610156815899416152073819842308833\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                19842614482623746480218449373220727139999815807703100436601033251034509288020\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                3222495709067365879961349438698872943831082393186134710609177690951286365439\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                3703532585269560394637679600890000571417416525562741673639173852507841008896\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                14390471925844384916287376853753782482889671388409569687933776522892272411453\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                12261059506574689542871751331715340905672203590996080541963527436628201655551\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                212133813390818941086614328570019936880884093617125797928913969643819686094\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                2058275687345409085609950154451527352761528547310163982911053914079075244754\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                7507728187668840967683000771945777493711131652056583548804845913578647015848\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                15764897865018924692970368330703479768257677759902236501992745661340099646248\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                18302496468173370667823199324779836313672317342261283918121073083547306893947\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                8286815911028648157724790867291052312955947067988434001008620797971639607610\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                3470304694844212768511296992238419575123994956442939632524758781128057967608\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                9660892985889164184033149081062412611630238705975373538019042544308335432760\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                2964316839877400858567376484261923751031240259689039666960763176068018735519\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                12811532772714855857084788747474913882317963037829729036129619334772557515102\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaed0ac1a38ac4b0efd28b720b24fe33648f5e74105f8edfcb965b48c32453edf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Freeze3In3Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Freeze3In3Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 32768)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 9)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                13960731824189571867091334541157339805012676983241098249236778497915465352053\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                15957967148909612161116218663566087497068811688498797226467515095325657152045\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                10072587287838607559866316765624459623039578259829899225485734337870604479821\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                15609102652788964903340031795269302405421393375766454476378251576322947285858\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                6565707169634610873662073730120423414251877113110818166564470784428289496576\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                9611712776953584296612678707999788907754017999002246476393974258810867124564\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                19122400063214294010991425447556532201595762243736666161415050184531098654161\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                8531074110951311734071734321378003618052738734286317677359289798683215129985\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                18914674706112982859579196036464470962561796494057486369943014188445892675591\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                8521550178820292984099911306615540388090622911114862049753515592863829430736\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                14630335835391046544786473024276900306274085179180854494149987003151236405693\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                11927636740621831793456799535735389934490350641107279163802406976389995490906\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                12724914112829888521503996001370933887413324349676112061904353298191125761834\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                3433370683786676509006167821257247081483834358490691629467376279251656650897\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                9566744544381523978155846140753126684369534823789897373672815695046810310988\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                260017699035964770662690666115311602214922546306804012310168827438556483441\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                18742890127040989288898023133652949889864689947035150783791742574000686319400\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                18749161983189150319356152659011703669863797011859087161475368338926038180308\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                20773233313791930222139945008080890514898946888819625041024291924369611870607\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                13521724424975535658347353167027580945107539483287924982357298371687877483981\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                10660982607928179139814177842882617778440401746692506684983260589289268170379\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                15139413484465466645149010003574654339361200137557967877891360282092282891685\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                17250558007005834955604250406579207360748810924758511953913092810009135851470\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                11258418978437321501318046240697776859180107275977030400553604411488978149668\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                18952078950487788846193130112459018587473354670050028821020889375362878213321\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                17193026626593699161155564126784943150078109362562131961513990003707313130311\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                14543481681504505345294846715453463092188884601462120536722150134676588633429\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                18051927297986484527611703191585266713528321784715802343699150271856051244721\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                17183091890960203175777065490726876011944304977299231686457191186480347944964\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                4490401529426574565331238171714181866458606184922225399124187058005801778892\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                1221754396433704762941109064372027557900417150628742839724350141274324105531\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                5852202975250895807153833762470523277935452126865915206223172229093142057204\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                15942219407079940317108327336758085920828255563342347502490598820248118460133\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                13932908789216121516788648116401360726086794781411868046768741292235436938527\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                11253921189643581015308547816247612243572238063440388125238308675751100437670\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                21538818198962061056994656088458979220103547193654086011201760604068846580076\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd07fbe21dbdc1be9a602fc27b2ad4cbcecab74f4ff763ac190fb7be09d84d83\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Mint1In2Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Mint1In2Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 16384)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 22)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                18715857233450097233566665862469612667705408112918632327151254517366615510853\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                12056659507165533739511169991607046566607546589228993432633519678105063191994\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                14824195002671574468331715635494727121571793218927771429557442195822888294112\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                15545363005844852395434066542267547241977074468438704526560481952507920680442\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                12730937992652390663908670084945912580250489721157445258662047611384656062589\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                13922972325643955705903067190275250069235823502347080251607855678412413832655\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                11205515283341717493374802581094446196264159623530455592177314841729924213298\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                21626228139140341994554265888140425084500331880890693761295353772893134873176\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                1297892505212470170669591175924901147071008882331974691087297632739019966869\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                5046998337256619649328073625306172605427225136111531257681027197976756517579\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                3416126502361838053757816729968531801453964981226124461039874315717193603949\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                13457539169423794765649307630863376252412201646715715024708233511728175887361\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                14560725448400229197269899568322480538530865768296597131421754928016376186765\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                948706310326485520368947730671484733882983133515374382612890953953178516965\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                3629576662585230443325226017156907801568659344982452092584030101519414013585\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                11755059153403672321764085695058203755528587063932979109812536973510125660021\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                11004655709419206490244680738164512138236779409731663166100876015592834374329\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                3075086625849477481019461602494583874758896233088021555313650923393327170396\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                5116214943488395672472205024247672892505731883467355177124324350502474270399\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                5862627121952215177093377764664762757373132220173512585597211838016077936314\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                17591159830764396623974345916017368127032492198578190405514161605820133619635\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                21823861194811124564815272373053730365073236057851878678286985577859771922838\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                4270340305067371269951830198578603793146745643909898988425564374444309637164\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                3429516859933338020020014748205944416226065682096817012737681215798779959358\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                18140449432973717159678873762584078749849242918610972566667541337332136871548\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                9496973080403650076452512345486781056144944295333639818676842964799046293494\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                2679601553769052076036509170798838073426403353317218807312666276919478214029\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                8104020893469546307958011379600482565107943832349081304458473817724197756534\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                15359849857211682094089890949757251089555853826462724721381029431330976452771\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                16491566299722544741678927866350154870498939946959249271831955257228312538659\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                12100931690223724084472313998885551549102209045806672061992493151022394323721\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                789632069622495739311692844331711309820973570859008137449744966665497183364\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                9372499437356245507830218065264333778849228240985893278867565670067559001476\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                5071314442263159884139201702429590502916613589463313571011317767821015131114\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                13714688610643446356217590887080562811494820054657712165894734861828853586333\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                1823119861575201921550763026703044012616621870847156108104965194178825195245\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd67c9657c6f07e963aa52abdf8596aec671a8f7d3a0a7c8b3587941a3d4ab01\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/RescueLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary RescueLib {\\n    /// The constants are obtained from the Sage script\\n    /// https://github.com/EspressoSystems/Marvellous/blob/fcd4c41672f485ac2f62526bc87a16789d4d0459/rescue254.sage\\n\\n    // These constants are no longer used, left here for readability.\\n    // uint256 private constant _N_ROUNDS = 12;\\n    // uint256 private constant _STATE_SIZE = 4;\\n    // uint256 private constant _SCHEDULED_KEY_SIZE = (2 * _N_ROUNDS + 1) * _STATE_SIZE;\\n    // uint256 private constant _ALPHA = 5;\\n\\n    // Obtained by running KeyScheduling([0,0,0,0]). See Algorithm 2 of AT specification document.\\n\\n    uint256 private constant _PRIME =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    uint256 private constant _ALPHA_INV =\\n        17510594297471420177797124596205820070838691520332827474958563349260646796493;\\n\\n    // MDS is hardcoded\\n    function _linearOp(\\n        uint256 s0,\\n        uint256 s1,\\n        uint256 s2,\\n        uint256 s3\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // Matrix multiplication\\n        unchecked {\\n            return (\\n                mulmod(\\n                    21888242871839275222246405745257275088548364400416034343698204186575808479992,\\n                    s0,\\n                    _PRIME\\n                ) +\\n                    mulmod(\\n                        21888242871839275222246405745257275088548364400416034343698204186575806058117,\\n                        s1,\\n                        _PRIME\\n                    ) +\\n                    mulmod(\\n                        21888242871839275222246405745257275088548364400416034343698204186575491214367,\\n                        s2,\\n                        _PRIME\\n                    ) +\\n                    mulmod(\\n                        21888242871839275222246405745257275088548364400416034343698204186535831058117,\\n                        s3,\\n                        _PRIME\\n                    ),\\n                mulmod(19500, s0, _PRIME) +\\n                    mulmod(3026375, s1, _PRIME) +\\n                    mulmod(393529500, s2, _PRIME) +\\n                    mulmod(49574560750, s3, _PRIME),\\n                mulmod(\\n                    21888242871839275222246405745257275088548364400416034343698204186575808491587,\\n                    s0,\\n                    _PRIME\\n                ) +\\n                    mulmod(\\n                        21888242871839275222246405745257275088548364400416034343698204186575807886437,\\n                        s1,\\n                        _PRIME\\n                    ) +\\n                    mulmod(\\n                        21888242871839275222246405745257275088548364400416034343698204186575729688812,\\n                        s2,\\n                        _PRIME\\n                    ) +\\n                    mulmod(\\n                        21888242871839275222246405745257275088548364400416034343698204186565891044437,\\n                        s3,\\n                        _PRIME\\n                    ),\\n                mulmod(156, s0, _PRIME) +\\n                    mulmod(20306, s1, _PRIME) +\\n                    mulmod(2558556, s2, _PRIME) +\\n                    mulmod(320327931, s3, _PRIME)\\n            );\\n        }\\n    }\\n\\n    function _expAlphaInv4Setup(uint256[6] memory scratch) private pure {\\n        assembly {\\n            let p := scratch\\n            mstore(p, 0x20) // Length of Base\\n            mstore(add(p, 0x20), 0x20) // Length of Exponent\\n            mstore(add(p, 0x40), 0x20) // Length of Modulus\\n            mstore(add(p, 0x80), _ALPHA_INV) // Exponent\\n            mstore(add(p, 0xa0), _PRIME) // Modulus\\n        }\\n    }\\n\\n    function _expAlphaInv4(\\n        uint256[6] memory scratch,\\n        uint256 s0,\\n        uint256 s1,\\n        uint256 s2,\\n        uint256 s3\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 o0,\\n            uint256 o1,\\n            uint256 o2,\\n            uint256 o3\\n        )\\n    {\\n        assembly {\\n            // define pointer\\n            let p := scratch\\n            let basep := add(p, 0x60)\\n            mstore(basep, s0) // Base\\n            // store data assembly-favouring ways\\n            pop(staticcall(sub(gas(), 2000), 0x05, p, 0xc0, basep, 0x20))\\n            // data\\n            o0 := mload(basep)\\n            mstore(basep, s1) // Base\\n            pop(staticcall(sub(gas(), 2000), 0x05, p, 0xc0, basep, 0x20))\\n            // data\\n            o1 := mload(basep)\\n            mstore(basep, s2) // Base\\n            pop(staticcall(sub(gas(), 2000), 0x05, p, 0xc0, basep, 0x20))\\n            // data\\n            o2 := mload(basep)\\n            mstore(basep, s3) // Base\\n            pop(staticcall(sub(gas(), 2000), 0x05, p, 0xc0, basep, 0x20))\\n            // data\\n            o3 := mload(basep)\\n        }\\n    }\\n\\n    // Computes the Rescue permutation on some input\\n    // Recall that the scheduled key is precomputed in our case\\n    // @param input input for the permutation\\n    // @return permutation output\\n    function perm(\\n        // slither-disable-next-line write-after-write\\n        uint256 s0,\\n        // slither-disable-next-line write-after-write\\n        uint256 s1,\\n        // slither-disable-next-line write-after-write\\n        uint256 s2,\\n        // slither-disable-next-line write-after-write\\n        uint256 s3\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // slither-disable-next-line uninitialized-local\\n        uint256[6] memory alphaInvScratch;\\n\\n        _expAlphaInv4Setup(alphaInvScratch);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 14613516837064033601098425266946467918409544647446217386229959902054563533267,\\n                s1 + 376600575581954944138907282479272751264978206975465380433764825531344567663,\\n                s2 + 7549886658634274343394883631367643327196152481472281919735617268044202589860,\\n                s3 + 3682071510138521345600424597536598375718773365536872232193107639375194756918\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                18657517374128716281071590782771170166993445602755371021955596036781411817786;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                7833794394096838639430144230563403530989402760602204539559270044687522640191;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                21303828694647266539931030987057572024333442749881970102454081226349775826204;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                10601447988834057856019990466870413629636256450824419416829818546423193802418;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 3394657260998945409283098835682964352503279447198495330506177586645995289229,\\n                s1 + 18437084083724939316390841967750487133622937044030373241106776324730657101302,\\n                s2 + 9281739916935170266925270432337475828741505406943764438550188362765269530037,\\n                s3 + 7363758719535652813463843693256839865026387361836644774317493432208443086206\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                307094088106440279963968943984309088038734274328527845883669678290790702381;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                20802277384865839022876847241719852837518994021170013346790603773477912819001;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                19754579269464973651593381036132218829220609572271224048608091445854164824042;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                3618840933841571232310395486452077846249117988789467996234635426899783130819;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 2604166168648013711791424714498680546427073388134923208733633668316805639713,\\n                s1 + 21355705619901626246699129842094174300693414345856149669339147704587730744579,\\n                s2 + 492957643799044929042114590851019953669919577182050726596188173945730031352,\\n                s3 + 8495959434717951575638107349559891417392372124707619959558593515759091841138\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                15608173629791582453867933160400609222904457931922627396107815347244961625587;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                16346164988481725869223011419855264063160651334419415042919928342589111681923;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                21085652277104054699752179865196164165969290053517659864117475352262716334100;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                20640310021063232205677193759981403045043444605175178332133134865746039279935;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 6015589261538006311719125697023069952804098656652050863009463360598997670240,\\n                s1 + 12498423882721726012743791752811798719201859023192663855805526312393108407357,\\n                s2 + 10785527781711732350693172404486938622378708235957779975342240483505724965040,\\n                s3 + 5563181134859229953817163002660048854420912281911747312557025480927280392569\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                4585980485870975597083581718044393941512074846925247225127276913719050121968;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                8135760428078872176830812746579993820254685977237403304445687861806698035222;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                4525715538433244696411192727226186804883202134636681498489663161593606654720;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                2537497100749435007113677475828631400227339157221711397900070636998427379023;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 6957758175844522415482704083077249782181516476067074624906502033584870962925,\\n                s1 + 17134288156316028142861248367413235848595762718317063354217292516610545487813,\\n                s2 + 20912428573104312239411321877435657586184425249645076131891636094671938892815,\\n                s3 + 16000236205755938926858829908701623009580043315308207671921283074116709575629\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                10226182617544046880850643054874064693998595520540061157646952229134207239372;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                18584346134948015676264599354709457865255277240606855245909703396343731224626;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                9263628039314899758000383385773954136696958567872461042004915206775147151562;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                21095966719856094705113273596585696209808876361583941931684481364905087347856;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 2671157351815122058649197205531097090514563992249109660044882868649840700911,\\n                s1 + 19371695134219415702961622134896564229962454573253508904477489696588594622079,\\n                s2 + 5458968308231210904289987830881528056037123818964633914555287871152343390175,\\n                s3 + 7336332584551233792026746889434554547883125466404119632794862500961953384162\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                10351436748086126474964482623536554036637945319698748519226181145454116702488;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                10588209357420186457766745724579739104572139534486480334142455690083813419064;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                14330277147584936710957102218096795520430543834717433464500965846826655802131;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                20752197679372238381408962682213349118865256502118746003818603260257076802028;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 19390446529582160674621825412345750405397926216690583196542690617266028463414,\\n                s1 + 4169994013656329171830126793466321040216273832271989491631696813297571003664,\\n                s2 + 3014817248268674641565961681956715664833306954478820029563459099892548946802,\\n                s3 + 14285412497877984113655094566695921704826935980354186365694472961163628072901\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                16224484149774307577146165975762490690838415946665379067259822320752729067513;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                5404416528124718330316441408560295270695591369912905197499507811036327404407;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                20127204244332635127213425090893250761286848618448128307344971109698523903374;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                14939477686176063572999014162186372798386193194442661892600584389296609365740;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 183740587182448242823071506013879595265109215202349952517434740768878294134,\\n                s1 + 15366166801397358994305040367078329374182896694582870542425225835844885654667,\\n                s2 + 10066796014802701613007252979619633540090232697942390802486559078446300507813,\\n                s3 + 4824035239925904398047276123907644574421550988870123756876333092498925242854\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                5526416022516734657935645023952329824887761902324086126076396040056459740202;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                18157816292703983306114736850721419851645159304249709756659476015594698876611;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                767446206481623130855439732549764381286210118638028499466788453347759203223;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                16303412231051555792435190427637047658258796056382698277687500021321460387129;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 15475465085113677237835653765189267963435264152924949727326000496982746660612,\\n                s1 + 14574823710073720047190393602502575509282844662732045439760066078137662816054,\\n                s2 + 13746490178929963947720756220409862158443939172096620003896874772477437733602,\\n                s3 + 13804898145881881347835367366352189037341704254740510664318597456840481739975\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                3523599105403569319090449327691358425990456728660349400211678603795116364226;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                8632053982708637954870974502506145434219829622278773822242070316888003350278;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                20293222318844554840191640739970825558851264905959070636369796127300969629060;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                7583204376683983181255811699503668584283525661852773339144064901897953897564;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 7562572155566079175343789986900217168516831778275127159068657756836798778249,\\n                s1 + 12689811910161401007144285031988539999455902164332232460061366402869461973371,\\n                s2 + 21878400680687418538050108788381481970431106443696421074205107984690362920637,\\n                s3 + 3428721187625124675258692786364137915132424621324969246210899039774126165479\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                2552744099402346352193097862110515290335034445517764751557635302899937367219;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                13706727374402840004346872704605212996406886221231239230397976011930486183550;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                19786308443934570499119114884492461847023732197118902978413499381102456961966;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                11767081169862697956461405434786280425108140215784390008330611807075539962898;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 1273319740931699377003430019539548781935202579355152343831464213279794249000,\\n                s1 + 20225620070386241931202098463018472034137960205721651875253423327929063224115,\\n                s2 + 13107884970924459680133954992354588464904218518440707039430314610799573960437,\\n                s3 + 10574066469653966216567896842413898230152427846140046825523989742590727910280\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                21386271527766270535632132320974945129946865648321206442664310421414128279311;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                15743262855527118149527268525857865250723531109306484598629175225221686341453;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                16251140915157602891864152518526119259367827194524273940185283798897653655734;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                5420158299017134702074915284768041702367316125403978919545323705661634647751;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            (s0, s1, s2, s3) = _expAlphaInv4(\\n                alphaInvScratch,\\n                s0 + 14555572526833606349832007897859411042036463045080050783981107823326880950231,\\n                s1 + 15234942318869557310939446038663331226792664588406507247341043508129993934298,\\n                s2 + 19560004467494472556570844694553210033340577742756929194362924850760034377042,\\n                s3 + 21851693551359717578445799046408060941161959589978077352548456186528047792150\\n            );\\n        }\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            uint256 tmp = s0 +\\n                19076469206110044175016166349949136119962165667268661130584159239385341119621;\\n            s0 = mulmod(tmp, tmp, _PRIME);\\n            s0 = mulmod(s0, s0, _PRIME);\\n            s0 = mulmod(s0, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s1 +\\n                19132104531774396501521959463346904008488403861940301898725725957519076019017;\\n            s1 = mulmod(tmp, tmp, _PRIME);\\n            s1 = mulmod(s1, s1, _PRIME);\\n            s1 = mulmod(s1, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s2 +\\n                6606159937109409334959297158878571243749055026127553188405933692223704734040;\\n            s2 = mulmod(tmp, tmp, _PRIME);\\n            s2 = mulmod(s2, s2, _PRIME);\\n            s2 = mulmod(s2, tmp, _PRIME);\\n        }\\n        unchecked {\\n            uint256 tmp = s3 +\\n                13442678592538344046772867528443594004918096722084104155946229264098946917042;\\n            s3 = mulmod(tmp, tmp, _PRIME);\\n            s3 = mulmod(s3, s3, _PRIME);\\n            s3 = mulmod(s3, tmp, _PRIME);\\n        }\\n\\n        (s0, s1, s2, s3) = _linearOp(s0, s1, s2, s3);\\n\\n        unchecked {\\n            return (\\n                s0 + 11975757366382164299373991853632416786161357061467425182041988114491638264212,\\n                s1 + 10571372363668414752587603575617060708758897046929321941050113299303675014148,\\n                s2 + 5405426474713644587066466463343175633538103521677501186003868914920014287031,\\n                s3 + 18665277628144856329335676361545218245401014824195451740181902217370165017984\\n            );\\n        }\\n    }\\n\\n    // Computes the hash of three field elements and returns a single element\\n    // In our case the rate is 3 and the capacity is 1\\n    // This hash function the one used in the Records Merkle tree.\\n    // @param a first element\\n    // @param b second element\\n    // @param c third element\\n    // @return the first element of the Rescue state\\n    function hash(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) public view returns (uint256 o) {\\n        (o, a, b, c) = perm(a % _PRIME, b % _PRIME, c % _PRIME, 0);\\n        o %= _PRIME;\\n    }\\n\\n    function checkBounded(uint256[15] memory inputs) internal pure {\\n        for (uint256 i = 0; i < inputs.length; ++i) {\\n            require(inputs[i] < _PRIME, \\\"inputs must be below _PRIME\\\");\\n        }\\n    }\\n\\n    // This function is external to ensure that the solidity compiler generates\\n    // a separate library contract. This is required to reduce the size of the\\n    // CAPE contract.\\n    function commit(uint256[15] memory inputs) external view returns (uint256) {\\n        checkBounded(inputs);\\n\\n        uint256 a;\\n        uint256 b;\\n        uint256 c;\\n        uint256 d;\\n\\n        for (uint256 i = 0; i < 5; i++) {\\n            unchecked {\\n                (a, b, c, d) = perm(\\n                    (a + inputs[3 * i + 0]) % _PRIME,\\n                    (b + inputs[3 * i + 1]) % _PRIME,\\n                    (c + inputs[3 * i + 2]) % _PRIME,\\n                    d\\n                );\\n\\n                (a, b, c, d) = (a % _PRIME, b % _PRIME, c % _PRIME, d % _PRIME);\\n            }\\n        }\\n\\n        return a;\\n    }\\n}\\n\",\"keccak256\":\"0x5d852913c47167b7e785dadec2913f3a468e3279af846ef0d52de3ce106dd274\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Transfer1In2Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Transfer1In2Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 32768)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 14)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                6451930258054036397165544866644311272180786776693649154889113517935138989324\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                15824498031290932840309269587075035510403426361110328301862825820425402064333\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                16567945706248183214406921539823721483157024902030706018155219832331943151521\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                14506648136467119081958160505454685757895812203258866143116417397069305366174\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                16908805137848644970538829805684573945187052776129406508429516788865993229946\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                13370902069114408370627021011309095482019563080650295231694581484651030202227\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                11385428061273012554614867838291301202096376350855764984558871671579621291507\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                18938480909096008246537758317235530495583632544865390355616243879170108311037\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                7250836052061444170671162428779548720754588271620290284029438087321333136859\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                9774478170511284714380468511107372909275276960243638784016266344709965751507\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                2164661706057106993702119971892524764909406587180616475316536801798272746351\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                7993083931046493938644389635874939373576598203553188654440768055247347522377\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                17875027092910639802264620931724329796279457509298747494670931666396434012177\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                12276180841132702377773827582398158204508221552359644390751974783173207949116\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                6923045257159434019788850173231395134054684072354814328515094196682490129996\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                10297389981574891432841377306749459633586002482842974197875786670892058142179\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                13566140293342467207563198706820126266175769850278450464476746689910443370750\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                4337013617009771491102950113766314929630396941539697665107262932887431611820\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                19545356440018631139549838928930231615194677294299230322568967706100221743452\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                3905268653568739552774781017975590296651581349403516285498718251384231803637\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                3633513776458243190609011598510312470369153119749343878250857605063953894824\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                10348854780537633653024803962077925757963724802390956695225993897601858375068\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                10515123958235902109894586452633863486298290064878690665500349352367945576213\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                20835963785046732330293306231553834880816750576829504030205004088050809531737\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                10349250837084111252673833558497412287345352572732754388450385078539897036072\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                1295954576893766564415821998145161393110346678014886452040838119568563355556\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                18595738613642013642528283665640490180800278502934355301953048187579782737773\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                5708601727819525671780050950771464619626673626810479676243974296923430650735\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                8105844768413379370590866345497514518639783589779028631263566798017351944465\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                13767799708582015119198203890136804463714948257729839866946279972890684141171\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                13976995316216184532948677497270469464100744949177652840098916826286666391978\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                8782060747227562892357029272916715317651514559557103332761644499318601665300\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                10423258206189675762927713311069351374538317153673220039972782365668263479097\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                12712089727236847935392559371166622501626155101609755726562266635070650647609\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                3447947975392962233948092031223758925923495365282112464857270024948603045088\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                4655198050073279486560411245172865913095816956325221266986314415391129730949\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b675fc4b56b1f9b2580aef2ed84f6823fb8a180a637b97ff4d4603941be6d77\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Transfer2In2Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Transfer2In2Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 32768)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 27)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                2353344940323935826134936223947938042521909475033774928828281661731550798722\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                9746655158250922067275109215926891774244956160343543537816404835253168644024\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                15455409296542685326830249024223724266624290984578410657713086954481835262616\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                18311379816054123251097409624258299432408683566103718315014121691958807960547\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                3595102568308999621710931895728700858137670894580826466196432246884451756647\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                5971868016111020985417776938700261612639243638290968867440360355753182506016\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                12443289603239702012200478229424802817855243081906319312702825218898138895946\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                14108881420049829870828878537593066975275378607590487898362908473190089969939\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                19679657199741651524390089978450662678686454680964744364368691879627016432652\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                17114067594856558864780849616452660298251042000563020846487894545389438664806\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                4521205613646422234630873762189179209607994647697100090154823061235920789353\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                16106449496625400183304424755719536524421029289605758534728292280016648447637\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                15558337488326969806891656016031810341177100586194811207644366322955582958290\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                154404024660163916069895563430486111291743096749375581648108814279740019496\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                10968315091130697826739702003431871061194509005508422925553623050382577326217\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                15427520064071248215056685014173235486104450904391795026852773491856938894709\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                18552120566932429867086353275996329695634259700395564758868503989836119743976\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                3758067104786429430903075307629079520236919298153864746942709833835554967358\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                15572105585408879365916525794377657194208962207139936775774251314043834098564\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                6020958592977720912767721649577520866900127639444801108025166566775601659967\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                7222736374399006211510699304087942059126683193629769887877014686905908945806\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                3206829195840321731462512861208486643839466222481973961857037286401683735687\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                3354591448826521438380040598853232839565248677422944332090180952953080366288\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                19963668090281374431317017250026510351550118984869870738585126468447913244591\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                17974807300702948996049252322259229942746003444136224778640009295566243156501\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                12052046477897583522878740699736101759681160588792932192885758224246430725626\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                4921034593166626300651198249205635549101612701433540517476055976860959484949\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                10185405862489710856496932329182422458788356942668474473592359869600739434412\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                5878093886505576171449048465070377785955067968838740459103515014923390639639\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                15259888626953734049577795735967576333281508824947666542918638019623811781546\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                19643669610230135658961129468905806322162637394453939877922249528939594418232\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                12224852444220822793589818921506014057813793178254991680570188956045824616826\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                6641963433101155753834035944397107424954075034582038862756599997819459513127\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                3589782713125700501109156506560851754947305163593203470270968608024453926281\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                12330486534063835148740124350008103247243211222952306312071501975705307117092\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                20509504091296584456523257770792088853619865130173628006197630419037120651742\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x551bf64b658e5842e7e3ab18d5b86e5db9cd36682613d189d02f053e4d13a5bb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Transfer2In3Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Transfer2In3Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 32768)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 32)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                11238918059962060895836660665905685183821438171673788872298187887301460117949\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                10312536098428436059770058647883007948230826032311055958980103002216444398029\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                3069296210454062532812049058888182398466997742713116483712055777740542557095\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                10585452901889142818220136732592206035573929406563129602198941778025261934559\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                49796010413150322443747223871067686918728570624660232645490911700120682624\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                19418979289570937603858876101332413214999751685423780259104815571219376501897\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                5017549683124968830897329522528615084825569869584518140023215913256996665369\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                6904459746270415738591583761210331008369254540754508554401155557939093240173\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                15294346261666962115813163162624127728984137808463913539428567756274357657589\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                6335459220235140110171052568798094575702073047123843498885605762024671566976\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                3447729854865352811909348476580581256116229886577313169808953699321178547567\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                10391923178665150678480226437763860904879593811452327022884721625331046561649\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                21331037483834702908326522885638199264097608653827628146912836859219217391521\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                17700979571500030343918100715185217716266526246917146097813330984808052588149\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                19231315187566819499805706567670055518295048760424962411545826184537652443122\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                1786951957014031658307434161704132339929023647859863721152324287915947831283\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                891318259297166657950777135402426115367536796891436125685210585889035809375\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                19080042747384460176894767057995469942920956949014313980914237214240134307208\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                8600864573298799022763786653218006387353791810267845686055695121259061041328\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                16693779427169671344028720673356223282089909563990595319572224701304611776922\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                9157681660736307225301034938839156685740016704526090406950858434609030225480\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                8030757918449598333025173041225419314601924784825356372892442933863889091921\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                13640927194155719878577037989318164230713264172921393074620679102349279698839\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                6900604409783116559678606532527525488965021296050678826316410961047810748517\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                5252746067177671060986834545182465389119363624955154280966570801582394785840\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                9195131821976884258765963928166452788332100806625752840914173681395711439614\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                14977645969508065057243931947507598769856801213808952261859994787935726005589\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                5096294777527669951530261927053173270421982090354495165464932330992574194565\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                3545567189598828405425832938456307851398759232755240447556204001745014820301\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                1941523779920680020402590579224743136261147114116204389037553310789640138016\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                18752226702425153987309996103585848095327330331398325134534482624274124156372\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                11041340585339071070596363521057299677913989755036511157364732122494432877984\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                14590850366538565268612154711126247437677807588903705071677135475079401886274\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                18590050088847501728340953044790139366495591524471631048198965975345765148219\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                21704590671982347430816904792389667189857927953663414983186296915645026530922\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                20891693206558394293557033642999941159043782671912221870570329299710569824990\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x972a44ce31523b90135b140bf707d5dd82d67c4ea3f7d7f285627969704d03f7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Transfer3In3Out24DepthVk.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\n// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-libraries --release`.\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./BN254.sol\\\";\\n\\nlibrary Transfer3In3Out24DepthVk {\\n    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {\\n        assembly {\\n            // domain size\\n            mstore(vk, 65536)\\n            // num of public inputs\\n            mstore(add(vk, 0x20), 45)\\n\\n            // sigma0\\n            mstore(\\n                mload(add(vk, 0x40)),\\n                6745569324574292840123998773726184666805725845966057344477780763812378175216\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x40)), 0x20),\\n                15674359264100532117390420549335759541287602785521062799291583384533749901741\\n            )\\n            // sigma1\\n            mstore(\\n                mload(add(vk, 0x60)),\\n                3882047939060472482494153851462770573213675187290765799393847015027127043523\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x60)), 0x20),\\n                7630821036627726874781987389422412327209162597154025595018731571961516169947\\n            )\\n            // sigma2\\n            mstore(\\n                mload(add(vk, 0x80)),\\n                21225224708013383300469954369858606000505504678178518510917526718672976749965\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x80)), 0x20),\\n                16365929799382131762072204211493784381011606251973921052275294268694891754790\\n            )\\n            // sigma3\\n            mstore(\\n                mload(add(vk, 0xa0)),\\n                18816028553810513067728270242942259651783354986329945635353859047149476279687\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xa0)), 0x20),\\n                11882680851945303658063593837716037756293837416752296611477056121789431777064\\n            )\\n            // sigma4\\n            mstore(\\n                mload(add(vk, 0xc0)),\\n                21510097154791711734296287821852281209791416779989865544015434367940075374914\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xc0)), 0x20),\\n                3430102751397774877173034066414871678821827985103146314887340992082993984329\\n            )\\n\\n            // q1\\n            mstore(\\n                mload(add(vk, 0xe0)),\\n                19869597504326919094166107694290620558808748604476313005465666228287903414344\\n            )\\n            mstore(\\n                add(mload(add(vk, 0xe0)), 0x20),\\n                7150111322568846997819037419437132637225578315562663408823282538527304893394\\n            )\\n            // q2\\n            mstore(\\n                mload(add(vk, 0x100)),\\n                15160992848460929858090744745540508270198264712727437471403260552347088002356\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x100)), 0x20),\\n                14658479685250391207452586531545916785099257310771621120220342224985727703397\\n            )\\n            // q3\\n            mstore(\\n                mload(add(vk, 0x120)),\\n                8235204123369855002620633544318875073465201482729570929826842086900101734240\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x120)), 0x20),\\n                1315782571791013709741742522230010040948540142932666264718230624795003912658\\n            )\\n            // q4\\n            mstore(\\n                mload(add(vk, 0x140)),\\n                7021080634443416008459948952678027962506306501245829421538884411847588184010\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x140)), 0x20),\\n                6584493294015254847476792897094566004873857428175399671267891995703671301938\\n            )\\n\\n            // qM12\\n            mstore(\\n                mload(add(vk, 0x160)),\\n                19199743165408884046745846028664619315169170959180153012829728401858950581623\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x160)), 0x20),\\n                14838749009602762930836652487207610572239367359059811743491751753845995666312\\n            )\\n            // qM34\\n            mstore(\\n                mload(add(vk, 0x180)),\\n                10248259393969855960972127876087560001222739594880062140977367664638629457979\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x180)), 0x20),\\n                3405469462517204071666729973707416410254082166076974198995581327928518673875\\n            )\\n\\n            // qO\\n            mstore(\\n                mload(add(vk, 0x1a0)),\\n                9259807925511910228709408577417518144465439748546649497440413244416264053909\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1a0)), 0x20),\\n                4349742126987923639436565898601499377373071260693932114899380098788981806520\\n            )\\n            // qC\\n            mstore(\\n                mload(add(vk, 0x1c0)),\\n                195924708408078159303893377539882303047203274957430754688974876101940076523\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1c0)), 0x20),\\n                2730242103617344574903225508726280194241425124842703262405260488972083367491\\n            )\\n            // qH1\\n            mstore(\\n                mload(add(vk, 0x1e0)),\\n                20219387287202350426068670038890996732790822982376234641416083193417653609683\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x1e0)), 0x20),\\n                4712902992473903996354956065401616044154872569903741964754702810524685939510\\n            )\\n            // qH2\\n            mstore(\\n                mload(add(vk, 0x200)),\\n                20606018511516306199576247848201856706631620007530428100607004704631466340548\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x200)), 0x20),\\n                3431535724436156106895017518971445784357440465218022981124980111332355382620\\n            )\\n            // qH3\\n            mstore(\\n                mload(add(vk, 0x220)),\\n                16926802729258759088538388518776752987858809292908095720269836387951179849328\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x220)), 0x20),\\n                17982233223518308144739071673627895392237126231063756253762501987899411496611\\n            )\\n            // qH4\\n            mstore(\\n                mload(add(vk, 0x240)),\\n                2769108222659962988853179530681878069454558991374977224908414446449310780711\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x240)), 0x20),\\n                1229799452453481995415811771099188864368739763357472273935665649735041438448\\n            )\\n            // qEcc\\n            mstore(\\n                mload(add(vk, 0x260)),\\n                4813470345909172814186147928188285492437945113396806975178500704379725081570\\n            )\\n            mstore(\\n                add(mload(add(vk, 0x260)), 0x20),\\n                5911983361843136694947821727682990071782684402361679071602671084421707986423\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b99c5af4d76f09fef1dd76c421b249560d3ff70288fef8f9e50534488401a1f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Utils {\\n    function reverseEndianness(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v =\\n            ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v =\\n            ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n}\\n\",\"keccak256\":\"0x6171f0308aaf0e5379abfee2ed1aa69b81232ef35f0a5576bf7e16d9ad73ac49\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/VerifyingKeys.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n//\\n// Copyright (c) 2022 Espresso Systems (espressosys.com)\\n// This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.\\n//\\n// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPlonkVerifier.sol\\\";\\nimport \\\"./Transfer1In2Out24DepthVk.sol\\\";\\nimport \\\"./Transfer2In2Out24DepthVk.sol\\\";\\nimport \\\"./Transfer2In3Out24DepthVk.sol\\\";\\nimport \\\"./Transfer3In3Out24DepthVk.sol\\\";\\nimport \\\"./Mint1In2Out24DepthVk.sol\\\";\\nimport \\\"./Freeze2In2Out24DepthVk.sol\\\";\\nimport \\\"./Freeze3In3Out24DepthVk.sol\\\";\\n\\nlibrary VerifyingKeys {\\n    function getVkById(uint256 encodedId)\\n        external\\n        pure\\n        returns (IPlonkVerifier.VerifyingKey memory)\\n    {\\n        if (encodedId == getEncodedId(0, 1, 2, 24)) {\\n            // transfer/burn-1-input-2-output-24-depth\\n            return Transfer1In2Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(0, 2, 2, 24)) {\\n            // transfer/burn-2-input-2-output-24-depth\\n            return Transfer2In2Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(0, 2, 3, 24)) {\\n            // transfer/burn-2-input-3-output-24-depth\\n            return Transfer2In3Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(0, 3, 3, 24)) {\\n            // transfer/burn-3-input-3-output-24-depth\\n            return Transfer3In3Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(1, 1, 2, 24)) {\\n            // mint-1-input-2-output-24-depth\\n            return Mint1In2Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(2, 2, 2, 24)) {\\n            // freeze-2-input-2-output-24-depth\\n            return Freeze2In2Out24DepthVk.getVk();\\n        } else if (encodedId == getEncodedId(2, 3, 3, 24)) {\\n            // freeze-3-input-3-output-24-depth\\n            return Freeze3In3Out24DepthVk.getVk();\\n        } else {\\n            revert(\\\"Unknown vk ID\\\");\\n        }\\n    }\\n\\n    // returns (noteType, numInput, numOutput, treeDepth) as a 4*8 = 32 byte = uint256\\n    // as the encoded ID.\\n    function getEncodedId(\\n        uint8 noteType,\\n        uint8 numInput,\\n        uint8 numOutput,\\n        uint8 treeDepth\\n    ) public pure returns (uint256 encodedId) {\\n        assembly {\\n            encodedId := add(\\n                shl(24, noteType),\\n                add(shl(16, numInput), add(shl(8, numOutput), treeDepth))\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe547ada74ff10128a51f61d3c1f5aeedd4efb5cc76399e74fa40aaaf062cd0fb\",\"license\":\"GPL-3.0-or-later\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005ae538038062005ae58339810160408190526200003491620001d9565b826001816001600160401b031611620000935760405162461bcd60e51b815260206004820152601860248201527f41206c65617374203220726f6f74732072657175697265640000000000000000604482015260640160405180910390fd5b806001600160401b03166001600160401b03811115620000b757620000b762000230565b604051908082528060200260200182016040528015620000e1578160200160208202803683370190505b508051620000f89160009160209091019062000155565b50506001600455600680546001600160a01b039384166801000000000000000002600160401b600160e01b031990911617905560078054919092166001600160a01b03199182161790915560098054909116331790555062000246565b82805482825590600052602060002090810192821562000193579160200282015b828111156200019357825182559160200191906001019062000176565b50620001a1929150620001a5565b5090565b5b80821115620001a15760008155600101620001a6565b80516001600160a01b0381168114620001d457600080fd5b919050565b600080600060608486031215620001ef57600080fd5b83516001600160401b03811681146200020757600080fd5b92506200021760208501620001bc565b91506200022760408501620001bc565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b61588f80620002566000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c8063a33ba96c116100d8578063d21e82ab1161008c578063f148fb4a11610066578063f148fb4a14610395578063f44ff712146103a8578063fe3cc3f8146103d557600080fd5b8063d21e82ab1461033c578063d56c1ea11461036f578063d5f394881461038257600080fd5b8063b12f7e7b116100bd578063b12f7e7b1461030e578063b4e28f1a14610321578063cb390b981461032957600080fd5b8063a33ba96c146102bf578063a7932794146102fb57600080fd5b80636868dd1f1161012f57806379cf6f5c1161011457806379cf6f5c1461026e5780639dd584b9146102765780639fda5b661461027e57600080fd5b80636868dd1f146102465780636de840601461025957600080fd5b806311829f931161016057806311829f93146101a45780631db6b253146101e55780636444c8d11461023057600080fd5b80630a2121451461017c57806310b4e3a114610191575b600080fd5b61018f61018a366004613c3b565b6103e9565b005b61018f61019f36600461466d565b610557565b6101cf6040518060400160405280600c81526020016b22b9a9a1a0a82290313ab93760a11b81525081565b6040516101dc919061475c565b60405180910390f35b61020c7f444f4d45535449435f415353455400000000000000000000000000000000000081565b60405171ffffffffffffffffffffffffffffffffffff1990911681526020016101dc565b610238610565565b6040519081526020016101dc565b61018f610254366004614776565b6105f1565b6102616107fd565b6040516101dc919061481b565b610238600181565b610238600a81565b6102a761028c36600461482a565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101dc565b6102d66c1193d4915251d397d054d4d155609a1b81565b60405172ffffffffffffffffffffffffffffffffffffff1990911681526020016101dc565b61023861030936600461482a565b61082b565b61018f61031c366004614843565b61084c565b610238600c81565b61018f61033736600461486e565b610b0e565b61035f61034a36600461482a565b60056020526000908152604090205460ff1681565b60405190151581526020016101dc565b6102a761037d3660046148a3565b611431565b6009546102a7906001600160a01b031681565b61035f6103a33660046148a3565b61147a565b6006546103bc9067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101dc565b60095461035f90600160a01b900460ff1681565b6001600160a01b0382166104445760405162461bcd60e51b815260206004820152601160248201527f426164206173736574206164647265737300000000000000000000000000000060448201526064015b60405180910390fd5b61044d8161147a565b1561049a5760405162461bcd60e51b815260206004820152601860248201527f417373657420616c726561647920726567697374657265640000000000000000604482015260640161043b565b6104ae816000015183338460200151611497565b6000816040516020016104c1919061481b565b60408051808303601f19018152828252805160209182012060008181526003835283902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03891690811790915586519085529184019190915292507f0538524c1d0e6bf3f9f91710406853761e09b531b4fed8629307955608c82611910160405180910390a1505050565b61056083610b0e565b505050565b600754604080517f6444c8d100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691636444c8d19160048083019260209291908290030181865afa1580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec91906148c0565b905090565b6002600454036106435760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161043b565b600260045560208201516106569061147a565b6106a25760405162461bcd60e51b815260206004820152601f60248201527f417373657420646566696e6974696f6e206e6f74207265676973746572656400604482015260640161043b565b806001600160a01b03166106b98360200151611431565b6001600160a01b03161461070f5760405162461bcd60e51b815260206004820152601360248201527f57726f6e67204552433230206164647265737300000000000000000000000000604482015260640161043b565b600854600a116107615760405162461bcd60e51b815260206004820152601e60248201527f50656e64696e67206465706f736974732071756575652069732066756c6c0000604482015260640161043b565b600861076c83611552565b81546001810183556000928352602090922090910155815161079c908290339030906001600160801b0316611754565b7fe77062441218c146925a31d2ebba4cb3fd6ea3069cdf81c28822c31e3a8ca98e826040516020016107ce9190614935565b60408051601f19818403018152908290526107ec9184903390614944565b60405180910390a150506001600455565b6108056134b0565b600180825260208083018051518201839052805182015182018390525160400151015290565b6008818154811061083b57600080fd5b600091825260209091200154905081565b6009546001600160a01b031633146108a65760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c7920696e766f6361626c65206279206465706c6f796572000000000000604482015260640161043b565b600954600160a01b900460ff16156109005760405162461bcd60e51b815260206004820152601560248201527f46617563657420616c7265616479207365742075700000000000000000000000604482015260640161043b565b60006040518060c0016040528060026001600160801b0361092191906149a3565b6001600160801b031681526020016109376107fd565b815260208101859052604080820185905260006060830181905260809092018290528051600180825281830190925292935090919081602001602082028036833701905050905061098782611552565b8160008151811061099a5761099a6149c9565b602090810291909101015260075460405163330ee6a760e01b81526001600160a01b039091169063330ee6a7906109d5908490600401614a1a565b600060405180830381600087803b1580156109ef57600080fd5b505af1158015610a03573d6000803e3d6000fd5b50505050610a86600760009054906101000a90046001600160a01b03166001600160a01b0316636444c8d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8191906148c0565b611803565b7fc27eb5ac1e750e98e913252f09c9b96d224b2ef9117e3a3cd446d5ecdd94aa8c82604051602001610ab89190614935565b60408051601f1981840301815290829052610ad29161475c565b60405180910390a15050600980547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790555050565b600260045403610b605760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161043b565b6002600455600854600090610b8790610b788461194b565b610b829190614a2d565b611a70565b60208301515190915060008167ffffffffffffffff811115610bab57610bab613a16565b604051908082528060200260200182016040528015610be457816020015b610bd16134cf565b815260200190600190039081610bc95790505b50905060008267ffffffffffffffff811115610c0257610c02613a16565b604051908082528060200260200182016040528015610c3557816020015b6060815260200190600190039081610c205790505b50905060008367ffffffffffffffff811115610c5357610c53613a16565b604051908082528060200260200182016040528015610c8c57816020015b610c79613748565b815260200190600190039081610c715790505b50905060008467ffffffffffffffff811115610caa57610caa613a16565b604051908082528060200260200182016040528015610cdd57816020015b6060815260200190600190039081610cc85790505b509050600080808088158015610cf35750600854155b15610d405760405162461bcd60e51b815260206004820152601760248201527f426c6f636b206d757374206265206e6f6e2d656d707479000000000000000000604482015260640161043b565b60005b898110156111c45760008c602001518281518110610d6357610d636149c9565b6020026020010151905060006003811115610d8057610d80614a45565b816003811115610d9257610d92614a45565b03610ee85760008d604001518781518110610daf57610daf6149c9565b60200260200101519050600187610dc69190614a2d565b9650610dd9816080015160000151611ae3565b610de281611b44565b60065460808201516040015167ffffffffffffffff91821691161015610e4a5760405162461bcd60e51b815260206004820152600c60248201527f45787069726564206e6f74650000000000000000000000000000000000000000604482015260640161043b565b8051610e5590611ba2565b6020810151610e65908e90611be6565b610e6e81611c69565b8e8781518110610e8057610e806149c9565b602002602001018e8881518110610e9957610e996149c9565b602002602001018e8981518110610eb257610eb26149c9565b602002602001018e8a81518110610ecb57610ecb6149c9565b6020026020010184905284905284905284905250505050506111b1565b6001816003811115610efc57610efc614a45565b03610f8e5760008d606001518681518110610f1957610f196149c9565b60200260200101519050600186610f309190614a2d565b9550610f4481610100015160000151611ae3565b610f5a8160800151600001518260a00151612150565b8051610f65906121f7565b6020810151610f75908e90612271565b6040810151610f85908e90612271565b610e6e816122ab565b6002816003811115610fa257610fa2614a45565b0361100d5760008d608001518581518110610fbf57610fbf6149c9565b60200260200101519050600185610fd69190614a2d565b9450610fe9816060015160000151611ae3565b8051610ff490611ba2565b6020810151611004908e90611be6565b610e6e81612873565b600381600381111561102157611021614a45565b036111695760008d60a00151848151811061103e5761103e6149c9565b602002602001015190506001846110559190614a2d565b8151608001515190945061106890611ae3565b61107181612be8565b80515161107d90611ba2565b60005b815160200151518110156110dc57806001146110ca576110ca82600001516020015182815181106110b3576110b36149c9565b60200260200101518f61227190919063ffffffff16565b806110d481614a5b565b915050611080565b506110e681612c9c565b8e87815181106110f8576110f86149c9565b602002602001018e8881518110611111576111116149c9565b602002602001018e898151811061112a5761112a6149c9565b602002602001018e8a81518110611143576111436149c9565b602002602001018490528490528490528490525050505061116381612ccc565b506111b1565b60405162461bcd60e51b815260206004820152601260248201527f436170653a20756e726561636861626c65210000000000000000000000000000604482015260640161043b565b50806111bc81614a5b565b915050610d43565b5088156112b2576006546040517f830affd6000000000000000000000000000000000000000000000000000000008152680100000000000000009091046001600160a01b03169063830affd690611225908b908b908b908b90600401614d30565b602060405180830381865afa158015611242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112669190614f9e565b6112b25760405162461bcd60e51b815260206004820152601a60248201527f436170653a20626174636820766572696679206661696c65642e000000000000604482015260640161043b565b60005b600854811015611301576112ef600882815481106112d5576112d56149c9565b90600052602060002001548c61227190919063ffffffff16565b806112f981614a5b565b9150506112b5565b5060208a0151156113c4576007548a5160405163330ee6a760e01b81526001600160a01b039092169163330ee6a79161133c91600401614a1a565b600060405180830381600087803b15801561135657600080fd5b505af115801561136a573d6000803e3d6000fd5b505050506113c4600760009054906101000a90046001600160a01b03166001600160a01b0316636444c8d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a5d573d6000803e3d6000fd5b60068054600191906000906113e490849067ffffffffffffffff16614fbb565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506114138b612d18565b61141f6008600061394d565b50506001600455505050505050505050565b60008082604051602001611445919061481b565b60408051601f198184030181529181528151602092830120600090815260039092529020546001600160a01b03169392505050565b60008061148683611431565b6001600160a01b0316141592915050565b60006114a4848484612e3e565b90506114fd6c1193d4915251d397d054d4d155609a1b826040516020016114cc929190614fe7565b60408051601f1981840301815282825280516020918201209083015201604051602081830303815290604052612e90565b851461154b5760405162461bcd60e51b815260206004820152601860248201527f57726f6e6720666f726569676e20617373657420636f64650000000000000000604482015260640161043b565b5050505050565b600061100082602001516020015160600151106115b15760405162461bcd60e51b815260206004820152601a60248201527f52657665616c206d617020657863656564732031322062697473000000000000604482015260640161043b565b600082608001516115c35760006115c6565b60015b60ff168360200151602001516060015160026115e29190615023565b6115ec9190614a2d565b604080516101e08101825260a080870151825286516001600160801b0390811660208085019190915280890180515185870152898601805151606087015251820151608080870191909152815183015151519486019490945280518201515182015160c086015280518201518201515160e0860152805182015182015182015161010086015280518201518601515161012086015280518201518601518201516101408601526101608501879052510151909101511661018082015260006101a082018190526101c082015290517f8c548036000000000000000000000000000000000000000000000000000000008152919250907365544E31DDee5CEdBee2D2cbA1eD341F361141bf90638c5480369061170b908490600401615042565b602060405180830381865af4158015611728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174c91906148c0565b949350505050565b60006040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526001600160a01b038416602482015282604482015260008060648360008a5af19150506117b781612f34565b61154b5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015260640161043b565b60008181526001602052604090205460ff16156118625760405162461bcd60e51b815260206004820152601360248201527f526f6f7420616c72656164792065786973747300000000000000000000000000604482015260640161043b565b6002546000805490916001918391829167ffffffffffffffff90911690811061188d5761188d6149c9565b60009182526020808320919091015483528201929092526040018120805460ff191692151592909217909155600254815483929167ffffffffffffffff169081106118da576118da6149c9565b600091825260208083209091019290925582815260019182905260408120805460ff19168317905554600254909161191c9167ffffffffffffffff1690614fbb565b6119269190615074565b6002805467ffffffffffffffff191667ffffffffffffffff9290921691909117905550565b60008082606001515160026119609190615023565b905060005b8360400151518110156119b45783604001518181518110611988576119886149c9565b60200260200101516020015151826119a09190614a2d565b9150806119ac81614a5b565b915050611965565b5060005b8360a0015151811015611a165760018460a0015182815181106119dd576119dd6149c9565b60200260200101516000015160200151516119f8919061509b565b611a029083614a2d565b915080611a0e81614a5b565b9150506119b8565b5060005b836080015151811015611a695783608001518181518110611a3d57611a3d6149c9565b6020026020010151602001515182611a559190614a2d565b915080611a6181614a5b565b915050611a1a565b5092915050565b60408051808201909152606081526000602082015260405180604001604052808367ffffffffffffffff811115611aa957611aa9613a16565b604051908082528060200260200182016040528015611ad2578160200160208202803683370190505b508152600060209091015292915050565b60008181526001602052604090205460ff16611b415760405162461bcd60e51b815260206004820152600e60248201527f526f6f74206e6f7420666f756e64000000000000000000000000000000000000604482015260640161043b565b50565b611b55816080015160800151612f7b565b15611b415760405162461bcd60e51b815260206004820152601c60248201527f4275726e2070726566697820696e207472616e73666572206e6f746500000000604482015260640161043b565b60005b8151811015611be257611bd0828281518110611bc357611bc36149c9565b60200260200101516121f7565b80611bda81614a5b565b915050611ba5565b5050565b60005b8151811015611c4e57818181518110611c0457611c046149c9565b60200260200101518360000151846020015183611c219190614a2d565b81518110611c3157611c316149c9565b602090810291909101015280611c4681614a5b565b915050611be9565b50805182602001818151611c629190614a2d565b9052505050565b611c716134cf565b6060611c7b613748565b606073b91F732F69a6a6B0A113ED2DD2685e1FeBf7313763b95a6ecc816322e6017b60008951516020808c015151600754604080516319efb11d60e01b8152905192936001600160a01b03909216926319efb11d926004808401939192918290030181865afa158015611cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1691906150b2565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260ff9485166004820152928416602484015290831660448301529091166064820152608401602060405180830381865af4158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da891906148c0565b6040518263ffffffff1660e01b8152600401611dc691815260200190565b6104c060405180830381865af4158015611de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e089190615105565b9350846060015160200151518560200151518660000151516004611e2c9190614a2d565b611e369190614a2d565b611e41906002614a2d565b611e4b9190614a2d565b67ffffffffffffffff811115611e6357611e63613a16565b604051908082528060200260200182016040528015611e8c578160200160208202803683370190505b50925084608001516000015183600081518110611eab57611eab6149c9565b602002602001018181525050600183600181518110611ecc57611ecc6149c9565b60200260200101818152505084608001516040015167ffffffffffffffff1683600281518110611efe57611efe6149c9565b6020026020010181815250508460800151602001516001600160801b031683600381518110611f2f57611f2f6149c9565b6020908102919091010152600460005b865151811015611f9f578651805182908110611f5d57611f5d6149c9565b6020026020010151858284611f729190614a2d565b81518110611f8257611f826149c9565b602090810291909101015280611f9781614a5b565b915050611f3f565b50855151611fad9082614a2d565b905060005b8660200151518110156120175786602001518181518110611fd557611fd56149c9565b6020026020010151858284611fea9190614a2d565b81518110611ffa57611ffa6149c9565b60209081029190910101528061200f81614a5b565b915050611fb2565b506020860151516120289082614a2d565b905085606001516000015160000151848281518110612049576120496149c9565b60209081029190910181019190915260608701515101518461206c836001614a2d565b8151811061207c5761207c6149c9565b6020908102919091010152612092600282614a2d565b905060005b866060015160200151518110156121045786606001516020015181815181106120c2576120c26149c9565b60200260200101518582846120d79190614a2d565b815181106120e7576120e76149c9565b6020908102919091010152806120fc81614a5b565b915050612097565b50508460400151915061211e856080015160600151612fcf565b856080015160800151604051602001612138929190615295565b60405160208183030381529060405290509193509193565b6121a97f444f4d45535449435f415353455400000000000000000000000000000000000061217d83613063565b60405171ffffffffffffffffffffffffffffffffffff199092166020830152602e820152604e016114cc565b8214611be25760405162461bcd60e51b815260206004820152601960248201527f57726f6e6720646f6d657374696320617373657420636f646500000000000000604482015260640161043b565b60008181526005602052604090205460ff16156122565760405162461bcd60e51b815260206004820152601b60248201527f4e756c6c696669657220616c7265616479207075626c69736865640000000000604482015260640161043b565b6000908152600560205260409020805460ff19166001179055565b80826000015183602001518151811061228c5761228c6149c9565b602002602001018181525050600182602001818151611c629190614a2d565b6122b36134cf565b60606122bd613748565b606073b91F732F69a6a6B0A113ED2DD2685e1FeBf7313763b95a6ecc816322e6017b6001806002600760009054906101000a90046001600160a01b03166001600160a01b03166319efb11d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235b91906150b2565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260ff9485166004820152928416602484015290831660448301529091166064820152608401602060405180830381865af41580156123c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ed91906148c0565b6040518263ffffffff1660e01b815260040161240b91815260200190565b6104c060405180830381865af4158015612429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244d9190615105565b93508460e00151602001515160136124659190614a2d565b67ffffffffffffffff81111561247d5761247d613a16565b6040519080825280602002602001820160405280156124a6578160200160208202803683370190505b50925084610100015160000151836000815181106124c6576124c66149c9565b6020026020010181815250506001836001815181106124e7576124e76149c9565b60200260200101818152505084600001518360028151811061250b5761250b6149c9565b602002602001018181525050846101000151602001516001600160801b03168360038151811061253d5761253d6149c9565b602002602001018181525050846040015183600481518110612561576125616149c9565b602002602001018181525050846020015183600581518110612585576125856149c9565b60200260200101818152505084606001516001600160801b0316836006815181106125b2576125b26149c9565b602002602001018181525050846080015160000151836007815181106125da576125da6149c9565b6020026020010181815250508460a00151836008815181106125fe576125fe6149c9565b602002602001018181525050846080015160200151606001518360098151811061262a5761262a6149c9565b602002602001018181525050846080015160200151600001516000015183600a8151811061265a5761265a6149c9565b602002602001018181525050846080015160200151600001516020015183600b8151811061268a5761268a6149c9565b602002602001018181525050846080015160200151602001516000015183600c815181106126ba576126ba6149c9565b602002602001018181525050846080015160200151602001516020015183600d815181106126ea576126ea6149c9565b602002602001018181525050846080015160200151604001516000015183600e8151811061271a5761271a6149c9565b602002602001018181525050846080015160200151604001516020015183600f8151811061274a5761274a6149c9565b602002602001018181525050846080015160200151608001516001600160801b03168360108151811061277f5761277f6149c9565b602090810291909101015260e085015151518351849060119081106127a6576127a66149c9565b6020026020010181815250508460e001516000015160200151836012815181106127d2576127d26149c9565b6020908102919091010152601360005b8660e00151602001515181101561284f578660e0015160200151818151811061280d5761280d6149c9565b60200260200101518582846128229190614a2d565b81518110612832576128326149c9565b60209081029190910101528061284781614a5b565b9150506127e2565b50508460c00151915061286a85610100015160400151612fcf565b90509193509193565b61287b6134cf565b6060612885613748565b606073b91F732F69a6a6B0A113ED2DD2685e1FeBf7313763b95a6ecc816322e6017b60028951516020808c015151600754604080516319efb11d60e01b8152905192936001600160a01b03909216926319efb11d926004808401939192918290030181865afa1580156128fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292091906150b2565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260ff9485166004820152928416602484015290831660448301529091166064820152608401602060405180830381865af415801561298e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b291906148c0565b6040518263ffffffff1660e01b81526004016129d091815260200190565b6104c060405180830381865af41580156129ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a129190615105565b60208601515186515191955090612a2a906003614a2d565b612a349190614a2d565b67ffffffffffffffff811115612a4c57612a4c613a16565b604051908082528060200260200182016040528015612a75578160200160208202803683370190505b50925084606001516000015183600081518110612a9457612a946149c9565b602002602001018181525050600183600181518110612ab557612ab56149c9565b6020026020010181815250508460600151602001516001600160801b031683600281518110612ae657612ae66149c9565b6020908102919091010152600360005b865151811015612b56578651805182908110612b1457612b146149c9565b6020026020010151858284612b299190614a2d565b81518110612b3957612b396149c9565b602090810291909101015280612b4e81614a5b565b915050612af6565b50855151612b649082614a2d565b905060005b866020015151811015612bce5786602001518181518110612b8c57612b8c6149c9565b6020026020010151858284612ba19190614a2d565b81518110612bb157612bb16149c9565b602090810291909101015280612bc681614a5b565b915050612b69565b50508460400151915061286a856060015160400151612fcf565b80516080908101510151612bfb81612f7b565b612c475760405162461bcd60e51b815260206004820152600c60248201527f426164206275726e207461670000000000000000000000000000000000000000604482015260640161043b565b612c50826131af565b611be25760405162461bcd60e51b815260206004820152601560248201527f426164207265636f726420636f6d6d69746d656e740000000000000000000000604482015260640161043b565b612ca46134cf565b6060612cae613748565b6060612cbd8560000151611c69565b93509350935093509193509193565b6000612cdf826020015160200151611431565b90506000612cfa83600001516080015160800151600c613209565b905061056082828560200151600001516001600160801b031661327f565b600654815160405167ffffffffffffffff909216917fc34977751f08a257da613aa9db576f9b4edca0aef20e5b401f9c590a4d0c8fed91600891612d5f91906020016152bb565b6040516020818303038152906040528460200151604051602001612d8391906152d2565b6040516020818303038152906040528560400151604051602001612da79190615431565b6040516020818303038152906040528660600151604051602001612dcb91906154c6565b6040516020818303038152906040528760800151604051602001612def91906155b8565b6040516020818303038152906040528860a00151604051602001612e13919061565a565b60408051601f1981840301815290829052612e33979695949392916156d0565b60405180910390a250565b60608360601b8360601b83604051602001612e599190615799565b60408051601f1981840301815290829052612e789392916020016157a8565b60405160208183030381529060405290509392505050565b6000805b8251811015612f2e577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610100830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838260018651612ef6919061509b565b612f00919061509b565b81518110612f1057612f106149c9565b016020015160f81c8308915080612f2681614a5b565b915050612e94565b50919050565b60003d82612f4657806000803e806000fd5b8060208114612f5e578015612f6f5760009250612f74565b816000803e60005115159250612f74565b600192505b5050919050565b6000600c82511015612f8f57506000919050565b612fc9612f9f836000600c613325565b6040518060400160405280600c81526020016b22b9a9a1a0a82290313ab93760a11b81525061344d565b92915050565b6060600061300683602001517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160019190911b1090565b61302d57507f80000000000000000000000000000000000000000000000000000000000000005b825161303a908217613063565b60405160200161304c91815260200190565b604051602081830303815290604052915050919050565b60008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b6008827fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0016901c1790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b6010827fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c1790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b6020827fffffffff00000000ffffffff00000000ffffffff00000000ffffffff0000000016901c17905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b6040827fffffffffffffffff0000000000000000ffffffffffffffff000000000000000016901c179050608081901b608082901c179050919050565b600060028260000151602001515110156131cb57506000919050565b60006131da8360200151611552565b90508260000151602001516001815181106131f7576131f76149c9565b60200260200101518114915050919050565b6000613216826014614a2d565b835110156132665760405162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015260640161043b565b5001602001516c01000000000000000000000000900490565b60006040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201528260248201526000806044836000895af19150506132d381612f34565b61331f5760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161043b565b50505050565b60608161333381601f614a2d565b10156133815760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015260640161043b565b61338b8284614a2d565b845110156133db5760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015260640161043b565b6060821580156133fa5760405191506000825260208201604052613444565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561343357805183526020928301920161341b565b5050858452601f01601f1916604052505b50949350505050565b81518151600091600191811480831461346957600092506134a6565b600160208701838101602088015b60028483851001036134a15780518351146134955760009650600093505b60209283019201613477565b505050505b5090949350505050565b6040518060400160405280600081526020016134ca61396b565b905290565b6040518061028001604052806000815260200160008152602001613506604051806040016040528060008152602001600081525090565b8152602001613528604051806040016040528060008152602001600081525090565b815260200161354a604051806040016040528060008152602001600081525090565b815260200161356c604051806040016040528060008152602001600081525090565b815260200161358e604051806040016040528060008152602001600081525090565b81526020016135b0604051806040016040528060008152602001600081525090565b81526020016135d2604051806040016040528060008152602001600081525090565b81526020016135f4604051806040016040528060008152602001600081525090565b8152602001613616604051806040016040528060008152602001600081525090565b8152602001613638604051806040016040528060008152602001600081525090565b815260200161365a604051806040016040528060008152602001600081525090565b815260200161367c604051806040016040528060008152602001600081525090565b815260200161369e604051806040016040528060008152602001600081525090565b81526020016136c0604051806040016040528060008152602001600081525090565b81526020016136e2604051806040016040528060008152602001600081525090565b8152602001613704604051806040016040528060008152602001600081525090565b8152602001613726604051806040016040528060008152602001600081525090565b81526020016134ca604051806040016040528060008152602001600081525090565b60408051610320810190915260006102e082018181526103008301919091528190815260200161378b604051806040016040528060008152602001600081525090565b81526020016137ad604051806040016040528060008152602001600081525090565b81526020016137cf604051806040016040528060008152602001600081525090565b81526020016137f1604051806040016040528060008152602001600081525090565b8152602001613813604051806040016040528060008152602001600081525090565b8152602001613835604051806040016040528060008152602001600081525090565b8152602001613857604051806040016040528060008152602001600081525090565b8152602001613879604051806040016040528060008152602001600081525090565b815260200161389b604051806040016040528060008152602001600081525090565b81526020016138bd604051806040016040528060008152602001600081525090565b81526020016138df604051806040016040528060008152602001600081525090565b8152602001613901604051806040016040528060008152602001600081525090565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5080546000825590600052602060002090810190611b4191906139e1565b6040805160e08101909152600060a0820181815260c0830191909152819081526020016139ab604051806040016040528060008152602001600081525090565b81526020016139cd604051806040016040528060008152602001600081525090565b815260006020820181905260409091015290565b5b808211156139f657600081556001016139e2565b5090565b80356001600160a01b0381168114613a1157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b60405290565b60405160a0810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b6040516102e0810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b604051610120810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b6040516080810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b60405160c0810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b604051610280810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b604051601f8201601f1916810167ffffffffffffffff81118282101715613b5357613b53613a16565b604052919050565b600060408284031215613b6d57600080fd5b613b75613a2c565b9050813581526020820135602082015292915050565b80356001600160801b0381168114613a1157600080fd5b6000818303610120811215613bb657600080fd5b613bbe613a2c565b91508235825261010080601f1983011215613bd857600080fd5b613be0613a55565b9150613bef8560208601613b5b565b8252613bfe8560608601613b5b565b6020830152613c108560a08601613b5b565b604083015260e08401356060830152613c2a818501613b8b565b608083015250602082015292915050565b6000806101408385031215613c4f57600080fd5b613c58836139fa565b9150613c678460208501613ba2565b90509250929050565b600067ffffffffffffffff821115613c8a57613c8a613a16565b5060051b60200190565b600082601f830112613ca557600080fd5b81356020613cba613cb583613c70565b613b2a565b82815260059290921b84018101918181019086841115613cd957600080fd5b8286015b84811015613d0257803560048110613cf55760008081fd5b8352918301918301613cdd565b509695505050505050565b600082601f830112613d1e57600080fd5b81356020613d2e613cb583613c70565b82815260059290921b84018101918181019086841115613d4d57600080fd5b8286015b84811015613d025780358352918301918301613d51565b60006104808284031215613d7b57600080fd5b613d83613a78565b9050613d8f8383613b5b565b8152613d9e8360408401613b5b565b6020820152613db08360808401613b5b565b6040820152613dc28360c08401613b5b565b6060820152610100613dd684828501613b5b565b6080830152610140613dea85828601613b5b565b60a0840152610180613dfe86828701613b5b565b60c08501526101c0613e1287828801613b5b565b60e0860152610200613e2688828901613b5b565b858701526102409450613e3b88868901613b5b565b610120870152610280613e5089828a01613b5b565b858801526102c09450613e6589868a01613b5b565b610160880152613e79896103008a01613b5b565b848801526103408801356101a0880152610360880135838801526103808801356101e08801526103a0880135828801526103c08801356102208801526103e08801358688015261040088013561026088015261042088013581880152505050506104408401356102a084015261046084013581840152505092915050565b600060608284031215613f0957600080fd5b613f11613a2c565b9050613f1d8383613b5b565b8152604082013567ffffffffffffffff811115613f3957600080fd5b613f4584828501613d0d565b60208301525092915050565b600060c08284031215613f6357600080fd5b613f6b613a55565b9050813581526020613f7e818401613b8b565b81830152604083013567ffffffffffffffff8082168214613f9e57600080fd5b816040850152613fb18660608701613b5b565b606085015260a0850135915080821115613fca57600080fd5b818501915085601f830112613fde57600080fd5b813581811115613ff057613ff0613a16565b614002601f8201601f19168501613b2a565b9150808252868482850101111561401857600080fd5b808484018584013760008482840101525080608085015250505092915050565b6000610500828403121561404b57600080fd5b614053613a55565b9050813567ffffffffffffffff8082111561406d57600080fd5b61407985838601613d0d565b8352602084013591508082111561408f57600080fd5b61409b85838601613d0d565b60208401526140ad8560408601613d68565b60408401526104c08401359150808211156140c757600080fd5b6140d385838601613ef7565b60608401526104e08401359150808211156140ed57600080fd5b506140fa84828501613f51565b60808301525092915050565b600082601f83011261411757600080fd5b81356020614127613cb583613c70565b82815260059290921b8401810191818101908684111561414657600080fd5b8286015b84811015613d0257803567ffffffffffffffff81111561416a5760008081fd5b6141788986838b0101614038565b84525091830191830161414a565b60006080828403121561419857600080fd5b6040516060810181811067ffffffffffffffff821117156141bb576141bb613a16565b604052823581529050806141d160208401613b8b565b60208201526141e38460408501613b5b565b60408201525092915050565b600082601f83011261420057600080fd5b81356020614210613cb583613c70565b82815260059290921b8401810191818101908684111561422f57600080fd5b8286015b84811015613d0257803567ffffffffffffffff808211156142545760008081fd5b908801906106e0828b03601f1901121561426e5760008081fd5b614276613a9c565b86830135815260408084013588830152606080850135828401526080915061429f828601613b8b565b9083015260a06142b18d868301613ba2565b828401526101c08501358184015250506142cf8b6101e08501613d68565b60c0820152610660830135828111156142e85760008081fd5b6142f68c8983870101613ef7565b60e08301525061430a8b6106808501614186565b61010082015285525050918301918301614233565b600082601f83011261433057600080fd5b81356020614340613cb583613c70565b82815260059290921b8401810191818101908684111561435f57600080fd5b8286015b84811015613d0257803567ffffffffffffffff808211156143845760008081fd5b90880190610540828b03601f1901121561439e5760008081fd5b6143a6613ac0565b86830135828111156143b85760008081fd5b6143c68c8983870101613d0d565b825250604080840135838111156143dd5760008081fd5b6143eb8d8a83880101613d0d565b8984015250606092506144008c848601613d68565b908201526144128b6104e08501614186565b91810191909152845250918301918301614363565b8015158114611b4157600080fd5b60006101e0828403121561444857600080fd5b614450613ae3565b905061445b82613b8b565b815261446a8360208401613ba2565b602082015261447d836101408401613b5b565b604082015261018082013560608201526101a082013561449c81614427565b60808201526101c0919091013560a0820152919050565b600082601f8301126144c457600080fd5b813560206144d4613cb583613c70565b82815260059290921b840181019181810190868411156144f357600080fd5b8286015b84811015613d0257803567ffffffffffffffff808211156145185760008081fd5b90880190610200828b03601f190112156145325760008081fd5b61453a613a2c565b868301358281111561454c5760008081fd5b61455a8c8983870101614038565b82525061456a8b60408501614435565b81880152855250509183019183016144f7565b600060e0828403121561458f57600080fd5b614597613ae3565b90506145a38383613b5b565b8152604082013567ffffffffffffffff808211156145c057600080fd5b6145cc85838601613c94565b602084015260608401359150808211156145e557600080fd5b6145f185838601614106565b6040840152608084013591508082111561460a57600080fd5b614616858386016141ef565b606084015260a084013591508082111561462f57600080fd5b61463b8583860161431f565b608084015260c084013591508082111561465457600080fd5b50614661848285016144b3565b60a08301525092915050565b60008060006040848603121561468257600080fd5b833567ffffffffffffffff8082111561469a57600080fd5b6146a68783880161457d565b945060208601359150808211156146bc57600080fd5b818601915086601f8301126146d057600080fd5b8135818111156146df57600080fd5b8760208285010111156146f157600080fd5b6020830194508093505050509250925092565b60005b8381101561471f578181015183820152602001614707565b8381111561331f5750506000910152565b60008151808452614748816020860160208601614704565b601f01601f19169290920160200192915050565b60208152600061476f6020830184614730565b9392505050565b600080610200838503121561478a57600080fd5b6147948484614435565b9150613c676101e084016139fa565b6147b882825180518252602090810151910152565b6020818101518051604085015290810151606084015250604081015180516080840152602081015160a084015250606081015160c0830152608001516001600160801b031660e090910152565b80518252602081015161056060208401826147a3565b6101208101612fc98284614805565b60006020828403121561483c57600080fd5b5035919050565b6000806060838503121561485657600080fd5b6148608484613b5b565b946040939093013593505050565b60006020828403121561488057600080fd5b813567ffffffffffffffff81111561489757600080fd5b61174c8482850161457d565b600061012082840312156148b657600080fd5b61476f8383613ba2565b6000602082840312156148d257600080fd5b5051919050565b6001600160801b03815116825260208101516148f86020840182614805565b5060408101518051610140840152602001516101608301526060810151610180830152608081015115156101a083015260a001516101c090910152565b6101e08101612fc982846148d9565b6060815260006149576060830186614730565b6001600160a01b0394851660208401529290931660409091015292915050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160801b03808416806149bd576149bd614977565b92169190910492915050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015614a0f578151875295820195908201906001016149f3565b509495945050505050565b60208152600061476f60208301846149df565b60008219821115614a4057614a4061498d565b500190565b634e487b7160e01b600052602160045260246000fd5b600060018201614a6d57614a6d61498d565b5060010190565b600081518084526020808501808196508360051b8101915082860160005b85811015614abc578284038952614aaa8483516149df565b98850198935090840190600101614a92565b5091979650505050505050565b614ade82825180518252602090810151910152565b6020818101518051604085015290810151606084015250604081015180516080840152602081015160a0840152506060810151805160c0840152602081015160e0840152506080810151610100614b418185018380518252602090810151910152565b60a08301519150610140614b618186018480518252602090810151910152565b60c08401519250610180614b818187018580518252602090810151910152565b60e085015193506101c0614ba18188018680518252602090810151910152565b92850151935061020092614bc18785018680518252602090810151910152565b6101208601519450610240614be28189018780518252602090810151910152565b92860151945061028092614c028885018780518252602090810151910152565b61016087015195506102c0614c23818a018880518252602090810151910152565b9287015180516103008a0152602001516103208901526101a0870151610340890152908601516103608801526101e0860151610380880152928501516103a08701526102208501516103c0870152918401516103e08601526102608401516104008601528301516104208501526102a0830151610440850152909101516104609092019190915250565b600081518084526020808501945080840160005b83811015614a0f57614cd4878351614ac9565b610480969096019590820190600101614cc1565b600081518084526020808501808196508360051b8101915082860160005b85811015614abc578284038952614d1e848351614730565b98850198935090840190600101614d06565b608080825285518282018190526000919060a090818501906020808b01865b83811015614f555781518051865283810151848701526040808201518051828901526020810151606089015250506060810151614d988988018280518252602090810151910152565b508781015160c0614db58189018380518252602090810151910152565b888301519150610100614dd4818a018480518252602090810151910152565b90830151915061014090614df48983018480518252602090810151910152565b60e08401519250610180614e14818b018580518252602090810151910152565b9084015192506101c090614e348a83018580518252602090810151910152565b6101208501519350610200614e55818c018680518252602090810151910152565b92850151935061024092614e758b85018680518252602090810151910152565b61016086015180516102808d01526020908101516102a08d01529186015180516102c08d01528201516102e08c01526101a086015180516103008d01528201516103208c01529185015180516103408c01528101516103608b01526101e085015180516103808c01528101516103a08b01529084015180516103c08b01528101516103e08a015261022084015180516104008b01528101516104208a01529083015180516104408a0152810151610460890152610260909201518051610480890152909101516104a0870152506104c09094019390820190600101614d4f565b50508683039087015250614f698189614a74565b925050508281036040840152614f7f8186614cad565b90508281036060840152614f938185614ce8565b979650505050505050565b600060208284031215614fb057600080fd5b815161476f81614427565b600067ffffffffffffffff808316818516808303821115614fde57614fde61498d565b01949350505050565b72ffffffffffffffffffffffffffffffffffffff19831681526000825161501581600d850160208701614704565b91909101600d019392505050565b600081600019048311821515161561503d5761503d61498d565b500290565b6101e08101818360005b600f81101561506b57815183526020928301929091019060010161504c565b50505092915050565b600067ffffffffffffffff8084168061508f5761508f614977565b92169190910692915050565b6000828210156150ad576150ad61498d565b500390565b6000602082840312156150c457600080fd5b815160ff8116811461476f57600080fd5b6000604082840312156150e757600080fd5b6150ef613a2c565b9050815181526020820151602082015292915050565b60006104c0828403121561511857600080fd5b615120613b06565b825181526020830151602082015261513b84604085016150d5565b604082015261514d84608085016150d5565b606082015261515f8460c085016150d5565b6080820152610100615173858286016150d5565b60a0830152610140615187868287016150d5565b60c084015261018061519b878288016150d5565b60e08501526101c06151af888289016150d5565b8486015261020093506151c4888589016150d5565b6101208601526102406151d989828a016150d5565b848701526151eb896102808a016150d5565b6101608701526151ff896102c08a016150d5565b83870152615211896103008a016150d5565b6101a0870152615225896103408a016150d5565b82870152615237896103808a016150d5565b6101e087015261524b896103c08a016150d5565b8587015261525d896104008a016150d5565b610220870152615271896104408a016150d5565b8187015250505050506152888461048085016150d5565b6102608201529392505050565b600083516152a7818460208801614704565b835190830190614fde818360208801614704565b815181526020808301519082015260408101612fc9565b602080825282518282018190526000919084820190604085019084805b82811015614abc578451600480821061531557634e487b7160e01b845260218152602484fd5b50845293850193928501926001016152ef565b61533d82825180518252602090810151910152565b600060208201516060604085015261174c60608501826149df565b6000610500825181855261536e828601826149df565b9150506020830151848203602086015261538882826149df565b915050604083015161539d6040860182614ac9565b5060608301518482036104c08601526153b68282615328565b91505060808301518482036104e0860152805182526001600160801b03602082015116602083015267ffffffffffffffff6040820151166040830152606081015161540e606084018280518252602090810151910152565b506080015160c060a0830181905261542890830182614730565b95945050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561548657603f19888603018452615474858351615358565b94509285019290850190600101615458565b5092979650505050505050565b805182526001600160801b0360208201511660208301526040810151610560604084018280518252602090810151910152565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156155aa57603f1989840301855281516106e08151855288820151898601528782015188860152606080830151615531828801826001600160801b03169052565b505060808083015161554582880182614805565b505060a08201516101a086015260c08201516155656101c0870182614ac9565b5060e08201518161064087015261557e82870182615328565b9150506101008201519150615597610660860183615493565b95880195935050908601906001016154ed565b509098975050505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156155aa57603f1989840301855281516105408151818652615606828701826149df565b915050888201518582038a87015261561e82826149df565b9150508782015161563189870182614ac9565b50606082015191506156476104c0860183615493565b95880195935050908601906001016155df565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561548657603f19888603018452815161020081518188526156a882890182615358565b9150508782015191506156bd888801836148d9565b9550509285019290850190600101615681565b600060e0820160e08352808a54808352610100850191508b600052602092508260002060005b82811015615712578154845292840192600191820191016156f6565b50505083810382850152615726818b614730565b915050828103604084015261573b8189614730565b9050828103606084015261574f8188614730565b905082810360808401526157638187614730565b905082810360a08401526157778186614730565b905082810360c084015261578b8185614730565b9a9950505050505050505050565b6101008101612fc982846147a3565b7f457353434150452045524332300000000000000000000000000000000000000081526bffffffffffffffffffffffff19848116600d8301527f73706f6e736f726564206279000000000000000000000000000000000000000060218301528316602d8201527f706f6c69637900000000000000000000000000000000000000000000000000006041820152815160009061584a816047850160208701614704565b9190910160470194935050505056fea2646970667358221220859879091ff5678ccc23d56bb576d7cdacc7deb5bdf59d1a7401c7ed937c26cc64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c8063a33ba96c116100d8578063d21e82ab1161008c578063f148fb4a11610066578063f148fb4a14610395578063f44ff712146103a8578063fe3cc3f8146103d557600080fd5b8063d21e82ab1461033c578063d56c1ea11461036f578063d5f394881461038257600080fd5b8063b12f7e7b116100bd578063b12f7e7b1461030e578063b4e28f1a14610321578063cb390b981461032957600080fd5b8063a33ba96c146102bf578063a7932794146102fb57600080fd5b80636868dd1f1161012f57806379cf6f5c1161011457806379cf6f5c1461026e5780639dd584b9146102765780639fda5b661461027e57600080fd5b80636868dd1f146102465780636de840601461025957600080fd5b806311829f931161016057806311829f93146101a45780631db6b253146101e55780636444c8d11461023057600080fd5b80630a2121451461017c57806310b4e3a114610191575b600080fd5b61018f61018a366004613c3b565b6103e9565b005b61018f61019f36600461466d565b610557565b6101cf6040518060400160405280600c81526020016b22b9a9a1a0a82290313ab93760a11b81525081565b6040516101dc919061475c565b60405180910390f35b61020c7f444f4d45535449435f415353455400000000000000000000000000000000000081565b60405171ffffffffffffffffffffffffffffffffffff1990911681526020016101dc565b610238610565565b6040519081526020016101dc565b61018f610254366004614776565b6105f1565b6102616107fd565b6040516101dc919061481b565b610238600181565b610238600a81565b6102a761028c36600461482a565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101dc565b6102d66c1193d4915251d397d054d4d155609a1b81565b60405172ffffffffffffffffffffffffffffffffffffff1990911681526020016101dc565b61023861030936600461482a565b61082b565b61018f61031c366004614843565b61084c565b610238600c81565b61018f61033736600461486e565b610b0e565b61035f61034a36600461482a565b60056020526000908152604090205460ff1681565b60405190151581526020016101dc565b6102a761037d3660046148a3565b611431565b6009546102a7906001600160a01b031681565b61035f6103a33660046148a3565b61147a565b6006546103bc9067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101dc565b60095461035f90600160a01b900460ff1681565b6001600160a01b0382166104445760405162461bcd60e51b815260206004820152601160248201527f426164206173736574206164647265737300000000000000000000000000000060448201526064015b60405180910390fd5b61044d8161147a565b1561049a5760405162461bcd60e51b815260206004820152601860248201527f417373657420616c726561647920726567697374657265640000000000000000604482015260640161043b565b6104ae816000015183338460200151611497565b6000816040516020016104c1919061481b565b60408051808303601f19018152828252805160209182012060008181526003835283902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03891690811790915586519085529184019190915292507f0538524c1d0e6bf3f9f91710406853761e09b531b4fed8629307955608c82611910160405180910390a1505050565b61056083610b0e565b505050565b600754604080517f6444c8d100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691636444c8d19160048083019260209291908290030181865afa1580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec91906148c0565b905090565b6002600454036106435760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161043b565b600260045560208201516106569061147a565b6106a25760405162461bcd60e51b815260206004820152601f60248201527f417373657420646566696e6974696f6e206e6f74207265676973746572656400604482015260640161043b565b806001600160a01b03166106b98360200151611431565b6001600160a01b03161461070f5760405162461bcd60e51b815260206004820152601360248201527f57726f6e67204552433230206164647265737300000000000000000000000000604482015260640161043b565b600854600a116107615760405162461bcd60e51b815260206004820152601e60248201527f50656e64696e67206465706f736974732071756575652069732066756c6c0000604482015260640161043b565b600861076c83611552565b81546001810183556000928352602090922090910155815161079c908290339030906001600160801b0316611754565b7fe77062441218c146925a31d2ebba4cb3fd6ea3069cdf81c28822c31e3a8ca98e826040516020016107ce9190614935565b60408051601f19818403018152908290526107ec9184903390614944565b60405180910390a150506001600455565b6108056134b0565b600180825260208083018051518201839052805182015182018390525160400151015290565b6008818154811061083b57600080fd5b600091825260209091200154905081565b6009546001600160a01b031633146108a65760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c7920696e766f6361626c65206279206465706c6f796572000000000000604482015260640161043b565b600954600160a01b900460ff16156109005760405162461bcd60e51b815260206004820152601560248201527f46617563657420616c7265616479207365742075700000000000000000000000604482015260640161043b565b60006040518060c0016040528060026001600160801b0361092191906149a3565b6001600160801b031681526020016109376107fd565b815260208101859052604080820185905260006060830181905260809092018290528051600180825281830190925292935090919081602001602082028036833701905050905061098782611552565b8160008151811061099a5761099a6149c9565b602090810291909101015260075460405163330ee6a760e01b81526001600160a01b039091169063330ee6a7906109d5908490600401614a1a565b600060405180830381600087803b1580156109ef57600080fd5b505af1158015610a03573d6000803e3d6000fd5b50505050610a86600760009054906101000a90046001600160a01b03166001600160a01b0316636444c8d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8191906148c0565b611803565b7fc27eb5ac1e750e98e913252f09c9b96d224b2ef9117e3a3cd446d5ecdd94aa8c82604051602001610ab89190614935565b60408051601f1981840301815290829052610ad29161475c565b60405180910390a15050600980547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790555050565b600260045403610b605760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161043b565b6002600455600854600090610b8790610b788461194b565b610b829190614a2d565b611a70565b60208301515190915060008167ffffffffffffffff811115610bab57610bab613a16565b604051908082528060200260200182016040528015610be457816020015b610bd16134cf565b815260200190600190039081610bc95790505b50905060008267ffffffffffffffff811115610c0257610c02613a16565b604051908082528060200260200182016040528015610c3557816020015b6060815260200190600190039081610c205790505b50905060008367ffffffffffffffff811115610c5357610c53613a16565b604051908082528060200260200182016040528015610c8c57816020015b610c79613748565b815260200190600190039081610c715790505b50905060008467ffffffffffffffff811115610caa57610caa613a16565b604051908082528060200260200182016040528015610cdd57816020015b6060815260200190600190039081610cc85790505b509050600080808088158015610cf35750600854155b15610d405760405162461bcd60e51b815260206004820152601760248201527f426c6f636b206d757374206265206e6f6e2d656d707479000000000000000000604482015260640161043b565b60005b898110156111c45760008c602001518281518110610d6357610d636149c9565b6020026020010151905060006003811115610d8057610d80614a45565b816003811115610d9257610d92614a45565b03610ee85760008d604001518781518110610daf57610daf6149c9565b60200260200101519050600187610dc69190614a2d565b9650610dd9816080015160000151611ae3565b610de281611b44565b60065460808201516040015167ffffffffffffffff91821691161015610e4a5760405162461bcd60e51b815260206004820152600c60248201527f45787069726564206e6f74650000000000000000000000000000000000000000604482015260640161043b565b8051610e5590611ba2565b6020810151610e65908e90611be6565b610e6e81611c69565b8e8781518110610e8057610e806149c9565b602002602001018e8881518110610e9957610e996149c9565b602002602001018e8981518110610eb257610eb26149c9565b602002602001018e8a81518110610ecb57610ecb6149c9565b6020026020010184905284905284905284905250505050506111b1565b6001816003811115610efc57610efc614a45565b03610f8e5760008d606001518681518110610f1957610f196149c9565b60200260200101519050600186610f309190614a2d565b9550610f4481610100015160000151611ae3565b610f5a8160800151600001518260a00151612150565b8051610f65906121f7565b6020810151610f75908e90612271565b6040810151610f85908e90612271565b610e6e816122ab565b6002816003811115610fa257610fa2614a45565b0361100d5760008d608001518581518110610fbf57610fbf6149c9565b60200260200101519050600185610fd69190614a2d565b9450610fe9816060015160000151611ae3565b8051610ff490611ba2565b6020810151611004908e90611be6565b610e6e81612873565b600381600381111561102157611021614a45565b036111695760008d60a00151848151811061103e5761103e6149c9565b602002602001015190506001846110559190614a2d565b8151608001515190945061106890611ae3565b61107181612be8565b80515161107d90611ba2565b60005b815160200151518110156110dc57806001146110ca576110ca82600001516020015182815181106110b3576110b36149c9565b60200260200101518f61227190919063ffffffff16565b806110d481614a5b565b915050611080565b506110e681612c9c565b8e87815181106110f8576110f86149c9565b602002602001018e8881518110611111576111116149c9565b602002602001018e898151811061112a5761112a6149c9565b602002602001018e8a81518110611143576111436149c9565b602002602001018490528490528490528490525050505061116381612ccc565b506111b1565b60405162461bcd60e51b815260206004820152601260248201527f436170653a20756e726561636861626c65210000000000000000000000000000604482015260640161043b565b50806111bc81614a5b565b915050610d43565b5088156112b2576006546040517f830affd6000000000000000000000000000000000000000000000000000000008152680100000000000000009091046001600160a01b03169063830affd690611225908b908b908b908b90600401614d30565b602060405180830381865afa158015611242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112669190614f9e565b6112b25760405162461bcd60e51b815260206004820152601a60248201527f436170653a20626174636820766572696679206661696c65642e000000000000604482015260640161043b565b60005b600854811015611301576112ef600882815481106112d5576112d56149c9565b90600052602060002001548c61227190919063ffffffff16565b806112f981614a5b565b9150506112b5565b5060208a0151156113c4576007548a5160405163330ee6a760e01b81526001600160a01b039092169163330ee6a79161133c91600401614a1a565b600060405180830381600087803b15801561135657600080fd5b505af115801561136a573d6000803e3d6000fd5b505050506113c4600760009054906101000a90046001600160a01b03166001600160a01b0316636444c8d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a5d573d6000803e3d6000fd5b60068054600191906000906113e490849067ffffffffffffffff16614fbb565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506114138b612d18565b61141f6008600061394d565b50506001600455505050505050505050565b60008082604051602001611445919061481b565b60408051601f198184030181529181528151602092830120600090815260039092529020546001600160a01b03169392505050565b60008061148683611431565b6001600160a01b0316141592915050565b60006114a4848484612e3e565b90506114fd6c1193d4915251d397d054d4d155609a1b826040516020016114cc929190614fe7565b60408051601f1981840301815282825280516020918201209083015201604051602081830303815290604052612e90565b851461154b5760405162461bcd60e51b815260206004820152601860248201527f57726f6e6720666f726569676e20617373657420636f64650000000000000000604482015260640161043b565b5050505050565b600061100082602001516020015160600151106115b15760405162461bcd60e51b815260206004820152601a60248201527f52657665616c206d617020657863656564732031322062697473000000000000604482015260640161043b565b600082608001516115c35760006115c6565b60015b60ff168360200151602001516060015160026115e29190615023565b6115ec9190614a2d565b604080516101e08101825260a080870151825286516001600160801b0390811660208085019190915280890180515185870152898601805151606087015251820151608080870191909152815183015151519486019490945280518201515182015160c086015280518201518201515160e0860152805182015182015182015161010086015280518201518601515161012086015280518201518601518201516101408601526101608501879052510151909101511661018082015260006101a082018190526101c082015290517f8c5480360000000000000000000000000000000000000000000000000000000081529192509073__$2783a64b147d5f689049cabc192a316d9d$__90638c5480369061170b908490600401615042565b602060405180830381865af4158015611728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174c91906148c0565b949350505050565b60006040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526001600160a01b038416602482015282604482015260008060648360008a5af19150506117b781612f34565b61154b5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015260640161043b565b60008181526001602052604090205460ff16156118625760405162461bcd60e51b815260206004820152601360248201527f526f6f7420616c72656164792065786973747300000000000000000000000000604482015260640161043b565b6002546000805490916001918391829167ffffffffffffffff90911690811061188d5761188d6149c9565b60009182526020808320919091015483528201929092526040018120805460ff191692151592909217909155600254815483929167ffffffffffffffff169081106118da576118da6149c9565b600091825260208083209091019290925582815260019182905260408120805460ff19168317905554600254909161191c9167ffffffffffffffff1690614fbb565b6119269190615074565b6002805467ffffffffffffffff191667ffffffffffffffff9290921691909117905550565b60008082606001515160026119609190615023565b905060005b8360400151518110156119b45783604001518181518110611988576119886149c9565b60200260200101516020015151826119a09190614a2d565b9150806119ac81614a5b565b915050611965565b5060005b8360a0015151811015611a165760018460a0015182815181106119dd576119dd6149c9565b60200260200101516000015160200151516119f8919061509b565b611a029083614a2d565b915080611a0e81614a5b565b9150506119b8565b5060005b836080015151811015611a695783608001518181518110611a3d57611a3d6149c9565b6020026020010151602001515182611a559190614a2d565b915080611a6181614a5b565b915050611a1a565b5092915050565b60408051808201909152606081526000602082015260405180604001604052808367ffffffffffffffff811115611aa957611aa9613a16565b604051908082528060200260200182016040528015611ad2578160200160208202803683370190505b508152600060209091015292915050565b60008181526001602052604090205460ff16611b415760405162461bcd60e51b815260206004820152600e60248201527f526f6f74206e6f7420666f756e64000000000000000000000000000000000000604482015260640161043b565b50565b611b55816080015160800151612f7b565b15611b415760405162461bcd60e51b815260206004820152601c60248201527f4275726e2070726566697820696e207472616e73666572206e6f746500000000604482015260640161043b565b60005b8151811015611be257611bd0828281518110611bc357611bc36149c9565b60200260200101516121f7565b80611bda81614a5b565b915050611ba5565b5050565b60005b8151811015611c4e57818181518110611c0457611c046149c9565b60200260200101518360000151846020015183611c219190614a2d565b81518110611c3157611c316149c9565b602090810291909101015280611c4681614a5b565b915050611be9565b50805182602001818151611c629190614a2d565b9052505050565b611c716134cf565b6060611c7b613748565b606073__$83dbcae801b35109718c5df795b4aa345f$__63b95a6ecc816322e6017b60008951516020808c015151600754604080516319efb11d60e01b8152905192936001600160a01b03909216926319efb11d926004808401939192918290030181865afa158015611cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1691906150b2565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260ff9485166004820152928416602484015290831660448301529091166064820152608401602060405180830381865af4158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da891906148c0565b6040518263ffffffff1660e01b8152600401611dc691815260200190565b6104c060405180830381865af4158015611de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e089190615105565b9350846060015160200151518560200151518660000151516004611e2c9190614a2d565b611e369190614a2d565b611e41906002614a2d565b611e4b9190614a2d565b67ffffffffffffffff811115611e6357611e63613a16565b604051908082528060200260200182016040528015611e8c578160200160208202803683370190505b50925084608001516000015183600081518110611eab57611eab6149c9565b602002602001018181525050600183600181518110611ecc57611ecc6149c9565b60200260200101818152505084608001516040015167ffffffffffffffff1683600281518110611efe57611efe6149c9565b6020026020010181815250508460800151602001516001600160801b031683600381518110611f2f57611f2f6149c9565b6020908102919091010152600460005b865151811015611f9f578651805182908110611f5d57611f5d6149c9565b6020026020010151858284611f729190614a2d565b81518110611f8257611f826149c9565b602090810291909101015280611f9781614a5b565b915050611f3f565b50855151611fad9082614a2d565b905060005b8660200151518110156120175786602001518181518110611fd557611fd56149c9565b6020026020010151858284611fea9190614a2d565b81518110611ffa57611ffa6149c9565b60209081029190910101528061200f81614a5b565b915050611fb2565b506020860151516120289082614a2d565b905085606001516000015160000151848281518110612049576120496149c9565b60209081029190910181019190915260608701515101518461206c836001614a2d565b8151811061207c5761207c6149c9565b6020908102919091010152612092600282614a2d565b905060005b866060015160200151518110156121045786606001516020015181815181106120c2576120c26149c9565b60200260200101518582846120d79190614a2d565b815181106120e7576120e76149c9565b6020908102919091010152806120fc81614a5b565b915050612097565b50508460400151915061211e856080015160600151612fcf565b856080015160800151604051602001612138929190615295565b60405160208183030381529060405290509193509193565b6121a97f444f4d45535449435f415353455400000000000000000000000000000000000061217d83613063565b60405171ffffffffffffffffffffffffffffffffffff199092166020830152602e820152604e016114cc565b8214611be25760405162461bcd60e51b815260206004820152601960248201527f57726f6e6720646f6d657374696320617373657420636f646500000000000000604482015260640161043b565b60008181526005602052604090205460ff16156122565760405162461bcd60e51b815260206004820152601b60248201527f4e756c6c696669657220616c7265616479207075626c69736865640000000000604482015260640161043b565b6000908152600560205260409020805460ff19166001179055565b80826000015183602001518151811061228c5761228c6149c9565b602002602001018181525050600182602001818151611c629190614a2d565b6122b36134cf565b60606122bd613748565b606073__$83dbcae801b35109718c5df795b4aa345f$__63b95a6ecc816322e6017b6001806002600760009054906101000a90046001600160a01b03166001600160a01b03166319efb11d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235b91906150b2565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260ff9485166004820152928416602484015290831660448301529091166064820152608401602060405180830381865af41580156123c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ed91906148c0565b6040518263ffffffff1660e01b815260040161240b91815260200190565b6104c060405180830381865af4158015612429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244d9190615105565b93508460e00151602001515160136124659190614a2d565b67ffffffffffffffff81111561247d5761247d613a16565b6040519080825280602002602001820160405280156124a6578160200160208202803683370190505b50925084610100015160000151836000815181106124c6576124c66149c9565b6020026020010181815250506001836001815181106124e7576124e76149c9565b60200260200101818152505084600001518360028151811061250b5761250b6149c9565b602002602001018181525050846101000151602001516001600160801b03168360038151811061253d5761253d6149c9565b602002602001018181525050846040015183600481518110612561576125616149c9565b602002602001018181525050846020015183600581518110612585576125856149c9565b60200260200101818152505084606001516001600160801b0316836006815181106125b2576125b26149c9565b602002602001018181525050846080015160000151836007815181106125da576125da6149c9565b6020026020010181815250508460a00151836008815181106125fe576125fe6149c9565b602002602001018181525050846080015160200151606001518360098151811061262a5761262a6149c9565b602002602001018181525050846080015160200151600001516000015183600a8151811061265a5761265a6149c9565b602002602001018181525050846080015160200151600001516020015183600b8151811061268a5761268a6149c9565b602002602001018181525050846080015160200151602001516000015183600c815181106126ba576126ba6149c9565b602002602001018181525050846080015160200151602001516020015183600d815181106126ea576126ea6149c9565b602002602001018181525050846080015160200151604001516000015183600e8151811061271a5761271a6149c9565b602002602001018181525050846080015160200151604001516020015183600f8151811061274a5761274a6149c9565b602002602001018181525050846080015160200151608001516001600160801b03168360108151811061277f5761277f6149c9565b602090810291909101015260e085015151518351849060119081106127a6576127a66149c9565b6020026020010181815250508460e001516000015160200151836012815181106127d2576127d26149c9565b6020908102919091010152601360005b8660e00151602001515181101561284f578660e0015160200151818151811061280d5761280d6149c9565b60200260200101518582846128229190614a2d565b81518110612832576128326149c9565b60209081029190910101528061284781614a5b565b9150506127e2565b50508460c00151915061286a85610100015160400151612fcf565b90509193509193565b61287b6134cf565b6060612885613748565b606073__$83dbcae801b35109718c5df795b4aa345f$__63b95a6ecc816322e6017b60028951516020808c015151600754604080516319efb11d60e01b8152905192936001600160a01b03909216926319efb11d926004808401939192918290030181865afa1580156128fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292091906150b2565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260ff9485166004820152928416602484015290831660448301529091166064820152608401602060405180830381865af415801561298e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b291906148c0565b6040518263ffffffff1660e01b81526004016129d091815260200190565b6104c060405180830381865af41580156129ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a129190615105565b60208601515186515191955090612a2a906003614a2d565b612a349190614a2d565b67ffffffffffffffff811115612a4c57612a4c613a16565b604051908082528060200260200182016040528015612a75578160200160208202803683370190505b50925084606001516000015183600081518110612a9457612a946149c9565b602002602001018181525050600183600181518110612ab557612ab56149c9565b6020026020010181815250508460600151602001516001600160801b031683600281518110612ae657612ae66149c9565b6020908102919091010152600360005b865151811015612b56578651805182908110612b1457612b146149c9565b6020026020010151858284612b299190614a2d565b81518110612b3957612b396149c9565b602090810291909101015280612b4e81614a5b565b915050612af6565b50855151612b649082614a2d565b905060005b866020015151811015612bce5786602001518181518110612b8c57612b8c6149c9565b6020026020010151858284612ba19190614a2d565b81518110612bb157612bb16149c9565b602090810291909101015280612bc681614a5b565b915050612b69565b50508460400151915061286a856060015160400151612fcf565b80516080908101510151612bfb81612f7b565b612c475760405162461bcd60e51b815260206004820152600c60248201527f426164206275726e207461670000000000000000000000000000000000000000604482015260640161043b565b612c50826131af565b611be25760405162461bcd60e51b815260206004820152601560248201527f426164207265636f726420636f6d6d69746d656e740000000000000000000000604482015260640161043b565b612ca46134cf565b6060612cae613748565b6060612cbd8560000151611c69565b93509350935093509193509193565b6000612cdf826020015160200151611431565b90506000612cfa83600001516080015160800151600c613209565b905061056082828560200151600001516001600160801b031661327f565b600654815160405167ffffffffffffffff909216917fc34977751f08a257da613aa9db576f9b4edca0aef20e5b401f9c590a4d0c8fed91600891612d5f91906020016152bb565b6040516020818303038152906040528460200151604051602001612d8391906152d2565b6040516020818303038152906040528560400151604051602001612da79190615431565b6040516020818303038152906040528660600151604051602001612dcb91906154c6565b6040516020818303038152906040528760800151604051602001612def91906155b8565b6040516020818303038152906040528860a00151604051602001612e13919061565a565b60408051601f1981840301815290829052612e33979695949392916156d0565b60405180910390a250565b60608360601b8360601b83604051602001612e599190615799565b60408051601f1981840301815290829052612e789392916020016157a8565b60405160208183030381529060405290509392505050565b6000805b8251811015612f2e577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610100830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838260018651612ef6919061509b565b612f00919061509b565b81518110612f1057612f106149c9565b016020015160f81c8308915080612f2681614a5b565b915050612e94565b50919050565b60003d82612f4657806000803e806000fd5b8060208114612f5e578015612f6f5760009250612f74565b816000803e60005115159250612f74565b600192505b5050919050565b6000600c82511015612f8f57506000919050565b612fc9612f9f836000600c613325565b6040518060400160405280600c81526020016b22b9a9a1a0a82290313ab93760a11b81525061344d565b92915050565b6060600061300683602001517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160019190911b1090565b61302d57507f80000000000000000000000000000000000000000000000000000000000000005b825161303a908217613063565b60405160200161304c91815260200190565b604051602081830303815290604052915050919050565b60008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b6008827fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0016901c1790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b6010827fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c1790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b6020827fffffffff00000000ffffffff00000000ffffffff00000000ffffffff0000000016901c17905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b6040827fffffffffffffffff0000000000000000ffffffffffffffff000000000000000016901c179050608081901b608082901c179050919050565b600060028260000151602001515110156131cb57506000919050565b60006131da8360200151611552565b90508260000151602001516001815181106131f7576131f76149c9565b60200260200101518114915050919050565b6000613216826014614a2d565b835110156132665760405162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015260640161043b565b5001602001516c01000000000000000000000000900490565b60006040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201528260248201526000806044836000895af19150506132d381612f34565b61331f5760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161043b565b50505050565b60608161333381601f614a2d565b10156133815760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015260640161043b565b61338b8284614a2d565b845110156133db5760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015260640161043b565b6060821580156133fa5760405191506000825260208201604052613444565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561343357805183526020928301920161341b565b5050858452601f01601f1916604052505b50949350505050565b81518151600091600191811480831461346957600092506134a6565b600160208701838101602088015b60028483851001036134a15780518351146134955760009650600093505b60209283019201613477565b505050505b5090949350505050565b6040518060400160405280600081526020016134ca61396b565b905290565b6040518061028001604052806000815260200160008152602001613506604051806040016040528060008152602001600081525090565b8152602001613528604051806040016040528060008152602001600081525090565b815260200161354a604051806040016040528060008152602001600081525090565b815260200161356c604051806040016040528060008152602001600081525090565b815260200161358e604051806040016040528060008152602001600081525090565b81526020016135b0604051806040016040528060008152602001600081525090565b81526020016135d2604051806040016040528060008152602001600081525090565b81526020016135f4604051806040016040528060008152602001600081525090565b8152602001613616604051806040016040528060008152602001600081525090565b8152602001613638604051806040016040528060008152602001600081525090565b815260200161365a604051806040016040528060008152602001600081525090565b815260200161367c604051806040016040528060008152602001600081525090565b815260200161369e604051806040016040528060008152602001600081525090565b81526020016136c0604051806040016040528060008152602001600081525090565b81526020016136e2604051806040016040528060008152602001600081525090565b8152602001613704604051806040016040528060008152602001600081525090565b8152602001613726604051806040016040528060008152602001600081525090565b81526020016134ca604051806040016040528060008152602001600081525090565b60408051610320810190915260006102e082018181526103008301919091528190815260200161378b604051806040016040528060008152602001600081525090565b81526020016137ad604051806040016040528060008152602001600081525090565b81526020016137cf604051806040016040528060008152602001600081525090565b81526020016137f1604051806040016040528060008152602001600081525090565b8152602001613813604051806040016040528060008152602001600081525090565b8152602001613835604051806040016040528060008152602001600081525090565b8152602001613857604051806040016040528060008152602001600081525090565b8152602001613879604051806040016040528060008152602001600081525090565b815260200161389b604051806040016040528060008152602001600081525090565b81526020016138bd604051806040016040528060008152602001600081525090565b81526020016138df604051806040016040528060008152602001600081525090565b8152602001613901604051806040016040528060008152602001600081525090565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5080546000825590600052602060002090810190611b4191906139e1565b6040805160e08101909152600060a0820181815260c0830191909152819081526020016139ab604051806040016040528060008152602001600081525090565b81526020016139cd604051806040016040528060008152602001600081525090565b815260006020820181905260409091015290565b5b808211156139f657600081556001016139e2565b5090565b80356001600160a01b0381168114613a1157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b60405290565b60405160a0810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b6040516102e0810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b604051610120810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b6040516080810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b60405160c0810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b604051610280810167ffffffffffffffff81118282101715613a4f57613a4f613a16565b604051601f8201601f1916810167ffffffffffffffff81118282101715613b5357613b53613a16565b604052919050565b600060408284031215613b6d57600080fd5b613b75613a2c565b9050813581526020820135602082015292915050565b80356001600160801b0381168114613a1157600080fd5b6000818303610120811215613bb657600080fd5b613bbe613a2c565b91508235825261010080601f1983011215613bd857600080fd5b613be0613a55565b9150613bef8560208601613b5b565b8252613bfe8560608601613b5b565b6020830152613c108560a08601613b5b565b604083015260e08401356060830152613c2a818501613b8b565b608083015250602082015292915050565b6000806101408385031215613c4f57600080fd5b613c58836139fa565b9150613c678460208501613ba2565b90509250929050565b600067ffffffffffffffff821115613c8a57613c8a613a16565b5060051b60200190565b600082601f830112613ca557600080fd5b81356020613cba613cb583613c70565b613b2a565b82815260059290921b84018101918181019086841115613cd957600080fd5b8286015b84811015613d0257803560048110613cf55760008081fd5b8352918301918301613cdd565b509695505050505050565b600082601f830112613d1e57600080fd5b81356020613d2e613cb583613c70565b82815260059290921b84018101918181019086841115613d4d57600080fd5b8286015b84811015613d025780358352918301918301613d51565b60006104808284031215613d7b57600080fd5b613d83613a78565b9050613d8f8383613b5b565b8152613d9e8360408401613b5b565b6020820152613db08360808401613b5b565b6040820152613dc28360c08401613b5b565b6060820152610100613dd684828501613b5b565b6080830152610140613dea85828601613b5b565b60a0840152610180613dfe86828701613b5b565b60c08501526101c0613e1287828801613b5b565b60e0860152610200613e2688828901613b5b565b858701526102409450613e3b88868901613b5b565b610120870152610280613e5089828a01613b5b565b858801526102c09450613e6589868a01613b5b565b610160880152613e79896103008a01613b5b565b848801526103408801356101a0880152610360880135838801526103808801356101e08801526103a0880135828801526103c08801356102208801526103e08801358688015261040088013561026088015261042088013581880152505050506104408401356102a084015261046084013581840152505092915050565b600060608284031215613f0957600080fd5b613f11613a2c565b9050613f1d8383613b5b565b8152604082013567ffffffffffffffff811115613f3957600080fd5b613f4584828501613d0d565b60208301525092915050565b600060c08284031215613f6357600080fd5b613f6b613a55565b9050813581526020613f7e818401613b8b565b81830152604083013567ffffffffffffffff8082168214613f9e57600080fd5b816040850152613fb18660608701613b5b565b606085015260a0850135915080821115613fca57600080fd5b818501915085601f830112613fde57600080fd5b813581811115613ff057613ff0613a16565b614002601f8201601f19168501613b2a565b9150808252868482850101111561401857600080fd5b808484018584013760008482840101525080608085015250505092915050565b6000610500828403121561404b57600080fd5b614053613a55565b9050813567ffffffffffffffff8082111561406d57600080fd5b61407985838601613d0d565b8352602084013591508082111561408f57600080fd5b61409b85838601613d0d565b60208401526140ad8560408601613d68565b60408401526104c08401359150808211156140c757600080fd5b6140d385838601613ef7565b60608401526104e08401359150808211156140ed57600080fd5b506140fa84828501613f51565b60808301525092915050565b600082601f83011261411757600080fd5b81356020614127613cb583613c70565b82815260059290921b8401810191818101908684111561414657600080fd5b8286015b84811015613d0257803567ffffffffffffffff81111561416a5760008081fd5b6141788986838b0101614038565b84525091830191830161414a565b60006080828403121561419857600080fd5b6040516060810181811067ffffffffffffffff821117156141bb576141bb613a16565b604052823581529050806141d160208401613b8b565b60208201526141e38460408501613b5b565b60408201525092915050565b600082601f83011261420057600080fd5b81356020614210613cb583613c70565b82815260059290921b8401810191818101908684111561422f57600080fd5b8286015b84811015613d0257803567ffffffffffffffff808211156142545760008081fd5b908801906106e0828b03601f1901121561426e5760008081fd5b614276613a9c565b86830135815260408084013588830152606080850135828401526080915061429f828601613b8b565b9083015260a06142b18d868301613ba2565b828401526101c08501358184015250506142cf8b6101e08501613d68565b60c0820152610660830135828111156142e85760008081fd5b6142f68c8983870101613ef7565b60e08301525061430a8b6106808501614186565b61010082015285525050918301918301614233565b600082601f83011261433057600080fd5b81356020614340613cb583613c70565b82815260059290921b8401810191818101908684111561435f57600080fd5b8286015b84811015613d0257803567ffffffffffffffff808211156143845760008081fd5b90880190610540828b03601f1901121561439e5760008081fd5b6143a6613ac0565b86830135828111156143b85760008081fd5b6143c68c8983870101613d0d565b825250604080840135838111156143dd5760008081fd5b6143eb8d8a83880101613d0d565b8984015250606092506144008c848601613d68565b908201526144128b6104e08501614186565b91810191909152845250918301918301614363565b8015158114611b4157600080fd5b60006101e0828403121561444857600080fd5b614450613ae3565b905061445b82613b8b565b815261446a8360208401613ba2565b602082015261447d836101408401613b5b565b604082015261018082013560608201526101a082013561449c81614427565b60808201526101c0919091013560a0820152919050565b600082601f8301126144c457600080fd5b813560206144d4613cb583613c70565b82815260059290921b840181019181810190868411156144f357600080fd5b8286015b84811015613d0257803567ffffffffffffffff808211156145185760008081fd5b90880190610200828b03601f190112156145325760008081fd5b61453a613a2c565b868301358281111561454c5760008081fd5b61455a8c8983870101614038565b82525061456a8b60408501614435565b81880152855250509183019183016144f7565b600060e0828403121561458f57600080fd5b614597613ae3565b90506145a38383613b5b565b8152604082013567ffffffffffffffff808211156145c057600080fd5b6145cc85838601613c94565b602084015260608401359150808211156145e557600080fd5b6145f185838601614106565b6040840152608084013591508082111561460a57600080fd5b614616858386016141ef565b606084015260a084013591508082111561462f57600080fd5b61463b8583860161431f565b608084015260c084013591508082111561465457600080fd5b50614661848285016144b3565b60a08301525092915050565b60008060006040848603121561468257600080fd5b833567ffffffffffffffff8082111561469a57600080fd5b6146a68783880161457d565b945060208601359150808211156146bc57600080fd5b818601915086601f8301126146d057600080fd5b8135818111156146df57600080fd5b8760208285010111156146f157600080fd5b6020830194508093505050509250925092565b60005b8381101561471f578181015183820152602001614707565b8381111561331f5750506000910152565b60008151808452614748816020860160208601614704565b601f01601f19169290920160200192915050565b60208152600061476f6020830184614730565b9392505050565b600080610200838503121561478a57600080fd5b6147948484614435565b9150613c676101e084016139fa565b6147b882825180518252602090810151910152565b6020818101518051604085015290810151606084015250604081015180516080840152602081015160a084015250606081015160c0830152608001516001600160801b031660e090910152565b80518252602081015161056060208401826147a3565b6101208101612fc98284614805565b60006020828403121561483c57600080fd5b5035919050565b6000806060838503121561485657600080fd5b6148608484613b5b565b946040939093013593505050565b60006020828403121561488057600080fd5b813567ffffffffffffffff81111561489757600080fd5b61174c8482850161457d565b600061012082840312156148b657600080fd5b61476f8383613ba2565b6000602082840312156148d257600080fd5b5051919050565b6001600160801b03815116825260208101516148f86020840182614805565b5060408101518051610140840152602001516101608301526060810151610180830152608081015115156101a083015260a001516101c090910152565b6101e08101612fc982846148d9565b6060815260006149576060830186614730565b6001600160a01b0394851660208401529290931660409091015292915050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160801b03808416806149bd576149bd614977565b92169190910492915050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015614a0f578151875295820195908201906001016149f3565b509495945050505050565b60208152600061476f60208301846149df565b60008219821115614a4057614a4061498d565b500190565b634e487b7160e01b600052602160045260246000fd5b600060018201614a6d57614a6d61498d565b5060010190565b600081518084526020808501808196508360051b8101915082860160005b85811015614abc578284038952614aaa8483516149df565b98850198935090840190600101614a92565b5091979650505050505050565b614ade82825180518252602090810151910152565b6020818101518051604085015290810151606084015250604081015180516080840152602081015160a0840152506060810151805160c0840152602081015160e0840152506080810151610100614b418185018380518252602090810151910152565b60a08301519150610140614b618186018480518252602090810151910152565b60c08401519250610180614b818187018580518252602090810151910152565b60e085015193506101c0614ba18188018680518252602090810151910152565b92850151935061020092614bc18785018680518252602090810151910152565b6101208601519450610240614be28189018780518252602090810151910152565b92860151945061028092614c028885018780518252602090810151910152565b61016087015195506102c0614c23818a018880518252602090810151910152565b9287015180516103008a0152602001516103208901526101a0870151610340890152908601516103608801526101e0860151610380880152928501516103a08701526102208501516103c0870152918401516103e08601526102608401516104008601528301516104208501526102a0830151610440850152909101516104609092019190915250565b600081518084526020808501945080840160005b83811015614a0f57614cd4878351614ac9565b610480969096019590820190600101614cc1565b600081518084526020808501808196508360051b8101915082860160005b85811015614abc578284038952614d1e848351614730565b98850198935090840190600101614d06565b608080825285518282018190526000919060a090818501906020808b01865b83811015614f555781518051865283810151848701526040808201518051828901526020810151606089015250506060810151614d988988018280518252602090810151910152565b508781015160c0614db58189018380518252602090810151910152565b888301519150610100614dd4818a018480518252602090810151910152565b90830151915061014090614df48983018480518252602090810151910152565b60e08401519250610180614e14818b018580518252602090810151910152565b9084015192506101c090614e348a83018580518252602090810151910152565b6101208501519350610200614e55818c018680518252602090810151910152565b92850151935061024092614e758b85018680518252602090810151910152565b61016086015180516102808d01526020908101516102a08d01529186015180516102c08d01528201516102e08c01526101a086015180516103008d01528201516103208c01529185015180516103408c01528101516103608b01526101e085015180516103808c01528101516103a08b01529084015180516103c08b01528101516103e08a015261022084015180516104008b01528101516104208a01529083015180516104408a0152810151610460890152610260909201518051610480890152909101516104a0870152506104c09094019390820190600101614d4f565b50508683039087015250614f698189614a74565b925050508281036040840152614f7f8186614cad565b90508281036060840152614f938185614ce8565b979650505050505050565b600060208284031215614fb057600080fd5b815161476f81614427565b600067ffffffffffffffff808316818516808303821115614fde57614fde61498d565b01949350505050565b72ffffffffffffffffffffffffffffffffffffff19831681526000825161501581600d850160208701614704565b91909101600d019392505050565b600081600019048311821515161561503d5761503d61498d565b500290565b6101e08101818360005b600f81101561506b57815183526020928301929091019060010161504c565b50505092915050565b600067ffffffffffffffff8084168061508f5761508f614977565b92169190910692915050565b6000828210156150ad576150ad61498d565b500390565b6000602082840312156150c457600080fd5b815160ff8116811461476f57600080fd5b6000604082840312156150e757600080fd5b6150ef613a2c565b9050815181526020820151602082015292915050565b60006104c0828403121561511857600080fd5b615120613b06565b825181526020830151602082015261513b84604085016150d5565b604082015261514d84608085016150d5565b606082015261515f8460c085016150d5565b6080820152610100615173858286016150d5565b60a0830152610140615187868287016150d5565b60c084015261018061519b878288016150d5565b60e08501526101c06151af888289016150d5565b8486015261020093506151c4888589016150d5565b6101208601526102406151d989828a016150d5565b848701526151eb896102808a016150d5565b6101608701526151ff896102c08a016150d5565b83870152615211896103008a016150d5565b6101a0870152615225896103408a016150d5565b82870152615237896103808a016150d5565b6101e087015261524b896103c08a016150d5565b8587015261525d896104008a016150d5565b610220870152615271896104408a016150d5565b8187015250505050506152888461048085016150d5565b6102608201529392505050565b600083516152a7818460208801614704565b835190830190614fde818360208801614704565b815181526020808301519082015260408101612fc9565b602080825282518282018190526000919084820190604085019084805b82811015614abc578451600480821061531557634e487b7160e01b845260218152602484fd5b50845293850193928501926001016152ef565b61533d82825180518252602090810151910152565b600060208201516060604085015261174c60608501826149df565b6000610500825181855261536e828601826149df565b9150506020830151848203602086015261538882826149df565b915050604083015161539d6040860182614ac9565b5060608301518482036104c08601526153b68282615328565b91505060808301518482036104e0860152805182526001600160801b03602082015116602083015267ffffffffffffffff6040820151166040830152606081015161540e606084018280518252602090810151910152565b506080015160c060a0830181905261542890830182614730565b95945050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561548657603f19888603018452615474858351615358565b94509285019290850190600101615458565b5092979650505050505050565b805182526001600160801b0360208201511660208301526040810151610560604084018280518252602090810151910152565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156155aa57603f1989840301855281516106e08151855288820151898601528782015188860152606080830151615531828801826001600160801b03169052565b505060808083015161554582880182614805565b505060a08201516101a086015260c08201516155656101c0870182614ac9565b5060e08201518161064087015261557e82870182615328565b9150506101008201519150615597610660860183615493565b95880195935050908601906001016154ed565b509098975050505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156155aa57603f1989840301855281516105408151818652615606828701826149df565b915050888201518582038a87015261561e82826149df565b9150508782015161563189870182614ac9565b50606082015191506156476104c0860183615493565b95880195935050908601906001016155df565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561548657603f19888603018452815161020081518188526156a882890182615358565b9150508782015191506156bd888801836148d9565b9550509285019290850190600101615681565b600060e0820160e08352808a54808352610100850191508b600052602092508260002060005b82811015615712578154845292840192600191820191016156f6565b50505083810382850152615726818b614730565b915050828103604084015261573b8189614730565b9050828103606084015261574f8188614730565b905082810360808401526157638187614730565b905082810360a08401526157778186614730565b905082810360c084015261578b8185614730565b9a9950505050505050505050565b6101008101612fc982846147a3565b7f457353434150452045524332300000000000000000000000000000000000000081526bffffffffffffffffffffffff19848116600d8301527f73706f6e736f726564206279000000000000000000000000000000000000000060218301528316602d8201527f706f6c69637900000000000000000000000000000000000000000000000000006041820152815160009061584a816047850160208701614704565b9190910160470194935050505056fea2646970667358221220859879091ff5678ccc23d56bb576d7cdacc7deb5bdf59d1a7401c7ed937c26cc64736f6c634300080d0033",
  "libraries": {
    "RescueLib": "0x65544E31DDee5CEdBee2D2cbA1eD341F361141bf",
    "VerifyingKeys": "0xb91F732F69a6a6B0A113ED2DD2685e1FeBf73137"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "nRoots": "number of the most recent roots of the records merkle tree to be stored",
          "verifierAddr": "address of the Plonk Verifier contract"
        }
      },
      "depositErc20((uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256),address)": {
        "params": {
          "erc20Address": "address of the ERC-20 token corresponding to the deposit",
          "ro": "record opening that will be inserted in the records merkle tree once the deposit is validated"
        }
      },
      "faucetSetupForTestnet((uint256,uint256),bytes32)": {
        "params": {
          "faucetManagerAddress": "address of public key of faucet manager for CAP native token (testnet only!)",
          "faucetManagerEncKey": "public key of faucet manager for CAP native token (testnet only!)"
        }
      },
      "isCapeAssetRegistered((uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))": {
        "params": {
          "assetDefinition": "an asset definition"
        },
        "returns": {
          "_0": "True if the asset type is registered, false otherwise."
        }
      },
      "lookup((uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))": {
        "params": {
          "assetDefinition": "an asset definition"
        },
        "returns": {
          "_0": "An ERC-20 address"
        }
      },
      "sponsorCapeAsset(address,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))": {
        "params": {
          "erc20Address": "An ERC-20 token address",
          "newAsset": "An asset type to be registered in the contract"
        }
      },
      "submitCapeBlock(((uint256,uint256),uint8[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes))[],(uint256,uint256,uint256,uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,(uint256,uint256)))[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint128,(uint256,uint256)))[],((uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes)),(uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256))[]))": {
        "details": "Transactions are validated and the blockchain state is updated. Moreover *BURN* transactions trigger the unwrapping of cape asset records into erc20 tokens.",
        "params": {
          "newBlock": "block to be processed by the CAPE contract."
        }
      },
      "submitCapeBlockWithMemos(((uint256,uint256),uint8[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes))[],(uint256,uint256,uint256,uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,(uint256,uint256)))[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint128,(uint256,uint256)))[],((uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes)),(uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256))[]),bytes)": {
        "params": {
          "": "{bytes} extraData data to be stored in calldata; this data is ignored by the contract function",
          "newBlock": "block to be processed by the CAPE contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "CAPE contract constructor method."
      },
      "depositErc20((uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256),address)": {
        "notice": "Wraps ERC-20 tokens into a CAPE asset defined in the record opening."
      },
      "faucetSetupForTestnet((uint256,uint256),bytes32)": {
        "notice": "Allocate native token faucet to a manager. For testnet only."
      },
      "isCapeAssetRegistered((uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))": {
        "notice": "Is the given asset definition registered?"
      },
      "lookup((uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))": {
        "notice": "Fetch the ERC-20 token address corresponding to the given asset definition."
      },
      "nativeDomesticAsset()": {
        "notice": "Return the CAP-native asset definition."
      },
      "sponsorCapeAsset(address,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)))": {
        "notice": "Create and register a new asset type associated with an ERC-20 token. Will revert if the asset type is already registered or the ERC-20 token address is zero."
      },
      "submitCapeBlock(((uint256,uint256),uint8[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes))[],(uint256,uint256,uint256,uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,(uint256,uint256)))[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint128,(uint256,uint256)))[],((uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes)),(uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256))[]))": {
        "notice": "Submit a new block to the CAPE contract."
      },
      "submitCapeBlockWithMemos(((uint256,uint256),uint8[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes))[],(uint256,uint256,uint256,uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,(uint256,uint256)))[],(uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint128,(uint256,uint256)))[],((uint256[],uint256[],((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256),uint256[]),(uint256,uint128,uint64,(uint256,uint256),bytes)),(uint128,(uint256,((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint128)),(uint256,uint256),bytes32,bool,uint256))[]),bytes)": {
        "notice": "Submit a new block with extra data to the CAPE contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5655,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "_roots",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 5659,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "_rootsMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 5661,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "_writeHead",
        "offset": 0,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 1332,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "assets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 114,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1638,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "nullifiers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 1640,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "blockHeight",
        "offset": 0,
        "slot": "6",
        "type": "t_uint64"
      },
      {
        "astId": 1643,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "_verifier",
        "offset": 8,
        "slot": "6",
        "type": "t_contract(IPlonkVerifier)6034"
      },
      {
        "astId": 1646,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "_recordsMerkleTree",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IRecordsMerkleTree)6062"
      },
      {
        "astId": 1649,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "pendingDeposits",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1651,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "deployer",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1653,
        "contract": "contracts/CAPE.sol:CAPE",
        "label": "faucetInitialized",
        "offset": 20,
        "slot": "9",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPlonkVerifier)6034": {
        "encoding": "inplace",
        "label": "contract IPlonkVerifier",
        "numberOfBytes": "20"
      },
      "t_contract(IRecordsMerkleTree)6062": {
        "encoding": "inplace",
        "label": "contract IRecordsMerkleTree",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}