#!/usr/bin/env python
# Copyright (c) 2022 Espresso Systems (espressosys.com)
# This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.

import json
import os
import subprocess
import sys
from pathlib import Path

try:
    subprocess.check_call(["hardhat", "compile"])
except subprocess.CalledProcessError as exc:
    print("Command 'hardhat compile' failed")
    sys.exit(exc.returncode)

# hardhat removes files in artifacts directory when compiling -> put these files elsewhere
contracts_dir = Path(os.environ["CONTRACTS_DIR"])
abi_dir = contracts_dir / "abi"
artifacts_dir = contracts_dir / "artifacts"


# For each solidity file (respectively its artifact output directory)
for directory in artifacts_dir.rglob("*.sol"):

    for hardhat_json in directory.glob("*.json"):
        if str(hardhat_json).endswith(".dbg.json"):
            continue

        contract_name = hardhat_json.stem
        contract_file = hardhat_json.parent
        out_dir = abi_dir / contract_file.relative_to(artifacts_dir) / contract_name

        os.makedirs(out_dir, exist_ok=True)

        with open(hardhat_json) as f:
            output = json.load(f)

        abi_out = out_dir / "abi.json"
        bytecode_out = out_dir / "bin.txt"

        # Only write files if they changed, to avoid invalidating cargo build script cache.
        try:
            with open(abi_out, "r") as f:
                existing = json.load(f)
        except OSError:  # file doesn't exist
            existing = None

        if output["abi"] != existing:
            with open(abi_out, "w") as f:
                json.dump(output["abi"], f)

        try:
            with open(bytecode_out, "r") as f:
                existing = f.read().strip()
        except OSError:  # file doesn't exist
            existing = None

        if output["bytecode"] != existing:
            with open(bytecode_out, "w") as f:
                print(output["bytecode"], file=f)


print("Finished extracting ABIs")
