#!/usr/bin/env bash
# Copyright (c) 2022 Espresso Systems (espressosys.com)
# This file is part of the Configurable Asset Privacy for Ethereum (CAPE) library.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.

#
# Verify contracts on etherscan.
#
# This requires the `ETHERSCAN_API_KEY` env var to be set. Keys can be found at
# https://etherscan.io/myapikey.
#
# Usage:
#
#       hardhat deploy --network NETWORK
#       etherscan-verify NETWORK
#
# For example
#
#       hardhat deploy --network goerli
#       etherscan-verify goerli
#
set -euo pipefail

NETWORK=$1

VERIFYING_KEYS_ADDRESS=$(cat contracts/deployments/$1/VerifyingKeys.json | jq -r .address)
RESCUE_LIB_ADDRESS=$(cat contracts/deployments/$1/RescueLib.json | jq -r .address)

CAPE_ADDRESS=$(cat contracts/deployments/$1/CAPE.json | jq -r .address)
CONSTRUCTOR_ARGS="$(cat contracts/deployments/$1/CAPE.json | jq -r '.args| join(" ")')"

# Has to be a file with .js extension.
LIBRARIES="$(mktemp -t "cape-libraries-XXXXXXXX.js")"
cat <<EOF > $LIBRARIES
module.exports = $(cat contracts/deployments/$NETWORK/CAPE.json | jq -r '.libraries')
EOF

# Often the two libraries are already verified because of a previous deployment.
# Therefore try to verify the remaining contracts in case of failures.

# Don't abort on error.
set +e

function ensure_verified() {
    output="$($@ 2>&1)"
    status=$?

    if [ $status -eq 0 ]; then
        echo "Contract sucessfully verified."
    elif echo "$output" | grep -q "Contract source code already verified"; then
        echo "Contract already verified."
    else
        echo "Something went wrong when running \"$@\."
        echo "Aborting."
        exit 1
    fi
}

echo Verifying RescueLib
ensure_verified hardhat verify --network $NETWORK $RESCUE_LIB_ADDRESS

echo Verifying VerifyingKeys
ensure_verified hardhat verify --network $NETWORK $VERIFYING_KEYS_ADDRESS

echo Verifying CAPE
ensure_verified hardhat verify --network $NETWORK --libraries $LIBRARIES $CAPE_ADDRESS $CONSTRUCTOR_ARGS

set -e

echo "All contracts verified!"
